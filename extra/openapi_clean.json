{
  "openapi": "3.1.0",
  "info": {
    "description": "## Overview\n\nWelcome to Twelve Data developer docs — your gateway to comprehensive financial market data through a powerful and easy-to-use API.\nTwelve Data provides access to financial markets across over 50 global countries, covering more than 1 million public instruments, including stocks, forex, ETFs, mutual funds, commodities, and cryptocurrencies.\n\n## Quickstart\n\nTo get started, you'll need to sign up for an API key. Once you have your API key, you can start making requests to the API.\n\n### Step 1: Create Twelve Data account\n\nSign up on the Twelve Data website to create your account [here](https://twelvedata.com/register). This gives you access to the API dashboard and your API key.\n\n### Step 2: Get your API key\n\nAfter signing in, navigate to your [dashboard](https://twelvedata.com/account/api-keys) to find your unique API key. This key is required to authenticate all API and WebSocket requests.\n\n### Step 3: Make your first request\n\nTry a simple API call with cURL to fetch the latest price for Apple (AAPL):\n\n```\ncurl \"https://api.twelvedata.com/price?symbol=AAPL&apikey=your_api_key\"\n```\n\n### Step 4: Make a request from Python or Javascript\n\nUse our client libraries or standard HTTP clients to make API calls programmatically. Here’s an example in [Python](https://github.com/twelvedata/twelvedata-python) and JavaScript:\n\n#### Python (using official Twelve Data SDK):\n\n```python\nfrom twelvedata import TDClient\n\n# Initialize client with your API key\ntd = TDClient(apikey=\"your_api_key\")\n\n# Get latest price for Apple\nprice = td.price(symbol=\"AAPL\").as_json()\n\nprint(price)\n```\n\n#### JavaScript (Node.js):\n\n```javascript\nconst fetch = require('node-fetch');\n\nfetch('https://api.twelvedata.com/price?symbol=AAPL&apikey=your_api_key')\n&nbsp;&nbsp;.then(response => response.json())\n&nbsp;&nbsp;.then(data => console.log(data));\n```\n\n### Step 5: Perform correlation analysis between Tesla and Microsoft prices\n\nFetch historical price data for Tesla (TSLA) and Microsoft (MSFT) and calculate the correlation of their closing prices:\n\n```python\nfrom twelvedata import TDClient\nimport pandas as pd\n\n# Initialize client with your API key\ntd = TDClient(apikey=\"your_api_key\")\n\n# Fetch historical price data for Tesla\ntsla_ts = td.time_series(\n&nbsp;&nbsp;&nbsp;&nbsp;symbol=\"TSLA\",\n&nbsp;&nbsp;&nbsp;&nbsp;interval=\"1day\",\n&nbsp;&nbsp;&nbsp;&nbsp;outputsize=100\n).as_pandas()\n\n# Fetch historical price data for Microsoft\nmsft_ts = td.time_series(\n&nbsp;&nbsp;&nbsp;&nbsp;symbol=\"MSFT\",\n&nbsp;&nbsp;&nbsp;&nbsp;interval=\"1day\",\n&nbsp;&nbsp;&nbsp;&nbsp;outputsize=100\n).as_pandas()\n\n# Align data on datetime index\ncombined = pd.concat(\n&nbsp;&nbsp;&nbsp;&nbsp;[tsla_ts['close'].astype(float), msft_ts['close'].astype(float)],\n&nbsp;&nbsp;&nbsp;&nbsp;axis=1,\n&nbsp;&nbsp;&nbsp;&nbsp;keys=[\"TSLA\", \"MSFT\"]\n).dropna()\n\n# Calculate correlation\ncorrelation = combined[\"TSLA\"].corr(combined[\"MSFT\"])\nprint(f\"Correlation of closing prices between TSLA and MSFT: {correlation:.2f}\")\n```\n\n### Authentication\n\nAuthenticate your requests using one of these methods:\n\n#### Query parameter method\n```\nGET https://api.twelvedata.com/endpoint?symbol=AAPL&apikey=your_api_key\n```\n\n#### HTTP header method (recommended)\n```\nAuthorization: apikey your_api_key\n```\n\n##### API key useful information\n<ul>\n<li> Demo API key (<code>apikey=demo</code>) available for demo requests</li>\n<li> Personal API key required for full access</li>\n<li> Premium endpoints and data require higher-tier plans (testable with <a href=\"https://twelvedata.com/exchanges\">trial symbols</a>)</li>\n</ul>\n\n### API endpoints\n\n Service | Base URL |\n---------|----------|\n REST API | `https://api.twelvedata.com` |\n WebSocket | `wss://ws.twelvedata.com` |\n\n### Parameter guidelines\n<ul>\n<li><b>Separator:</b> Use <code>&</code> to separate multiple parameters</li>\n<li><b>Case sensitivity:</b> Parameter names are case-insensitive</li>\n\n<ul><li><code>symbol=AAPL</code> = <code>symbol=aapl</code></li></ul>\n\n<li><b>Multiple values:</b> Separate with commas where supported</li>\n</ul>\n\n### Response handling\n\n#### Default format\nAll responses return JSON format by default unless otherwise specified.\n\n#### Null values\n<b>Important:</b> Some response fields may contain `null` values when data is unavailable for specific metrics. This is expected behavior, not an error.\n\n##### Best Practices:\n<ul>\n<li>Always implement <code>null</code> value handling in your application</li>\n<li>Use defensive programming techniques for data processing</li>\n<li>Consider fallback values or error handling for critical metrics</li>\n</ul>\n\n#### Error handling\nStructure your code to gracefully handle:\n<ul>\n<li>Network timeouts</li>\n<li>Rate limiting responses</li>\n<li>Invalid parameter errors</li>\n<li>Data unavailability periods</li>\n</ul>\n\n##### Best practices\n<ul>\n<li><b>Rate limits:</b> Adhere to your plan’s rate limits to avoid throttling. Check your dashboard for details.</li>\n<li><b>Error handling:</b> Implement retry logic for transient errors (e.g., <code>429 Too Many Requests</code>).</li>\n<li><b>Caching:</b> Cache responses for frequently accessed data to reduce API calls and improve performance.</li>\n<li><b>Secure storage:</b> Store your API key securely and never expose it in client-side code or public repositories.</li>\n</ul>\n\n## Errors\n\nTwelve Data API employs a standardized error response format, delivering a JSON object with `code`, `message`, and `status` keys for clear and consistent error communication.\n\n### Codes\n\nBelow is a table of possible error codes, their HTTP status, meanings, and resolution steps:\n\n Code | status | Meaning | Resolution |\n --- | --- | --- | --- |\n **400** | Bad Request | Invalid or incorrect parameter(s) provided. | Check the `message` in the response for details. Refer to the API Documenta­tion to correct the input. |\n **401** | Unauthor­ized | Invalid or incorrect API key. | Verify your API key is correct. Sign up for a key here. |\n **403** | Forbidden | API key lacks permissions for the requested resource (upgrade required). | Upgrade your plan here. |\n **404** | Not Found | Requested data could not be found. | Adjust parameters to be less strict as they may be too restrictive. |\n **414** | Parameter Too Long | Input parameter array exceeds the allowed length. | Follow the `message` guidance to adjust the parameter length. |\n **429** | Too Many Requests | API request limit reached for your key. | Wait briefly or upgrade your plan here. |\n **500** | Internal Server Error | Server-side issue occurred; retry later. | Contact support here for assistance. |\n\n### Example error response\n\nConsider the following invalid request:\n\n```\nhttps://api.twelvedata.com/time_series?symbol=AAPL&interval=0.99min&apikey=your_api_key\n```\n\nDue to the incorrect `interval` value, the API returns:\n\n```json\n{\n&nbsp;&nbsp;\"code\": 400,\n&nbsp;&nbsp;\"message\": \"Invalid **interval** provided: 0.99min. Supported intervals: 1min, 5min, 15min, 30min, 45min, 1h, 2h, 4h, 8h, 1day, 1week, 1month\",\n&nbsp;&nbsp;\"status\": \"error\"\n}\n```\n\nRefer to the API Documentation for valid parameter values to resolve such errors.\n\n## Libraries\n\nTwelve Data provides a growing ecosystem of libraries and integrations to help you build faster and smarter in your preferred environment. Official libraries are actively maintained by the Twelve Data team, while selected community-built libraries offer additional flexibility.\n\nA full list is available on our [GitHub profile](https://github.com/search?q=twelvedata).\n\n### Official SDKs\n<ul>\n<li><b>Python:</b> <a href=\"https://github.com/twelvedata/twelvedata-python\">twelvedata-python</a></li>\n<li><b>R:</b> <a href=\"https://github.com/twelvedata/twelvedata-r-sdk\">twelvedata-r-sdk</a></li>\n</ul>\n\n### AI integrations\n<ul>\n<li><b>Twelve Data MCP Server:</b> <a href=\"https://github.com/twelvedata/mcp\">Repository</a> — Model Context Protocol (MCP) server that provides seamless integration with AI assistants and language models, enabling direct access to Twelve Data's financial market data within conversational interfaces and AI workflows.</li>\n</ul>\n\n### Spreadsheet add-ons\n<ul>\n<li><b>Excel:</b> <a href=\"https://twelvedata.com/excel\">Excel Add-in</a></li>\n<li><b>Google Sheets:</b> <a href=\"https://twelvedata.com/google-sheets\">Google Sheets Add-on</a></li>\n</ul>\n\n### Community libraries\n\nThe community has developed libraries in several popular languages. You can explore more community libraries on [GitHub](https://github.com/search?q=twelvedata).\n<ul>\n<li><b>C#:</b> <a href=\"https://github.com/pseudomarkets/TwelveDataSharp\">TwelveDataSharp</a></li>\n<li><b>JavaScript:</b> <a href=\"https://github.com/evzaboun/twelvedata\">twelvedata</a></li>\n<li><b>PHP:</b> <a href=\"https://github.com/ingelby/twelvedata\">twelvedata</a></li>\n<li><b>Go:</b> <a href=\"https://github.com/soulgarden/twelvedata\">twelvedata</a></li>\n<li><b>TypeScript:</b> <a href=\"https://github.com/Clyde-Goodall/twelve-data-wrapper\">twelve-data-wrapper</a></li>\n</ul>\n\n### Other Twelve Data repositories\n<ul>\n<li><b>searchindex</b> <i>(Go)</i>: <a href=\"https://github.com/twelvedata/searchindex\">Repository</a> — In-memory search index by strings</li>\n<li><b>ws-tools</b> <i>(Python)</i>: <a href=\"https://github.com/twelvedata/ws-tools\">Repository</a> — Utility tools for WebSocket stream handling</li>\n</ul>",
    "title": "Twelve Data API",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "https://api.twelvedata.com/"
    }
  ],
  "security": [
    {
      "authorizationHeader": [
        "[]"
      ]
    },
    {
      "queryParameter": [
        "[]"
      ]
    }
  ],
  "paths": {
    "/ad": {
      "get": {
        "description": "The Accumulation/Distribution (AD) technical indicator is a volume-based tool used in chart analysis to identify potential buying or selling pressure in a security. It measures the cumulative flow of money into and out of a financial instrument by comparing its closing price to its price range, while considering trading volume. The AD line's trend can help traders gauge the strength of a price move and spot potential reversals.",
        "operationId": "GetTimeSeriesAd",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesAd_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "AD",
        "tags": [
          "technical_indicator"
        ],
        "x-additional-notes": "Take note that this endpoint is applicable to all instruments except currencies.",
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Volume Indicators",
        "x-order": "10",
        "x-url-hash": "ad"
      }
    },
    "/add": {
      "get": {
        "description": "The Addition (ADD) indicator performs a simple arithmetic addition of two input data series, typically used to combine multiple technical indicators or price data.",
        "operationId": "GetTimeSeriesAdd",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type used as the first part of technical indicator",
            "in": "query",
            "name": "series_type_1",
            "schema": {
              "default": "open",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType1",
              "x-order": "62"
            },
            "x-go-name": "SeriesType1",
            "x-order": "62"
          },
          {
            "description": "Price type used as the second part of technical indicator",
            "in": "query",
            "name": "series_type_2",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType2",
              "x-order": "64"
            },
            "x-go-name": "SeriesType2",
            "x-order": "64"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesAdd_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "ADD",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "20"
      }
    },
    "/adosc": {
      "get": {
        "description": "The Accumulation/Distribution Oscillator (ADOSC) is a momentum indicator derived from the AD line, used to identify buying or selling pressure and potential trend reversals by comparing short-term and long-term price and volume trends.",
        "operationId": "GetTimeSeriesAdOsc",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods for fast moving average. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "fast_period",
            "schema": {
              "default": 12,
              "format": "int64",
              "type": "integer",
              "x-go-name": "FastPeriod",
              "x-order": "62"
            },
            "x-go-name": "FastPeriod",
            "x-order": "62"
          },
          {
            "description": "Number of periods for slow moving average. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "slow_period",
            "schema": {
              "default": 26,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SlowPeriod",
              "x-order": "64"
            },
            "x-go-name": "SlowPeriod",
            "x-order": "64"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesAdOsc_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "ADOSC",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Volume Indicators",
        "x-order": "30"
      }
    },
    "/adx": {
      "get": {
        "description": "The Average Directional Index (ADX) measures the strength of a trend, regardless of direction, helping traders determine if a market is trending or ranging.",
        "operationId": "GetTimeSeriesAdx",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesAdx_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "ADX",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "40"
      }
    },
    "/adxr": {
      "get": {
        "description": "The Average Directional Movement Index Rating (ADXR) is a smoothed version of ADX, providing a more stable measure of trend strength over time.",
        "operationId": "GetTimeSeriesAdxr",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesAdxr_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "ADXR",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "50"
      }
    },
    "/analyst_ratings/light": {
      "get": {
        "description": "This API endpoint returns a lightweight version of ratings issued by analyst firms. Works for US and international markets.",
        "operationId": "GetAnalystRatingsLight",
        "parameters": [
          {
            "description": "Filter by symbol",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Filter by exchange name",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "50"
            },
            "x-go-name": "Exchange",
            "x-order": "50",
            "example": "NASDAQ"
          },
          {
            "description": "Filter by rating change action",
            "in": "query",
            "name": "rating_change",
            "schema": {
              "enum": [
                "Maintains",
                "Upgrade",
                "Downgrade",
                "Initiates",
                "Reiterates"
              ],
              "type": "string",
              "x-go-name": "RatingChange",
              "x-order": "60"
            },
            "x-go-name": "RatingChange",
            "x-order": "60"
          },
          {
            "description": "Number of records in response",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "70"
            },
            "x-go-name": "PageSize",
            "x-order": "70"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAnalystRatingsLight_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Analyst ratings - light",
        "tags": [
          "analysis"
        ],
        "x-api-credits-cost": "75",
        "x-api-credits-type": "symbol",
        "x-group": "Analysis",
        "x-order": "80",
        "x-starting-plan": "Ultra",
        "x-url-hash": "analyst_ratings_light"
      }
    },
    "/analyst_ratings/us_equities": {
      "get": {
        "description": "This API endpoint returns complete information on ratings issued by analyst firms. Works only for US equities.",
        "operationId": "GetAnalystRatingsUsEquities",
        "parameters": [
          {
            "description": "Filter by symbol",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Filter by exchange name",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "50"
            },
            "x-go-name": "Exchange",
            "x-order": "50",
            "example": "NASDAQ"
          },
          {
            "description": "Filter by rating change action",
            "in": "query",
            "name": "rating_change",
            "schema": {
              "enum": [
                "Maintains",
                "Upgrade",
                "Downgrade",
                "Initiates",
                "Reiterates"
              ],
              "type": "string",
              "x-go-name": "RatingChange",
              "x-order": "60"
            },
            "x-go-name": "RatingChange",
            "x-order": "60"
          },
          {
            "description": "Number of records in response",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "70"
            },
            "x-go-name": "PageSize",
            "x-order": "70"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAnalystRatingsUsEquities_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Analyst ratings - US equities",
        "tags": [
          "analysis"
        ],
        "x-api-credits-cost": "200",
        "x-api-credits-type": "symbol",
        "x-group": "Analysis",
        "x-order": "90",
        "x-starting-plan": "Ultra",
        "x-url-hash": "analyst_ratings_us"
      }
    },
    "/api_usage": {
      "get": {
        "description": "This endpoint will provide information on the current usage of Twelve Data API.",
        "operationId": "GetApiUsage",
        "parameters": [
          {
            "description": "Output format",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "10"
            },
            "x-go-name": "Format",
            "x-order": "10"
          },
          {
            "description": "Specify the delimiter used when downloading the CSV file",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "20"
            },
            "x-go-name": "Delimiter",
            "x-order": "20"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>2. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a>.</li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "UTC",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "30"
            },
            "x-go-name": "Timezone",
            "x-order": "30"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetApiUsage_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "API usage",
        "tags": [
          "advanced"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Advanced",
        "x-order": "30"
      }
    },
    "/apo": {
      "get": {
        "description": "The Absolute Price Oscillator (APO) is a momentum indicator that measures the difference between two moving averages, helping traders identify potential price trends and reversals.",
        "operationId": "GetTimeSeriesApo",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "64"
            },
            "x-go-name": "SeriesType",
            "x-order": "64"
          },
          {
            "description": "Number of periods for fast moving average. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "fast_period",
            "schema": {
              "default": 12,
              "format": "int64",
              "type": "integer",
              "x-go-name": "FastPeriod",
              "x-order": "62"
            },
            "x-go-name": "FastPeriod",
            "x-order": "62"
          },
          {
            "description": "Number of periods for slow moving average. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "slow_period",
            "schema": {
              "default": 26,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SlowPeriod",
              "x-order": "64"
            },
            "x-go-name": "SlowPeriod",
            "x-order": "64"
          },
          {
            "description": "The type of moving average used",
            "in": "query",
            "name": "ma_type",
            "schema": {
              "default": "SMA",
              "enum": [
                "SMA",
                "EMA",
                "WMA",
                "DEMA",
                "TEMA",
                "TRIMA",
                "KAMA",
                "MAMA",
                "T3MA"
              ],
              "type": "string",
              "x-go-name": "MAType",
              "x-order": "63"
            },
            "x-go-name": "MAType",
            "x-order": "63"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesApo_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "APO",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "60"
      }
    },
    "/aroon": {
      "get": {
        "description": "The Aroon indicator detects the presence and strength of trends by measuring the time elapsed since the highest high and lowest low within a specific period.",
        "operationId": "GetTimeSeriesAroon",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesAroon_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "AROON",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "70"
      }
    },
    "/aroonosc": {
      "get": {
        "description": "The Aroon Oscillator is the difference between the Aroon Up and Aroon Down lines, indicating trend strength and potential reversals.",
        "operationId": "GetTimeSeriesAroonOsc",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesAroonOsc_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "AROONOSC",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "80"
      }
    },
    "/atr": {
      "get": {
        "description": "The Average True Range (ATR) is a volatility indicator that measures the average range of price movement over a specified period, helping traders assess market volatility.",
        "operationId": "GetTimeSeriesAtr",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesAtr_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "ATR",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Volatility Indicators",
        "x-order": "90"
      }
    },
    "/avg": {
      "get": {
        "description": "The Average (AVG) indicator calculates the arithmetic mean of a data series over a specified period, often used to smooth out data fluctuations.",
        "operationId": "GetTimeSeriesAvg",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesAvg_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "AVG",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "100"
      }
    },
    "/avgprice": {
      "get": {
        "description": "The Average Price (AVGPRICE) indicator computes the average of a security's open, high, low, and close prices, providing a simplified view of price action.",
        "operationId": "GetTimeSeriesAvgPrice",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesAvgPrice_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "AVGPRICE",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "110"
      }
    },
    "/balance_sheet": {
      "get": {
        "description": "Returns complete balance sheet of a company showing the summary of assets, liabilities, and shareholders’ equity.",
        "operationId": "GetBalanceSheet",
        "parameters": [
          {
            "description": "Symbol ticker of instrument.\nFor preffered stocks use dot(.) delimiter.\nE.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "32"
            },
            "x-go-name": "Cusip",
            "x-order": "32",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The reporting period for the balane sheet data",
            "in": "query",
            "name": "period",
            "schema": {
              "default": "annual",
              "enum": [
                "annual",
                "quarterly"
              ],
              "type": "string",
              "x-go-name": "Period",
              "x-order": "70"
            },
            "x-go-name": "Period",
            "x-order": "70"
          },
          {
            "description": "Begin date for filtering items by fiscal date.\nReturns income statements with fiscal dates on or after this date. Format `2006-01-02`",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "80"
            },
            "x-go-name": "StartDate",
            "x-order": "80",
            "example": "2024-01-01"
          },
          {
            "description": "End date for filtering items by fiscal date.\nReturns income statements with fiscal dates on or before this date. Format `2006-01-02`",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "90"
            },
            "x-go-name": "EndDate",
            "x-order": "90",
            "example": "2024-05-01"
          },
          {
            "description": "Number of records in response",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 6,
              "format": "int64",
              "type": "integer",
              "x-go-name": "OutputSize",
              "x-order": "100"
            },
            "x-go-name": "OutputSize",
            "x-order": "100"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBalanceSheet_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Balance sheet",
        "tags": [
          "fundamentals"
        ],
        "x-additional-notes": "This API endpoint is available starting with the Pro plan. Full access to historical data is available only in the Enterprise plan.",
        "x-api-credits-cost": "100",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Fundamentals",
        "x-order": "130",
        "x-url-hash": "balance_sheet"
      }
    },
    "/balance_sheet/consolidated": {
      "get": {
        "description": "Returns consolidated balance sheet of a company showing the summary of assets, liabilities, and shareholders.",
        "operationId": "GetBalanceSheetConsolidated",
        "parameters": [
          {
            "description": "Symbol ticker of instrument.\nFor preffered stocks use dot(.) delimiter.\nE.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The reporting period for the balance sheet data.",
            "in": "query",
            "name": "period",
            "schema": {
              "default": "annual",
              "enum": [
                "annual",
                "quarterly"
              ],
              "type": "string",
              "x-go-name": "Period",
              "x-order": "70"
            },
            "x-go-name": "Period",
            "x-order": "70"
          },
          {
            "description": "Begin date for filtering items by fiscal date. Returns income statements with fiscal dates on or after this date.\nFormat `2006-01-02`",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "80"
            },
            "x-go-name": "StartDate",
            "x-order": "80"
          },
          {
            "description": "End date for filtering items by fiscal date. Returns income statements with fiscal dates on or before this date.\nFormat `2006-01-02`",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "90"
            },
            "x-go-name": "EndDate",
            "x-order": "90"
          },
          {
            "description": "Number of records in response",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 6,
              "format": "int64",
              "type": "integer",
              "x-go-name": "OutputSize",
              "x-order": "100"
            },
            "x-go-name": "OutputSize",
            "x-order": "100"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBalanceSheetConsolidated_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Balance sheet consolidated",
        "tags": [
          "fundamentals"
        ],
        "x-additional-notes": "This API endpoint is available starting with the Ultra plan. Full access to historical data is available only in the Enterprise plan.",
        "x-api-credits-cost": "100",
        "x-api-credits-type": "symbol",
        "x-group": "Fundamentals",
        "x-order": "140",
        "x-url-hash": "balance_sheet_consolidated"
      }
    },
    "/batch": {
      "post": {
        "description": "This endpoint allows you to request multiple instruments, intervals, and endpoints simultaneously.\n\n### Request body\nOnly JSON `POST` requests are supported.\nThe request content structure consists of key-value items. The key is a unique request ID. The value is requested url.\n\n### Response\nThe response contains key-value data. The key is a unique request ID. The value is returned data.\n\n### API credits\n<ul>\n<li>The number of concurrent requests is limited by your subscription plan.</li>\n<li>Credits are consumed per requested endpoint, with the total usage equal to the sum of individual requests in the batch.</li>\n<li>If the requested data exceeds your available credits, only partial data will be returned asynchronously until your quota is exhausted.</li>\n<li>If one or more requests in the batch contain errors (e.g., invalid symbols or unsupported intervals), it will not affect the successful processing of other requests. Errors are reported individually within the response, allowing you to identify and correct specific issues without impacting the entire batch.</li>\n</ul>",
        "operationId": "advanced",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/advanced_request_value"
                },
                "type": "object"
              }
            },
            "application/xml": {
              "schema": {
                "additionalProperties": {
                  "$ref": "#/components/schemas/advanced_request_value"
                },
                "type": "object"
              }
            }
          },
          "description": "Map of requests",
          "required": false,
          "x-example-key": "req_1",
          "x-go-name": "Body",
          "x-order": 10
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/advanced_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Batches",
        "tags": [
          "advanced"
        ],
        "x-badge": "Useful",
        "x-group": "Advanced",
        "x-order": 10,
        "x-url-hash": "batch-requests",
        "x-codegen-request-body-name": "key"
      }
    },
    "/bbands": {
      "get": {
        "description": "Bollinger Bands (BBANDS) are volatility bands placed above and below a moving average, measuring price volatility and helping traders identify potential overbought or oversold conditions.",
        "operationId": "GetTimeSeriesBBands",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "63"
            },
            "x-go-name": "SeriesType",
            "x-order": "63"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 20,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "64"
            },
            "x-go-name": "TimePeriod",
            "x-order": "64"
          },
          {
            "description": "Number of standard deviations. Must be at least `1`",
            "in": "query",
            "name": "sd",
            "schema": {
              "default": 2,
              "format": "double",
              "type": "number",
              "x-go-name": "StandardDeviation",
              "x-order": "62"
            },
            "x-go-name": "StandardDeviation",
            "x-order": "62"
          },
          {
            "description": "The type of moving average used",
            "in": "query",
            "name": "ma_type",
            "schema": {
              "default": "SMA",
              "enum": [
                "SMA",
                "EMA",
                "WMA",
                "DEMA",
                "TEMA",
                "TRIMA",
                "KAMA",
                "MAMA",
                "T3MA"
              ],
              "type": "string",
              "x-go-name": "MAType",
              "x-order": "61"
            },
            "x-go-name": "MAType",
            "x-order": "61"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesBBands_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "BBANDS",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "120"
      }
    },
    "/beta": {
      "get": {
        "description": "The Beta indicator measures a security's sensitivity to market movements, comparing its price changes to a benchmark index to assess systematic risk.",
        "operationId": "GetTimeSeriesBeta",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type used as the first part of technical indicator",
            "in": "query",
            "name": "series_type_1",
            "schema": {
              "default": "open",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType1",
              "x-order": "61"
            },
            "x-go-name": "SeriesType1",
            "x-order": "61"
          },
          {
            "description": "Price type used as the second part of technical indicator",
            "in": "query",
            "name": "series_type_2",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType2",
              "x-order": "62"
            },
            "x-go-name": "SeriesType2",
            "x-order": "62"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "63"
            },
            "x-go-name": "TimePeriod",
            "x-order": "63"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesBeta_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "BETA",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Statistic Functions",
        "x-order": "130"
      }
    },
    "/bonds": {
      "get": {
        "description": "This API call returns an array of bonds available at Twelve Data API. This list is updated daily.",
        "operationId": "GetBonds",
        "parameters": [
          {
            "description": "The ticker symbol of an instrument for which data is requested",
            "in": "query",
            "name": "symbol",
            "schema": {
              "type": "string",
              "x-go-name": "Symbol"
            },
            "x-go-name": "Symbol",
            "example": "US2Y"
          },
          {
            "description": "Filter by exchange name",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange"
            },
            "x-go-name": "Exchange",
            "example": "NYSE"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country"
            },
            "x-go-name": "Country",
            "example": "United States"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format"
            },
            "x-go-name": "Format"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter"
            },
            "x-go-name": "Delimiter"
          },
          {
            "description": "Adds info on which plan symbol is available",
            "in": "query",
            "name": "show_plan",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "ShowPlan"
            },
            "x-go-name": "ShowPlan"
          },
          {
            "description": "Page number of the results to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Page"
            },
            "x-go-name": "Page"
          },
          {
            "description": "Determines the number of data points returned in the output",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 5000,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize"
            },
            "x-go-name": "PageSize"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBonds_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Bonds list",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Reference data",
        "x-order": "50"
      }
    },
    "/bop": {
      "get": {
        "description": "The Balance of Power (BOP) indicator measures the balance between buying and selling pressure in a security by comparing its open, high, low, and close prices, helping traders identify potential price trends.",
        "operationId": "GetTimeSeriesBop",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesBop_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "BOP",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "140"
      }
    },
    "/cash_flow": {
      "get": {
        "description": "Returns complete cash flow of a company showing the net amount of cash and cash equivalents being transferred into and out of business.",
        "operationId": "GetCashFlow",
        "parameters": [
          {
            "description": "Symbol ticker of instrument.\nFor preffered stocks use dot(.) delimiter.\nE.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The reporting period for the cash flow statements",
            "in": "query",
            "name": "period",
            "schema": {
              "default": "annual",
              "enum": [
                "annual",
                "quarterly"
              ],
              "type": "string",
              "x-go-name": "Period",
              "x-order": "70"
            },
            "x-go-name": "Period",
            "x-order": "70"
          },
          {
            "description": "Start date for filtering cash flow statements.\nOnly cash flow statements with fiscal dates on or after this date will be included.\nFormat `2006-01-02`",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "80"
            },
            "x-go-name": "StartDate",
            "x-order": "80",
            "example": "2024-01-01"
          },
          {
            "description": "End date for filtering cash flow statements.\nOnly cash flow statements with fiscal dates on or before this date will be included.\nFormat `2006-01-02`",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "90"
            },
            "x-go-name": "EndDate",
            "x-order": "90",
            "example": "2024-12-31"
          },
          {
            "description": "Number of records in response",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 6,
              "format": "int64",
              "type": "integer",
              "x-go-name": "OutputSize",
              "x-order": "100"
            },
            "x-go-name": "OutputSize",
            "x-order": "100"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCashFlow_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Cash flow",
        "tags": [
          "fundamentals"
        ],
        "x-additional-notes": "This API endpoint is available starting with the Pro plan. Full access to historical data is available only in the Enterprise plan.",
        "x-api-credits-cost": "100",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Fundamentals",
        "x-order": "150",
        "x-url-hash": "cash_flow"
      }
    },
    "/cash_flow/consolidated": {
      "get": {
        "description": "Returns consolidated cash flow of a company showing the net amount of cash and cash equivalents being transferred into and out of business.",
        "operationId": "GetCashFlowConsolidated",
        "parameters": [
          {
            "description": "Symbol ticker of instrument.\nFor preffered stocks use dot(.) delimiter.\nE.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The reporting period for the cash flow statements",
            "in": "query",
            "name": "period",
            "schema": {
              "default": "annual",
              "enum": [
                "annual",
                "quarterly"
              ],
              "type": "string",
              "x-go-name": "Period",
              "x-order": "70"
            },
            "x-go-name": "Period",
            "x-order": "70"
          },
          {
            "description": "Start date for filtering cash flow statements. Only cash flow statements with fiscal dates on or after this date will be included.\nFormat `2006-01-02`",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "80"
            },
            "x-go-name": "StartDate",
            "x-order": "80",
            "example": "2024-01-01"
          },
          {
            "description": "End date for filtering cash flow statements. Only cash flow statements with fiscal dates on or before this date will be included.\nFormat `2006-01-02`",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "90"
            },
            "x-go-name": "EndDate",
            "x-order": "90",
            "example": "2024-12-31"
          },
          {
            "description": "Number of records in response",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 6,
              "format": "int64",
              "type": "integer",
              "x-go-name": "OutputSize",
              "x-order": "100"
            },
            "x-go-name": "OutputSize",
            "x-order": "100"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCashFlowConsolidated_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Cash flow consolidated",
        "tags": [
          "fundamentals"
        ],
        "x-additional-notes": "This API endpoint is available starting with the Ultra plan. Full access to historical data is available only in the Enterprise plan.",
        "x-api-credits-cost": "100",
        "x-api-credits-type": "symbol",
        "x-group": "Fundamentals",
        "x-order": "160",
        "x-url-hash": "cash_flow_consolidated"
      }
    },
    "/cci": {
      "get": {
        "description": "The Commodity Channel Index (CCI) is a momentum oscillator that measures the deviation of a security's price from its average relative to its typical price range, helping traders identify overbought or oversold conditions.",
        "operationId": "GetTimeSeriesCci",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 20,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesCci_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "CCI",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "150"
      }
    },
    "/ceil": {
      "get": {
        "description": "The Ceiling (CEIL) indicator rounds input data up to the nearest integer, often used in conjunction with other indicators for data analysis or calculation purposes.",
        "operationId": "GetTimeSeriesCeil",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesCeil_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "CEIL",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "160"
      }
    },
    "/cmo": {
      "get": {
        "description": "The Chande Momentum Oscillator (CMO) is a momentum indicator that measures the relative strength of up and down price movements, helping traders identify overbought or oversold conditions and potential trend reversals.",
        "operationId": "GetTimeSeriesCmo",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesCmo_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "CMO",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "170"
      }
    },
    "/commodities": {
      "get": {
        "description": "This API call returns an array of commodity pairs available at Twelve Data API. This list is updated daily.",
        "operationId": "GetCommodities",
        "parameters": [
          {
            "description": "The ticker symbol of an instrument for which data is requested",
            "in": "query",
            "name": "symbol",
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "XAU/USD"
          },
          {
            "description": "Filter by category of commodity",
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "x-go-name": "Category",
              "x-order": "20"
            },
            "x-go-name": "Category",
            "x-order": "20",
            "example": "Precious Metal"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "30"
            },
            "x-go-name": "Format",
            "x-order": "30"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "40"
            },
            "x-go-name": "Delimiter",
            "x-order": "40"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCommodities_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Commodities list",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Reference data",
        "x-order": "25"
      }
    },
    "/coppock": {
      "get": {
        "description": "The Coppock Curve is a momentum oscillator that measures the rate of change in a security's price, helping traders identify potential long-term trend reversals, especially in bottoming markets.",
        "operationId": "GetTimeSeriesCoppock",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Number of periods for weighted moving average. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "wma_period",
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer",
              "x-go-name": "WMAPeriod",
              "x-order": "64"
            },
            "x-go-name": "WMAPeriod",
            "x-order": "64"
          },
          {
            "description": "Number of periods for long term rate of change. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "long_roc_period",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "LongRocPeriod",
              "x-order": "61"
            },
            "x-go-name": "LongRocPeriod",
            "x-order": "61"
          },
          {
            "description": "Number of periods for short term rate of change. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "short_roc_period",
            "schema": {
              "default": 11,
              "format": "int64",
              "type": "integer",
              "x-go-name": "ShortRocPeriod",
              "x-order": "63"
            },
            "x-go-name": "ShortRocPeriod",
            "x-order": "63"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesCoppock_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "COPPOCK",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "180"
      }
    },
    "/correl": {
      "get": {
        "description": "The Correlation (CORREL) indicator measures the statistical relationship between two securities, helping traders identify potential diversification opportunities or pairs trading candidates.",
        "operationId": "GetTimeSeriesCorrel",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type used as the first part of technical indicator",
            "in": "query",
            "name": "series_type_1",
            "schema": {
              "default": "open",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType1",
              "x-order": "62"
            },
            "x-go-name": "SeriesType1",
            "x-order": "62"
          },
          {
            "description": "Price type used as the second part of technical indicator",
            "in": "query",
            "name": "series_type_2",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType2",
              "x-order": "63"
            },
            "x-go-name": "SeriesType2",
            "x-order": "63"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "64"
            },
            "x-go-name": "TimePeriod",
            "x-order": "64"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesCorrel_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "CORREL",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Statistic Functions",
        "x-order": "190"
      }
    },
    "/countries": {
      "get": {
        "description": "This API call returns an array of countries available at Twelve Data API with their ISO codes, names, capital, and currency.",
        "operationId": "GetCountries",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCountries_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Countries list",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Reference data",
        "x-order": "140",
        "x-url-hash": "countries"
      }
    },
    "/cross_listings": {
      "get": {
        "description": "This API call returns an array of cross listed symbols for a specified instrument. Cross listings are the same securities listed on different exchanges. This list is updated daily.",
        "operationId": "GetCrossListings",
        "parameters": [
          {
            "description": "The ticker symbol of an instrument for which data is requested",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "NVDA"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "20"
            },
            "x-go-name": "Exchange",
            "x-order": "20",
            "example": "NASDAQ"
          },
          {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "30"
            },
            "x-go-name": "MicCode",
            "x-order": "30",
            "example": "XNGS"
          },
          {
            "description": "Country to which stock exchange belongs to",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCrossListings_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Cross listings",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "40",
        "x-api-credits-type": "request",
        "x-group": "Reference data",
        "x-order": "80",
        "x-url-hash": "cross_listings"
      }
    },
    "/crsi": {
      "get": {
        "description": "The Connors RSI is a composite indicator combining the Relative Strength Index (RSI), the Rate of Change (ROC), and the Up/Down Length, providing a more comprehensive view of momentum and potential trend reversals.",
        "operationId": "GetTimeSeriesCrsi",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "63"
            },
            "x-go-name": "SeriesType",
            "x-order": "63"
          },
          {
            "description": "Number of periods for RSI used to calculate price momentum. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "rsi_period",
            "schema": {
              "default": 3,
              "format": "int64",
              "type": "integer",
              "x-go-name": "RsiPeriod",
              "x-order": "62"
            },
            "x-go-name": "RsiPeriod",
            "x-order": "62"
          },
          {
            "description": "Number of periods for RSI used to calculate up/down trend. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "up_down_length",
            "schema": {
              "default": 2,
              "format": "int64",
              "type": "integer",
              "x-go-name": "UpDownLength",
              "x-order": "64"
            },
            "x-go-name": "UpDownLength",
            "x-order": "64"
          },
          {
            "description": "Number of periods used to calculate PercentRank. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "percent_rank_period",
            "schema": {
              "default": 100,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PercentRankPeriod",
              "x-order": "61"
            },
            "x-go-name": "PercentRankPeriod",
            "x-order": "61"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesCrsi_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "CRSI",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "200"
      }
    },
    "/cryptocurrencies": {
      "get": {
        "description": "This API call returns an array of cryptocurrencies available at Twelve Data API. This list is updated daily.",
        "operationId": "GetCryptocurrencies",
        "parameters": [
          {
            "description": "The ticker symbol of an instrument for which data is requested",
            "in": "query",
            "name": "symbol",
            "schema": {
              "type": "string",
              "x-go-name": "Symbol"
            },
            "x-go-name": "Symbol",
            "example": "BTC/USD"
          },
          {
            "description": "Filter by exchange name. E.g. `Binance`, `Coinbase`, etc.",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange"
            },
            "x-go-name": "Exchange",
            "example": "Binance"
          },
          {
            "description": "Filter by currency base",
            "in": "query",
            "name": "currency_base",
            "schema": {
              "type": "string",
              "x-go-name": "CurrencyBase"
            },
            "x-go-name": "CurrencyBase",
            "example": "BTC"
          },
          {
            "description": "Filter by currency quote",
            "in": "query",
            "name": "currency_quote",
            "schema": {
              "type": "string",
              "x-go-name": "CurrencyQuote"
            },
            "x-go-name": "CurrencyQuote",
            "example": "USD"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format"
            },
            "x-go-name": "Format"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter"
            },
            "x-go-name": "Delimiter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCryptocurrencies_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Cryptocurrencies list",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Reference data",
        "x-order": "30"
      }
    },
    "/cryptocurrency_exchanges": {
      "get": {
        "description": "This API call returns an array of cryptocurrency exchanges available at Twelve Data API. This list is updated daily.",
        "operationId": "GetCryptocurrencyExchanges",
        "parameters": [
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "10"
            },
            "x-go-name": "Format",
            "x-order": "10"
          },
          {
            "description": "Specify the delimiter used when downloading the CSV file",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "20"
            },
            "x-go-name": "Delimiter",
            "x-order": "20"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCryptocurrencyExchanges_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Cryptocurrency exchanges",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Reference data",
        "x-order": "110"
      }
    },
    "/currency_conversion": {
      "get": {
        "description": "This API call returns real-time exchange rate and converted amount for currency pair. Works with forex and cryptocurrency.",
        "operationId": "GetCurrencyConversion",
        "parameters": [
          {
            "description": "The currency pair you want to request can be either forex or cryptocurrency. Slash(/) delimiter is used. E.g. `EUR/USD` or `BTC/ETH` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "EUR/USD"
          },
          {
            "description": "Amount of base currency to be converted into quote currency. Supports values in the range from `0` and above",
            "in": "query",
            "name": "amount",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number",
              "x-go-name": "Amount",
              "x-order": "20"
            },
            "x-go-name": "Amount",
            "x-order": "20",
            "example": "100"
          },
          {
            "description": "If not null, will use exchange rate from a specific date or time. Format `2006-01-02` or `2006-01-02 15:04:05`. Is set in the local exchange time zone, use timezone parameter to specify a specific time zone",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "30"
            },
            "x-go-name": "Date",
            "x-order": "30",
            "example": "2006-01-02 15:04:05"
          },
          {
            "description": "Value can be `JSON` or `CSV`. Default `JSON`",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "40"
            },
            "x-go-name": "Format",
            "x-order": "40"
          },
          {
            "description": "Specify the delimiter used when downloading the `CSV` file. Default semicolon `;`",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "50"
            },
            "x-go-name": "Delimiter",
            "x-order": "50"
          },
          {
            "description": "The number of decimal places for the data",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "60"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "60"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a>.</li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "60"
            },
            "x-go-name": "Timezone",
            "x-order": "60",
            "example": "UTC"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCurrencyConversion_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Currency conversion",
        "tags": [
          "market_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-badge": "Useful",
        "x-group": "Core data",
        "x-order": "40"
      }
    },
    "/dema": {
      "get": {
        "description": "The Double Exponential Moving Average (DEMA) is a more responsive moving average that reduces lag by giving more weight to recent price data, helping traders identify trends and potential entry or exit points.",
        "operationId": "GetTimeSeriesDema",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesDema_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "DEMA",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "210"
      }
    },
    "/direct_holders": {
      "get": {
        "description": "Returns the amount of the stocks owned directly and recorded in the company's share registry.",
        "operationId": "GetDirectHolders",
        "parameters": [
          {
            "description": "Symbol ticker of instrument.\nFor preffered stocks use dot(.) delimiter.\nE.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDirectHolders_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Direct holders",
        "tags": [
          "regulatory"
        ],
        "x-additional-notes": "This API endpoint is available starting with the Ultra plan and currently working in beta for the Tadawul exchange.",
        "x-api-credits-cost": "1500",
        "x-api-credits-type": "symbol",
        "x-badge": "New",
        "x-group": "Regulatory",
        "x-order": "60",
        "x-starting-plan": "Ultra",
        "x-url-hash": "direct-holders"
      }
    },
    "/div": {
      "get": {
        "description": "The Division (DIV) indicator performs arithmetic division between two input data series, typically used to combine or normalize multiple technical indicators or price data.",
        "operationId": "GetTimeSeriesDiv",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type used as the first part of technical indicator",
            "in": "query",
            "name": "series_type_1",
            "schema": {
              "default": "open",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType1",
              "x-order": "62"
            },
            "x-go-name": "SeriesType1",
            "x-order": "62"
          },
          {
            "description": "Price type used as the second part of technical indicator",
            "in": "query",
            "name": "series_type_2",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType2",
              "x-order": "64"
            },
            "x-go-name": "SeriesType2",
            "x-order": "64"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesDiv_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "DIV",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "220"
      }
    },
    "/dividends": {
      "get": {
        "description": "Returns the amount of dividends paid out for the last 10+ years.",
        "operationId": "GetDividends",
        "parameters": [
          {
            "description": "Symbol ticker of instrument. For preffered stocks use dot(.) delimiter.\nE.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "27"
            },
            "x-go-name": "Cusip",
            "x-order": "27",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "30"
            },
            "x-go-name": "Exchange",
            "x-order": "30",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "40"
            },
            "x-go-name": "MicCode",
            "x-order": "40",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "50"
            },
            "x-go-name": "Country",
            "x-order": "50",
            "example": "US"
          },
          {
            "description": "Specifies the time range for which to retrieve dividend data.\nAccepts values such as `last` (most recent dividend), `next` (upcoming dividend),\n`1m` - `5y` for respective periods, or `full` for all available data.\nIf provided together with `start_date` and/or `end_date`, this parameter takes precedence.",
            "in": "query",
            "name": "range",
            "schema": {
              "default": "last",
              "enum": [
                "last",
                "next",
                "1m",
                "3m",
                "6m",
                "ytd",
                "1y",
                "2y",
                "5y",
                "full"
              ],
              "type": "string",
              "x-go-name": "Range",
              "x-order": "60"
            },
            "x-go-name": "Range",
            "x-order": "60"
          },
          {
            "description": "Start date for the dividend data query. Only dividends with dates on or after this date will be returned. Format `2006-01-02`.\nIf provided together with `range` parameter, `range` will take precedence.",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "70"
            },
            "x-go-name": "StartDate",
            "x-order": "70",
            "example": "2024-01-01"
          },
          {
            "description": "End date for the dividend data query. Only dividends with dates on or after this date will be returned. Format `2006-01-02`.\nIf provided together with `range` parameter, `range` will take precedence.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "80"
            },
            "x-go-name": "EndDate",
            "x-order": "80",
            "example": "2024-12-31"
          },
          {
            "description": "Specifies if there should be an adjustment",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": true,
              "type": "boolean",
              "x-go-name": "Adjust",
              "x-order": "90"
            },
            "x-go-name": "Adjust",
            "x-order": "90"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDividends_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Dividends",
        "tags": [
          "fundamentals"
        ],
        "x-api-credits-cost": "20",
        "x-api-credits-type": "symbol",
        "x-group": "Fundamentals",
        "x-order": "30",
        "x-starting-plan": "Grow"
      }
    },
    "/dividends_calendar": {
      "get": {
        "description": "This API method returns dividend data as a calendar for a given date range. To call custom period, use start_date and end_date parameters.",
        "operationId": "GetDividendsCalendar",
        "parameters": [
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "10"
            },
            "x-go-name": "Exchange",
            "x-order": "10",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "20"
            },
            "x-go-name": "MicCode",
            "x-order": "20",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "30"
            },
            "x-go-name": "Country",
            "x-order": "30",
            "example": "US"
          },
          {
            "description": "Start date for the dividends calendar query. Only dividends with ex-dates on or after this date will be returned. Format `2006-01-02`",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "40"
            },
            "x-go-name": "StartDate",
            "x-order": "40",
            "example": "2024-01-01"
          },
          {
            "description": "End date for the dividends calendar query. Only dividends with ex-dates on or before this date will be returned. Format `2006-01-02`",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "50"
            },
            "x-go-name": "EndDate",
            "x-order": "50",
            "example": "2024-12-31"
          },
          {
            "description": "Number of data points to retrieve.\nSupports values in the range from `1` to `500`.\nDefault `100` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 100,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Outputsize",
              "x-order": "60"
            },
            "x-go-name": "Outputsize",
            "x-order": "60"
          },
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Page",
              "x-order": "70"
            },
            "x-go-name": "Page",
            "x-order": "70"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDividendsCalendar_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Dividends calendar",
        "tags": [
          "fundamentals"
        ],
        "x-api-credits-cost": "40",
        "x-api-credits-type": "symbol",
        "x-group": "Fundamentals",
        "x-order": "40",
        "x-starting-plan": "Grow"
      }
    },
    "/dpo": {
      "get": {
        "description": "The Detrended Price Oscillator (DPO) is a momentum oscillator that removes the underlying trend from price data, helping traders identify potential cyclical patterns and overbought or oversold conditions.",
        "operationId": "GetTimeSeriesDpo",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specifies if there should be a shift to match the current price",
            "in": "query",
            "name": "centered",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Centered",
              "x-order": "62"
            },
            "x-go-name": "Centered",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesDpo_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "DPO",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "230"
      }
    },
    "/dx": {
      "get": {
        "description": "The Directional Movement Index (DX) is a component of the ADX indicator, measuring the strength of the positive and negative directional movements in a security's price.",
        "operationId": "GetTimeSeriesDx",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesDx_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "DX",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "240"
      }
    },
    "/earliest_timestamp": {
      "get": {
        "description": "This method returns the first available DateTime for a given instrument at the specific interval.",
        "operationId": "GetEarliestTimestamp",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument.",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI).",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG000B9XRY4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series.",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1day"
          },
          {
            "description": "Exchange where instrument is traded.",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "Nasdaq"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard.",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a>.</li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone"
            },
            "x-go-name": "Timezone"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEarliestTimestamp_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Earliest timestamp",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Reference data",
        "x-order": "160"
      }
    },
    "/earnings": {
      "get": {
        "description": "This API call returns earnings data for a given company, including EPS estimate and EPS actual. Earnings are available for complete company history.",
        "operationId": "GetEarnings",
        "parameters": [
          {
            "description": "Symbol ticker of instrument.\nFor preffered stocks use dot(.) delimiter.\nE.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Type of earning, returns only 1 record.\nWhen is not empty, dates and outputsize parameters are ignored",
            "in": "query",
            "name": "period",
            "schema": {
              "enum": [
                "latest",
                "next"
              ],
              "type": "string",
              "x-go-name": "Period",
              "x-order": "80"
            },
            "x-go-name": "Period",
            "x-order": "80"
          },
          {
            "description": "Number of data points to retrieve.\nSupports values in the range from `1` to `1000`.\nDefault `10` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "90"
            },
            "x-go-name": "PageSize",
            "x-order": "90"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "100"
            },
            "x-go-name": "Format",
            "x-order": "100"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "110"
            },
            "x-go-name": "Delimiter",
            "x-order": "110"
          },
          {
            "description": "The date from which the data is requested. The date format is `YYYY-MM-DD`.",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "140"
            },
            "x-go-name": "StartDate",
            "x-order": "140",
            "example": "2024-04-01"
          },
          {
            "description": "The date to which the data is requested. The date format is `YYYY-MM-DD`.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "150"
            },
            "x-go-name": "EndDate",
            "x-order": "150",
            "example": "2024-04-30"
          },
          {
            "description": "The number of decimal places in the response data. Should be in range [0,11] inclusive",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 2,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "130"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "130"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEarnings_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Earnings",
        "tags": [
          "fundamentals"
        ],
        "x-api-credits-cost": "20",
        "x-api-credits-type": "symbol",
        "x-group": "Fundamentals",
        "x-order": "70",
        "x-starting-plan": "Grow"
      }
    },
    "/earnings_calendar": {
      "get": {
        "description": "This API method returns earning data as a calendar for a given date range. By default today’s earning is returned. To call custom period, use start_date and end_date parameters.",
        "operationId": "GetEarningsCalendar",
        "parameters": [
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "10"
            },
            "x-go-name": "Exchange",
            "x-order": "10",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "20"
            },
            "x-go-name": "MicCode",
            "x-order": "20",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "30"
            },
            "x-go-name": "Country",
            "x-order": "30",
            "example": "United States"
          },
          {
            "description": "Value can be JSON or CSV",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "40"
            },
            "x-go-name": "Format",
            "x-order": "40"
          },
          {
            "description": "Specify the delimiter used when downloading the CSV file",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "50"
            },
            "x-go-name": "Delimiter",
            "x-order": "50"
          },
          {
            "description": "Can be used separately and together with end_date.\nFormat `2006-01-02` or `2006-01-02 15:04:05`",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "70"
            },
            "x-go-name": "StartDate",
            "x-order": "70",
            "example": "2024-04-01"
          },
          {
            "description": "Can be used separately and together with start_date.\nFormat `2006-01-02` or `2006-01-02 15:04:05`",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "80"
            },
            "x-go-name": "EndDate",
            "x-order": "80",
            "example": "2024-04-30"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0,11] inclusive",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 2,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "60"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "60"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEarningsCalendar_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Earnings calendar",
        "tags": [
          "fundamentals"
        ],
        "x-api-credits-cost": "40",
        "x-api-credits-type": "request",
        "x-group": "Fundamentals",
        "x-order": "80",
        "x-starting-plan": "Grow"
      }
    },
    "/earnings_estimate": {
      "get": {
        "description": "This API endpoint returns analysts' estimate for a company's future quarterly and annual earnings per share (EPS).",
        "operationId": "GetEarningsEstimate",
        "parameters": [
          {
            "description": "Filter by symbol",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEarningsEstimate_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Earnings estimate",
        "tags": [
          "analysis"
        ],
        "x-api-credits-cost": "20",
        "x-api-credits-type": "symbol",
        "x-badge": "Useful",
        "x-group": "Analysis",
        "x-order": "10",
        "x-starting-plan": "Ultra",
        "x-url-hash": "earning_estimate"
      }
    },
    "/edgar_filings/archive": {
      "get": {
        "description": "Real-time and historical access to all forms, filings, and exhibits directly from the SEC's EDGAR system.",
        "operationId": "GetEdgarFilingsArchive",
        "parameters": [
          {
            "description": "The ticker symbol of an instrument for which data is requested",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Filter by exchange name",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Filter by market identifier code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNGS"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "Filter by form types, example `8-K`, `EX-1.1`",
            "in": "query",
            "name": "form_type",
            "schema": {
              "type": "string",
              "x-go-name": "FormType",
              "x-order": "70"
            },
            "x-go-name": "FormType",
            "x-order": "70",
            "example": "8-K"
          },
          {
            "description": "Filter by filled time from",
            "in": "query",
            "name": "filled_from",
            "schema": {
              "type": "string",
              "x-go-name": "FilledFrom",
              "x-order": "80"
            },
            "x-go-name": "FilledFrom",
            "x-order": "80",
            "example": "2024-01-01"
          },
          {
            "description": "Filter by filled time to",
            "in": "query",
            "name": "filled_to",
            "schema": {
              "type": "string",
              "x-go-name": "FilledTo",
              "x-order": "90"
            },
            "x-go-name": "FilledTo",
            "x-order": "90",
            "example": "2024-01-01"
          },
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Page",
              "x-order": "100"
            },
            "x-go-name": "Page",
            "x-order": "100"
          },
          {
            "description": "Number of records in response",
            "in": "query",
            "name": "page_size",
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "110"
            },
            "x-go-name": "PageSize",
            "x-order": "110"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEdgarFilingsArchive_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Edgar filings archive",
        "tags": [
          "analysis"
        ],
        "x-api-credits-cost": "50",
        "x-api-credits-type": "request",
        "x-badge": "New",
        "x-group": "Regulatory",
        "x-order": "20",
        "x-starting-plan": "Ultra",
        "x-url-hash": "edgar-filings-archive"
      }
    },
    "/ema": {
      "get": {
        "description": "The Exponential Moving Average (EMA) is a weighted moving average that gives more importance to recent price data, making it more responsive to new information and helping traders identify trends and potential entry or exit points.",
        "operationId": "GetTimeSeriesEma",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesEma_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "EMA",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "250"
      }
    },
    "/eod": {
      "get": {
        "description": "This endpoint returns the latest End of Day (EOD) price of an instrument.",
        "operationId": "GetEod",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG000BHTMY7"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "30"
            },
            "x-go-name": "Exchange",
            "x-order": "30",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "40"
            },
            "x-go-name": "MicCode",
            "x-order": "40",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "50"
            },
            "x-go-name": "Country",
            "x-order": "50",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "60"
            },
            "x-go-name": "Type",
            "x-order": "60",
            "example": "ETF"
          },
          {
            "description": "If not null, then return data from a specific date",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "70"
            },
            "x-go-name": "Date",
            "x-order": "70",
            "example": "2006-01-02"
          },
          {
            "description": "Parameter is optional. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "80"
            },
            "x-go-name": "Prepost",
            "x-order": "80"
          },
          {
            "description": "Specifies the number of decimal places for floating values\nShould be in range [0,11] inclusive",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "90"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "90"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEod_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "End of day price",
        "tags": [
          "market_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Core data",
        "x-order": "70"
      }
    },
    "/eps_revisions": {
      "get": {
        "description": "This API endpoint returns analysts’ revisions of a company's future quarterly and annual earnings per share (EPS) over the last week and month.",
        "operationId": "GetEpsRevisions",
        "parameters": [
          {
            "description": "Filter by symbol",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Filter by exchange name",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "50"
            },
            "x-go-name": "Exchange",
            "x-order": "50",
            "example": "NASDAQ"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEpsRevisions_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "EPS revisions",
        "tags": [
          "analysis"
        ],
        "x-api-credits-cost": "20",
        "x-api-credits-type": "symbol",
        "x-group": "Analysis",
        "x-order": "40",
        "x-starting-plan": "Ultra",
        "x-url-hash": "eps_revisions"
      }
    },
    "/eps_trend": {
      "get": {
        "description": "This API endpoint returns a breakdown of the estimated historical EPS changes at a given period.",
        "operationId": "GetEpsTrend",
        "parameters": [
          {
            "description": "Filter by symbol",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Filter by exchange name",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "50"
            },
            "x-go-name": "Exchange",
            "x-order": "50",
            "example": "NASDAQ"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEpsTrend_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "EPS trend",
        "tags": [
          "analysis"
        ],
        "x-api-credits-cost": "20",
        "x-api-credits-type": "symbol",
        "x-group": "Analysis",
        "x-order": "30",
        "x-starting-plan": "Ultra",
        "x-url-hash": "eps_trend"
      }
    },
    "/etfs": {
      "get": {
        "description": "This API call returns an array of ETFs available at Twelve Data API. This list is updated daily.",
        "operationId": "GetEtf",
        "parameters": [
          {
            "description": "The ticker symbol of an instrument for which data is requested",
            "in": "query",
            "name": "symbol",
            "schema": {
              "type": "string",
              "x-go-name": "Symbol"
            },
            "x-go-name": "Symbol",
            "example": "SPY"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi"
            },
            "x-go-name": "Figi",
            "example": "BBG000BDTF76"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin"
            },
            "x-go-name": "Isin",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip"
            },
            "x-go-name": "Cusip",
            "example": "594918104"
          },
          {
            "description": "Filter by exchange name",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange"
            },
            "x-go-name": "Exchange",
            "example": "NYSE"
          },
          {
            "description": "Filter by market identifier code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode"
            },
            "x-go-name": "MicCode",
            "example": "XNYS"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country"
            },
            "x-go-name": "Country",
            "example": "United States"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format"
            },
            "x-go-name": "Format"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter"
            },
            "x-go-name": "Delimiter"
          },
          {
            "description": "Adds info on which plan symbol is available",
            "in": "query",
            "name": "show_plan",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "ShowPlan"
            },
            "x-go-name": "ShowPlan"
          },
          {
            "description": "Include delisted identifiers",
            "in": "query",
            "name": "include_delisted",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeDelisted"
            },
            "x-go-name": "IncludeDelisted"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEtf_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "ETFs list",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Reference data",
        "x-order": "60",
        "x-url-hash": "etf-list"
      }
    },
    "/etfs/family": {
      "get": {
        "description": "This API request returns a list of exchange traded funds families.",
        "operationId": "GetETFsFamily",
        "parameters": [
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "10"
            },
            "x-go-name": "Country",
            "x-order": "10",
            "example": "United States"
          },
          {
            "description": "Filter by investment company that manages the fund",
            "in": "query",
            "name": "fund_family",
            "schema": {
              "type": "string",
              "x-go-name": "FundFamily",
              "x-order": "20"
            },
            "x-go-name": "FundFamily",
            "x-order": "20",
            "example": "iShares"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetETFsFamily_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "ETFs family list",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "ETFs",
        "x-order": "20",
        "x-url-hash": "etf-family-list"
      }
    },
    "/etfs/list": {
      "get": {
        "description": "This API request returns a list of exchange traded funds available at Twelve Data. Sorting is in descending order by total assets value. The list is updated daily.",
        "operationId": "GetETFsList",
        "parameters": [
          {
            "description": "Filter by symbol",
            "in": "query",
            "name": "symbol",
            "schema": {
              "type": "string",
              "x-go-name": "Symbol"
            },
            "x-go-name": "Symbol",
            "example": "IVV"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi"
            },
            "x-go-name": "Figi",
            "example": "BBG000BVZ697"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin"
            },
            "x-go-name": "Isin",
            "example": "US4642872000"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip"
            },
            "x-go-name": "Cusip",
            "example": "464287200"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country"
            },
            "x-go-name": "Country",
            "example": "United States"
          },
          {
            "description": "Filter by investment company that manages the fund",
            "in": "query",
            "name": "fund_family",
            "schema": {
              "type": "string",
              "x-go-name": "FundFamily"
            },
            "x-go-name": "FundFamily",
            "example": "iShares"
          },
          {
            "description": "Filter by the type of fund",
            "in": "query",
            "name": "fund_type",
            "schema": {
              "type": "string",
              "x-go-name": "FundType"
            },
            "x-go-name": "FundType",
            "example": "Large Blend"
          },
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Page"
            },
            "x-go-name": "Page"
          },
          {
            "description": "Number of records in response",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 50,
              "format": "int64",
              "type": "integer",
              "x-go-name": "OutputSize"
            },
            "x-go-name": "OutputSize"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetETFsList_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "ETFs list",
        "tags": [
          "reference_data"
        ],
        "x-additional-notes": "With Basic, Grow, and Pro plans, only 50 records will be in response. Ultra, Enterprise and Custom plans can access complete data on over 46,000 ETFs.",
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-badge": "Useful",
        "x-group": "ETFs",
        "x-order": "10"
      }
    },
    "/etfs/type": {
      "get": {
        "description": "This API request returns a list of exchange traded funds types.",
        "operationId": "GetETFsType",
        "parameters": [
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "10"
            },
            "x-go-name": "Country",
            "x-order": "10",
            "example": "United States"
          },
          {
            "description": "Filter by the type of fund",
            "in": "query",
            "name": "fund_type",
            "schema": {
              "type": "string",
              "x-go-name": "FundType",
              "x-order": "20"
            },
            "x-go-name": "FundType",
            "x-order": "20",
            "example": "Large Blend"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetETFsType_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "ETFs type list",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "ETFs",
        "x-order": "30",
        "x-url-hash": "etf-type-list"
      }
    },
    "/etfs/world": {
      "get": {
        "description": "This API request returns a complete breakdown of a etf, including summary, performance, risk and composition.",
        "operationId": "GetETFsWorld",
        "parameters": [
          {
            "description": "Symbol ticker of etf",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "IVV"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG000BVZ697"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US4642872000"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "464287200"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Number of decimal places for floating values. Accepts value in range [0,11]",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Dp",
              "x-order": "50"
            },
            "x-go-name": "Dp",
            "x-order": "50"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetETFsWorld_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "All data",
        "tags": [
          "etfs"
        ],
        "x-api-credits-cost": "800",
        "x-api-credits-type": "request",
        "x-badge": "High demand",
        "x-group": "ETFs",
        "x-order": "40",
        "x-starting-plan": "Ultra",
        "x-url-hash": "etf-all-data"
      }
    },
    "/etfs/world/composition": {
      "get": {
        "description": "This API request returns portfolio composition of a etf, including sectors, holding details, weighted exposure, and others.",
        "operationId": "GetETFsWorldComposition",
        "parameters": [
          {
            "description": "Symbol ticker of etf",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "IVV"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG000BVZ697"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US4642872000"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "464287200"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Number of decimal places for floating values. Accepts value in range [0,11]",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Dp",
              "x-order": "50"
            },
            "x-go-name": "Dp",
            "x-order": "50"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetETFsWorldComposition_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Composition",
        "tags": [
          "etfs"
        ],
        "x-api-credits-cost": "200",
        "x-api-credits-type": "request",
        "x-badge": "High demand",
        "x-group": "ETFs",
        "x-order": "80",
        "x-starting-plan": "Ultra",
        "x-url-hash": "etf-composition"
      }
    },
    "/etfs/world/performance": {
      "get": {
        "description": "This API request returns detailed performance of a etf, including trailing and annual returns.",
        "operationId": "GetETFsWorldPerformance",
        "parameters": [
          {
            "description": "Symbol ticker of etf",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "IVV"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG000BVZ697"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US4642872000"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "464287200"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Number of decimal places for floating values. Accepts value in range [0,11]",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Dp",
              "x-order": "50"
            },
            "x-go-name": "Dp",
            "x-order": "50"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetETFsWorldPerformance_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Performance",
        "tags": [
          "etfs"
        ],
        "x-api-credits-cost": "200",
        "x-api-credits-type": "request",
        "x-badge": "High demand",
        "x-group": "ETFs",
        "x-order": "60",
        "x-starting-plan": "Ultra",
        "x-url-hash": "etf-performance"
      }
    },
    "/etfs/world/risk": {
      "get": {
        "description": "This API request returns core metrics to measure the risk of investing in a etf.",
        "operationId": "GetETFsWorldRisk",
        "parameters": [
          {
            "description": "Symbol ticker of etf",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "IVV"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG000BVZ697"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US4642872000"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "464287200"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Number of decimal places for floating values. Accepts value in range [0,11]",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Dp",
              "x-order": "50"
            },
            "x-go-name": "Dp",
            "x-order": "50"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetETFsWorldRisk_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Risk",
        "tags": [
          "etfs"
        ],
        "x-api-credits-cost": "200",
        "x-api-credits-type": "request",
        "x-group": "ETFs",
        "x-order": "70",
        "x-starting-plan": "Ultra",
        "x-url-hash": "etf-risk"
      }
    },
    "/etfs/world/summary": {
      "get": {
        "description": "This API request returns a brief summary of a etf.",
        "operationId": "GetETFsWorldSummary",
        "parameters": [
          {
            "description": "Symbol ticker of etf",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "IVV"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG000BVZ697"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US4642872000"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "464287200"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Number of decimal places for floating values. Accepts value in range [0,11]",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Dp",
              "x-order": "50"
            },
            "x-go-name": "Dp",
            "x-order": "50"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetETFsWorldSummary_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Summary",
        "tags": [
          "etfs"
        ],
        "x-api-credits-cost": "200",
        "x-api-credits-type": "request",
        "x-group": "ETFs",
        "x-order": "50",
        "x-starting-plan": "Ultra",
        "x-url-hash": "etf-summary"
      }
    },
    "/exchange_rate": {
      "get": {
        "description": "This API call returns real-time exchange rate for currency pair. Works with forex and cryptocurrency.",
        "operationId": "GetExchangeRate",
        "parameters": [
          {
            "description": "The currency pair you want to request can be either forex or cryptocurrency. Slash(/) delimiter is used. E.g. `EUR/USD` or `BTC/ETH` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "EUR/USD"
          },
          {
            "description": "If not null, will use exchange rate from a specific date or time. Format `2006-01-02` or `2006-01-02 15:04:05`. Is set in the local exchange time zone, use timezone parameter to specify a specific time zone",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "20"
            },
            "x-go-name": "Date",
            "x-order": "20",
            "example": "2006-01-02 15:04:05"
          },
          {
            "description": "Value can be `JSON` or `CSV`. Default `JSON`",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "30"
            },
            "x-go-name": "Format",
            "x-order": "30"
          },
          {
            "description": "Specify the delimiter used when downloading the `CSV` file. Default semicolon `;`",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "40"
            },
            "x-go-name": "Delimiter",
            "x-order": "40"
          },
          {
            "description": "The number of decimal places for the data",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "50"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "50"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a>.</li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "60"
            },
            "x-go-name": "Timezone",
            "x-order": "60",
            "example": "UTC"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExchangeRate_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Exchange rate",
        "tags": [
          "market_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Core data",
        "x-order": "30"
      }
    },
    "/exchange_schedule": {
      "get": {
        "description": "This API call return exchanges details and trading hours.",
        "operationId": "GetExchangeSchedule",
        "parameters": [
          {
            "description": "Filter by exchange name",
            "in": "query",
            "name": "mic_name",
            "schema": {
              "type": "string",
              "x-go-name": "MicName",
              "x-order": "20"
            },
            "x-go-name": "MicName",
            "x-order": "20",
            "example": "NASDAQ"
          },
          {
            "description": "Filter by market identifier code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "30"
            },
            "x-go-name": "MicCode",
            "x-order": "30",
            "example": "XNGS"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "<p>\nIf a date is provided, the API returns the schedule for the specified date; otherwise, it returns the default (common) schedule.\n</p>\nThe date can be specified in one of the following formats:\n<ul>\n<li>An exact date (e.g., <code>2021-10-27</code>)</li>\n<li>A human-readable keyword: <code>today</code> or <code>yesterday</code></li>\n<li>A full datetime string in UTC (e.g., <code>2025-04-11 20:00:00</code>) to retrieve the schedule corresponding to the day in the specified time.</li>\n</ul>\nWhen using a datetime value, the resulting schedule will correspond to the local calendar day at the specified time.\nFor example, <code>2025-04-11 20:00:00 UTC</code> corresponds to:\n<ul>\n<li><code>2025-04-11</code> in the <code>America/New_York</code> timezone</li>\n<li><code>2025-04-12</code> in the <code>Australia/Sydney</code> timezone</li>\n</ul>",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "10"
            },
            "x-go-name": "Date",
            "x-order": "10",
            "example": "2021-10-27"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExchangeSchedule_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Exchange schedule",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "100",
        "x-api-credits-type": "request",
        "x-group": "Reference data",
        "x-order": "100",
        "x-starting-plan": "Ultra",
        "x-url-hash": "exchange_schedule"
      }
    },
    "/exchanges": {
      "get": {
        "description": "This API call returns an array of stock or ETF exchanges available at Twelve Data API. This list is updated daily.",
        "operationId": "GetExchanges",
        "parameters": [
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "10"
            },
            "x-go-name": "Type",
            "x-order": "10",
            "example": "ETF"
          },
          {
            "description": "Filter by exchange name",
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "x-go-name": "Name",
              "x-order": "20"
            },
            "x-go-name": "Name",
            "x-order": "20",
            "example": "NASDAQ"
          },
          {
            "description": "Filter by market identifier code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string",
              "x-go-name": "Code",
              "x-order": "30"
            },
            "x-go-name": "Code",
            "x-order": "30",
            "example": "XNGS"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "50"
            },
            "x-go-name": "Format",
            "x-order": "50"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "60"
            },
            "x-go-name": "Delimiter",
            "x-order": "60"
          },
          {
            "description": "Adds info on which plan symbol is available",
            "in": "query",
            "name": "show_plan",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "ShowPlan",
              "x-order": "70"
            },
            "x-go-name": "ShowPlan",
            "x-order": "70"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetExchanges_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Exchanges",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-badge": "High demand",
        "x-group": "Reference data",
        "x-order": "90"
      }
    },
    "/exp": {
      "get": {
        "description": "The Exponential (EXP) indicator calculates the exponential value of a given input, often used in advanced mathematical analysis or calculations in financial markets.",
        "operationId": "GetTimeSeriesExp",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesExp_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "EXP",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "260"
      }
    },
    "/floor": {
      "get": {
        "description": "The Floor (FLOOR) indicator rounds input data down to the nearest integer, often used in conjunction with other indicators for data analysis or calculation purposes.",
        "operationId": "GetTimeSeriesFloor",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesFloor_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "FLOOR",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "270"
      }
    },
    "/forex_pairs": {
      "get": {
        "description": "This API call returns an array of forex pairs available at Twelve Data API. This list is updated daily.",
        "operationId": "GetForexPairs",
        "parameters": [
          {
            "description": "The ticker symbol of an instrument for which data is requested",
            "in": "query",
            "name": "symbol",
            "schema": {
              "type": "string",
              "x-go-name": "Symbol"
            },
            "x-go-name": "Symbol",
            "example": "EUR/USD"
          },
          {
            "description": "Filter by currency base",
            "in": "query",
            "name": "currency_base",
            "schema": {
              "type": "string",
              "x-go-name": "CurrencyBase"
            },
            "x-go-name": "CurrencyBase",
            "example": "EUR"
          },
          {
            "description": "Filter by currency quote",
            "in": "query",
            "name": "currency_quote",
            "schema": {
              "type": "string",
              "x-go-name": "CurrencyQuote"
            },
            "x-go-name": "CurrencyQuote",
            "example": "USD"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format"
            },
            "x-go-name": "Format"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter"
            },
            "x-go-name": "Delimiter"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetForexPairs_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Forex pairs list",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Reference data",
        "x-order": "20"
      }
    },
    "/fund_holders": {
      "get": {
        "description": "Returns the amount of the company’s available stock owned by mutual fund holders.",
        "operationId": "GetFundHolders",
        "parameters": [
          {
            "description": "Symbol ticker of instrument.\nFor preffered stocks use dot(.) delimiter.\nE.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFundHolders_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Fund holders",
        "tags": [
          "regulatory"
        ],
        "x-api-credits-cost": "1500",
        "x-api-credits-type": "symbol",
        "x-group": "Regulatory",
        "x-order": "50",
        "x-starting-plan": "Ultra",
        "x-url-hash": "fund-holders"
      }
    },
    "/funds": {
      "get": {
        "description": "This API call returns an array of funds available at Twelve Data API. This list is updated daily.",
        "operationId": "GetFunds",
        "parameters": [
          {
            "description": "The ticker symbol of an instrument for which data is requested",
            "in": "query",
            "name": "symbol",
            "schema": {
              "type": "string",
              "x-go-name": "Symbol"
            },
            "x-go-name": "Symbol",
            "example": "FXAIX"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi"
            },
            "x-go-name": "Figi",
            "example": "BBG000BHTMY7"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin"
            },
            "x-go-name": "Isin",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip"
            },
            "x-go-name": "Cusip",
            "example": "594918104"
          },
          {
            "description": "Filter by exchange name",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange"
            },
            "x-go-name": "Exchange",
            "example": "Nasdaq"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country"
            },
            "x-go-name": "Country",
            "example": "United States"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format"
            },
            "x-go-name": "Format"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter"
            },
            "x-go-name": "Delimiter"
          },
          {
            "description": "Adds info on which plan symbol is available",
            "in": "query",
            "name": "show_plan",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "ShowPlan"
            },
            "x-go-name": "ShowPlan"
          },
          {
            "description": "Page number of the results to fetch",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Page"
            },
            "x-go-name": "Page"
          },
          {
            "description": "Determines the number of data points returned in the output",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 5000,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize"
            },
            "x-go-name": "PageSize"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFunds_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Funds list",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Reference data",
        "x-order": "40"
      }
    },
    "/growth_estimates": {
      "get": {
        "description": "This API endpoint returns consensus analyst estimates over the company's growth rates for various periods. Calculation averages projections of numerous analysts, taking arbitrary parameters, such as earnings per share, revenue, etc.",
        "operationId": "GetGrowthEstimates",
        "parameters": [
          {
            "description": "Filter by symbol",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "40"
            },
            "x-go-name": "Cusip",
            "x-order": "40",
            "example": "594918104"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "50"
            },
            "x-go-name": "Country",
            "x-order": "50",
            "example": "United States"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "60"
            },
            "x-go-name": "Exchange",
            "x-order": "60",
            "example": "NASDAQ"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGrowthEstimates_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Growth estimates",
        "tags": [
          "analysis"
        ],
        "x-api-credits-cost": "20",
        "x-api-credits-type": "symbol",
        "x-group": "Analysis",
        "x-order": "50",
        "x-starting-plan": "Ultra",
        "x-url-hash": "growth_estimates"
      }
    },
    "/heikinashicandles": {
      "get": {
        "description": "Heikin Ashi Candles are a modified form of Japanese candlestick charts, using averaged price data to smooth out noise and better highlight trends and potential trend reversals.",
        "operationId": "GetTimeSeriesHeikinashiCandles",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesHeikinashiCandles_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "HEIKINASHICANDLES",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "280"
      }
    },
    "/hlc3": {
      "get": {
        "description": "The High, Low, Close Average (HLC3) indicator calculates the average of a security's high, low, and close prices, providing a simplified view of price action.",
        "operationId": "GetTimeSeriesHlc3",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesHlc3_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "HLC3",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "290"
      }
    },
    "/ht_dcperiod": {
      "get": {
        "description": "The Hilbert Transform Dominant Cycle Period (HT_DCPERIOD) identifies the dominant market cycle length, helping traders adapt their strategies to different market conditions.\n\nYou can read more about it in the Rocket Science for Traders book by John F. Ehlers.",
        "operationId": "GetTimeSeriesHtDcPeriod",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesHtDcPeriod_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "HT_DCPERIOD",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Cycle Indicators",
        "x-order": "300"
      }
    },
    "/ht_dcphase": {
      "get": {
        "description": "The Hilbert Transform Dominant Cycle Phase (HT_DCPHASE) measures the current phase of the dominant market cycle, helping traders identify potential entry and exit points in relation to the cycle.\n\nYou can read more about it in the Rocket Science for Traders book by John F. Ehlers.",
        "operationId": "GetTimeSeriesHtDcPhase",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesHtDcPhase_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "HT_DCPHASE",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Cycle Indicators",
        "x-order": "305"
      }
    },
    "/ht_phasor": {
      "get": {
        "description": "The Hilbert Transform Phasor Components (HT_PHASOR) decomposes a price series into in-phase and quadrature components, providing insight into cyclical patterns and trend direction.\n\nYou can read more about it in the Rocket Science for Traders book by John F. Ehlers.",
        "operationId": "GetTimeSeriesHtPhasor",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesHtPhasor_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "HT_PHASOR",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Cycle Indicators",
        "x-order": "310"
      }
    },
    "/ht_sine": {
      "get": {
        "description": "The Hilbert Transform Sine Wave (HT_SINE) indicator calculates sine and cosine wave components based on the dominant market cycle, helping traders identify potential turning points and trend direction.\n\nYou can read more about it in the Rocket Science for Traders book by John F. Ehlers.",
        "operationId": "GetTimeSeriesHtSine",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesHtSine_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "HT_SINE",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Cycle Indicators",
        "x-order": "320"
      }
    },
    "/ht_trendline": {
      "get": {
        "description": "The Hilbert Transform Instantaneous Trendline (HT_TRENDLINE) is a smoothed moving average that follows the dominant market cycle, helping traders identify trends and potential entry or exit points.\n\nYou can read more about it in the Rocket Science for Traders book by John F. Ehlers.",
        "operationId": "GetTimeSeriesHtTrendline",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesHtTrendline_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "HT_TRENDLINE",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "330"
      }
    },
    "/ht_trendmode": {
      "get": {
        "description": "The Hilbert Transform Trend vs Cycle Mode (HT_TRENDMODE) distinguishes between trending and cyclical market phases, helping traders adapt their strategies accordingly.\n\nYou can read more about it in the Rocket Science for Traders book by John F. Ehlers.",
        "operationId": "GetTimeSeriesHtTrendMode",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesHtTrendMode_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "HT_TRENDMODE",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Cycle Indicators",
        "x-order": "340"
      }
    },
    "/ichimoku": {
      "get": {
        "description": "The Ichimoku Cloud (ICHIMOKU) is a comprehensive trend-following indicator that combines multiple moving averages and support/resistance levels to help traders identify potential entry and exit points, trend direction, and momentum.",
        "operationId": "GetTimeSeriesIchimoku",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "The time period used for generating the conversation line. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "conversion_line_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "ConversionLinePeriod",
              "x-order": "61"
            },
            "x-go-name": "ConversionLinePeriod",
            "x-order": "61"
          },
          {
            "description": "The time period used for generating the base line. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "base_line_period",
            "schema": {
              "default": 26,
              "format": "int64",
              "type": "integer",
              "x-go-name": "BaseLinePeriod",
              "x-order": "62"
            },
            "x-go-name": "BaseLinePeriod",
            "x-order": "62"
          },
          {
            "description": "The time period used for generating the leading span B line. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "leading_span_b_period",
            "schema": {
              "default": 52,
              "format": "int64",
              "type": "integer",
              "x-go-name": "LeadingSpanBPeriod",
              "x-order": "63"
            },
            "x-go-name": "LeadingSpanBPeriod",
            "x-order": "63"
          },
          {
            "description": "The time period used for generating the lagging span line. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "lagging_span_period",
            "schema": {
              "default": 26,
              "format": "int64",
              "type": "integer",
              "x-go-name": "LaggingSpanPeriod",
              "x-order": "64"
            },
            "x-go-name": "LaggingSpanPeriod",
            "x-order": "64"
          },
          {
            "description": "Indicates whether to include ahead span period",
            "in": "query",
            "name": "include_ahead_span_period",
            "schema": {
              "default": true,
              "type": "boolean",
              "x-go-name": "IncludeAheadSpanPeriod",
              "x-order": "65"
            },
            "x-go-name": "IncludeAheadSpanPeriod",
            "x-order": "65"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesIchimoku_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "ICHIMOKU",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "350"
      }
    },
    "/income_statement": {
      "get": {
        "description": "Returns complete income statement of a company and shows the company’s revenues and expenses during a period (annual or quarter).",
        "operationId": "GetIncomeStatement",
        "parameters": [
          {
            "description": "Symbol ticker of instrument.\nFor preffered stocks use dot(.) delimiter.\nE.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The reporting period for the income statement data",
            "in": "query",
            "name": "period",
            "schema": {
              "enum": [
                "annual",
                "quarterly"
              ],
              "type": "string",
              "x-go-name": "Period",
              "x-order": "70"
            },
            "x-go-name": "Period",
            "x-order": "70",
            "example": "annual"
          },
          {
            "description": "Begin date for filtering income statements by fiscal date.\nReturns income statements with fiscal dates on or after this date.\nFormat `2006-01-02`",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "80"
            },
            "x-go-name": "StartDate",
            "x-order": "80",
            "example": "2024-01-01"
          },
          {
            "description": "End date for filtering income statements by fiscal date.\nReturns income statements with fiscal dates on or before this date.\nFormat `2006-01-02`",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "90"
            },
            "x-go-name": "EndDate",
            "x-order": "90",
            "example": "2024-12-31"
          },
          {
            "description": "Number of records in response",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 6,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "100"
            },
            "x-go-name": "PageSize",
            "x-order": "100"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIncomeStatement_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Income statement",
        "tags": [
          "fundamentals"
        ],
        "x-additional-notes": "This API endpoint is available starting with the Pro plan. Full access to historical data is available only in the Enterprise plan.",
        "x-api-credits-cost": "100",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Fundamentals",
        "x-order": "110",
        "x-url-hash": "income_statement"
      }
    },
    "/income_statement/consolidated": {
      "get": {
        "description": "Returns consolidated income statement of a company and expenses during a period (annual or quarter).",
        "operationId": "GetIncomeStatementConsolidated",
        "parameters": [
          {
            "description": "Symbol ticker of instrument.\nFor preffered stocks use dot(.) delimiter.\nE.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The reporting period for the income statement data",
            "in": "query",
            "name": "period",
            "schema": {
              "enum": [
                "annual",
                "quarterly"
              ],
              "type": "string",
              "x-go-name": "Period",
              "x-order": "70"
            },
            "x-go-name": "Period",
            "x-order": "70"
          },
          {
            "description": "Begin date for filtering income statements by fiscal date.\nReturns income statements with fiscal dates on or after this date.\nFormat `2006-01-02`",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "80"
            },
            "x-go-name": "StartDate",
            "x-order": "80",
            "example": "2024-01-01"
          },
          {
            "description": "End date for filtering income statements by fiscal date.\nReturns income statements with fiscal dates on or before this date.\nFormat `2006-01-02`",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "90"
            },
            "x-go-name": "EndDate",
            "x-order": "90",
            "example": "2024-12-31"
          },
          {
            "description": "Number of records in response",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 6,
              "format": "int64",
              "type": "integer",
              "x-go-name": "OutputSize",
              "x-order": "100"
            },
            "x-go-name": "OutputSize",
            "x-order": "100"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIncomeStatementConsolidated_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Income statement consolidated",
        "tags": [
          "fundamentals"
        ],
        "x-additional-notes": "This API endpoint is available starting with the Ultra plan. Full access to historical data is available only in the Enterprise plan.",
        "x-api-credits-cost": "100",
        "x-api-credits-type": "symbol",
        "x-group": "Fundamentals",
        "x-order": "120",
        "x-url-hash": "income_statement_consolidated"
      }
    },
    "/insider_transactions": {
      "get": {
        "description": "Returns trading information performed by insiders.",
        "operationId": "GetInsiderTransactions",
        "parameters": [
          {
            "description": "The ticker symbol of an instrument for which data is requested, e.g., `AAPL`, `TSLA`.\nFor preffered stocks use dot(.) delimiter.\nE.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded, e.g., `Nasdaq`, `NSE`",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., United States or US.",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInsiderTransactions_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Insider transactions",
        "tags": [
          "regulatory"
        ],
        "x-api-credits-cost": "200",
        "x-api-credits-type": "symbol",
        "x-group": "Regulatory",
        "x-order": "30",
        "x-starting-plan": "Pro",
        "x-url-hash": "insider-transactions"
      }
    },
    "/institutional_holders": {
      "get": {
        "description": "Returns the amount of the company’s available stock owned by institutions (pension funds, insurance companies, investment firms, private foundations, endowments, or other large entities that manage funds on behalf of others).",
        "operationId": "GetInstitutionalHolders",
        "parameters": [
          {
            "description": "Symbol ticker of instrument.\nFor preffered stocks use dot(.) delimiter.\nE.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstitutionalHolders_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Institutional holders",
        "tags": [
          "regulatory"
        ],
        "x-api-credits-cost": "1500",
        "x-api-credits-type": "symbol",
        "x-group": "Regulatory",
        "x-order": "40",
        "x-starting-plan": "Ultra",
        "x-url-hash": "institutional-holders"
      }
    },
    "/instrument_type": {
      "get": {
        "description": "This API call returns a list of instrument types available at Twelve Data API.",
        "operationId": "GetInstrumentType",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstrumentType_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Instrument type",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Reference data",
        "x-order": "130",
        "x-url-hash": "instrument_type"
      }
    },
    "/intervals": {
      "get": {
        "description": "Returns a list of available time intervals for data requests.",
        "operationId": "GetIntervals",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIntervals_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Intervals List",
        "tags": [
          "reference_data"
        ]
      }
    },
    "/ipo_calendar": {
      "get": {
        "description": "This endpoint returns past, today, or upcoming IPOs.",
        "operationId": "GetIpoCalendar",
        "parameters": [
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "10"
            },
            "x-go-name": "Exchange",
            "x-order": "10",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "20"
            },
            "x-go-name": "MicCode",
            "x-order": "20",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "30"
            },
            "x-go-name": "Country",
            "x-order": "30",
            "example": "United States"
          },
          {
            "description": "The earliest IPO date to include in the results. Format: `2006-01-02`",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "40"
            },
            "x-go-name": "StartDate",
            "x-order": "40",
            "example": "2021-01-01"
          },
          {
            "description": "The latest IPO date to include in the results. Format: `2006-01-02`",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "50"
            },
            "x-go-name": "EndDate",
            "x-order": "50",
            "example": "2021-12-31"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIpoCalendar_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "IPO calendar",
        "tags": [
          "fundamentals"
        ],
        "x-api-credits-cost": "40",
        "x-api-credits-type": "request",
        "x-group": "Fundamentals",
        "x-order": "90",
        "x-starting-plan": "Grow"
      }
    },
    "/kama": {
      "get": {
        "description": "The Kaufman Adaptive Moving Average (KAMA) is a moving average that adjusts its length based on market volatility, providing a balance between responsiveness and noise reduction.",
        "operationId": "GetTimeSeriesKama",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesKama_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "KAMA",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "360"
      }
    },
    "/keltner": {
      "get": {
        "description": "The Keltner Channel (KELTNER) is a volatility-based indicator that uses a combination of EMA and the ATR to create a channel around a security's price. The channel helps traders identify potential overbought or oversold conditions, as well as trend direction and potential price breakouts.",
        "operationId": "GetTimeSeriesKeltner",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 20,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "61"
            },
            "x-go-name": "TimePeriod",
            "x-order": "61"
          },
          {
            "description": "The time period used for calculating the Average True Range. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "atr_time_period",
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer",
              "x-go-name": "ATRTimePeriod",
              "x-order": "62"
            },
            "x-go-name": "ATRTimePeriod",
            "x-order": "62"
          },
          {
            "description": "The factor used to adjust the indicator's sensitivity",
            "in": "query",
            "name": "multiplier",
            "schema": {
              "default": 2,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Multiplier",
              "x-order": "63"
            },
            "x-go-name": "Multiplier",
            "x-order": "63"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "64"
            },
            "x-go-name": "SeriesType",
            "x-order": "64"
          },
          {
            "description": "The type of moving average used",
            "in": "query",
            "name": "ma_type",
            "schema": {
              "default": "SMA",
              "enum": [
                "SMA",
                "EMA",
                "WMA",
                "DEMA",
                "TEMA",
                "TRIMA",
                "KAMA",
                "MAMA",
                "T3MA"
              ],
              "type": "string",
              "x-go-name": "MAType",
              "x-order": "65"
            },
            "x-go-name": "MAType",
            "x-order": "65"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesKeltner_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "KELTNER",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "370"
      }
    },
    "/key_executives": {
      "get": {
        "description": "Returns key executive information for a specified symbol.",
        "operationId": "GetKeyExecutives",
        "parameters": [
          {
            "description": "Symbol ticker of instrument.\nFor preffered stocks use dot(.) delimiter.\nE.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetKeyExecutives_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Key executives",
        "tags": [
          "fundamentals"
        ],
        "x-api-credits-cost": "1000",
        "x-api-credits-type": "symbol",
        "x-badge": "Useful",
        "x-group": "Fundamentals",
        "x-order": "170",
        "x-starting-plan": "Ultra",
        "x-url-hash": "key_executives"
      }
    },
    "/kst": {
      "get": {
        "description": "The Know Sure Thing (KST) is a momentum oscillator that combines four different smoothed rates of change to generate a single trend-following indicator. By measuring the price momentum across multiple timeframes, KST helps traders identify potential trend reversals, overbought, or oversold conditions, and trading opportunities.",
        "operationId": "GetTimeSeriesKst",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "The time period for the first Rate of Change calculation.",
            "in": "query",
            "name": "roc_period_1",
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer",
              "x-go-name": "RocPeriod1",
              "x-order": "61"
            },
            "x-go-name": "RocPeriod1",
            "x-order": "61"
          },
          {
            "description": "The time period for the second Rate of Change calculation.",
            "in": "query",
            "name": "roc_period_2",
            "schema": {
              "default": 15,
              "format": "int64",
              "type": "integer",
              "x-go-name": "RocPeriod2",
              "x-order": "61"
            },
            "x-go-name": "RocPeriod2",
            "x-order": "61"
          },
          {
            "description": "The time period for the third Rate of Change calculation.",
            "in": "query",
            "name": "roc_period_3",
            "schema": {
              "default": 20,
              "format": "int64",
              "type": "integer",
              "x-go-name": "RocPeriod3",
              "x-order": "61"
            },
            "x-go-name": "RocPeriod3",
            "x-order": "61"
          },
          {
            "description": "The time period for the forth Rate of Change calculation.",
            "in": "query",
            "name": "roc_period_4",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "RocPeriod4",
              "x-order": "61"
            },
            "x-go-name": "RocPeriod4",
            "x-order": "61"
          },
          {
            "description": "The time period for the first Simple Moving Average.",
            "in": "query",
            "name": "sma_period_1",
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SmaPeriod1",
              "x-order": "62"
            },
            "x-go-name": "SmaPeriod1",
            "x-order": "62"
          },
          {
            "description": "The time period for the second Simple Moving Average.",
            "in": "query",
            "name": "sma_period_2",
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SmaPeriod2",
              "x-order": "62"
            },
            "x-go-name": "SmaPeriod2",
            "x-order": "62"
          },
          {
            "description": "The time period for the third Simple Moving Average.",
            "in": "query",
            "name": "sma_period_3",
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SmaPeriod3",
              "x-order": "62"
            },
            "x-go-name": "SmaPeriod3",
            "x-order": "62"
          },
          {
            "description": "The time period for the forth Simple Moving Average.",
            "in": "query",
            "name": "sma_period_4",
            "schema": {
              "default": 15,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SmaPeriod4",
              "x-order": "62"
            },
            "x-go-name": "SmaPeriod4",
            "x-order": "62"
          },
          {
            "description": "The time period used for generating the signal line.",
            "in": "query",
            "name": "signal_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SignalPeriod",
              "x-order": "63"
            },
            "x-go-name": "SignalPeriod",
            "x-order": "63"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesKst_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "KST",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "380"
      }
    },
    "/last_change/{endpoint}": {
      "get": {
        "description": "Returns the latest changes of fundamental data. This endpoint helps consume API credits more efficiently and request new data once it is updated.",
        "operationId": "GetLastChanges",
        "parameters": [
          {
            "description": "Endpoint name",
            "in": "path",
            "name": "endpoint",
            "required": true,
            "schema": {
              "enum": [
                "price_target",
                "recommendations",
                "statistics",
                "insider_transactions",
                "profile",
                "mutual_funds_world_summary",
                "mutual_funds_world",
                "institutional_holders",
                "analyst_rating",
                "income_statement",
                "income_statement_quarterly",
                "cash_flow",
                "cash_flow_quarterly",
                "balance_sheet",
                "balance_sheet_quarterly",
                "mutual_funds_list",
                "mutual_funds_world_sustainability",
                "mutual_funds_world_summary",
                "mutual_funds_world_risk",
                "mutual_funds_world_purchase_info",
                "mutual_funds_world_composition",
                "mutual_funds_world_performance",
                "mutual_funds_world",
                "etfs_list",
                "etfs_world",
                "etfs_world_summary",
                "etfs_world_performance",
                "etfs_world_risk",
                "etfs_world_composition"
              ],
              "type": "string",
              "x-go-name": "Endpoint",
              "x-order": "10"
            },
            "x-go-name": "Endpoint",
            "x-order": "10",
            "example": "statistics"
          },
          {
            "description": "The starting date and time for data selection, in `2006-01-02 15:04:05` format",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "20"
            },
            "x-go-name": "StartDate",
            "x-order": "20",
            "example": "2023-10-14 00:00:00"
          },
          {
            "description": "Filter by symbol",
            "in": "query",
            "name": "symbol",
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "30"
            },
            "x-go-name": "Symbol",
            "x-order": "30",
            "example": "AAPL"
          },
          {
            "description": "Filter by exchange name",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Filter by market identifier code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Page",
              "x-order": "70"
            },
            "x-go-name": "Page",
            "x-order": "70"
          },
          {
            "description": "Number of records in response",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLastChanges_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Last changes",
        "tags": [
          "fundamentals"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-badge": "New",
        "x-group": "Fundamentals",
        "x-order": "180"
      }
    },
    "/linearreg": {
      "get": {
        "description": "The Linear Regression (LINEARREG) indicator calculates the best-fit straight line through a series of data points, helping traders identify trends and potential support or resistance levels.",
        "operationId": "GetTimeSeriesLinearReg",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62."
            },
            "x-go-name": "SeriesType",
            "x-order": "62."
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "63"
            },
            "x-go-name": "TimePeriod",
            "x-order": "63"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesLinearReg_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "LINEARREG",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Statistic Functions",
        "x-order": "390"
      }
    },
    "/linearregangle": {
      "get": {
        "description": "The Linear Regression Angle (LINEARREGANGLE) measures the angle of the linear regression line, indicating the slope and direction of the underlying trend.",
        "operationId": "GetTimeSeriesLinearRegAngle",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesLinearRegAngle_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "LINEARREGANGLE",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Statistic Functions",
        "x-order": "400"
      }
    },
    "/linearregintercept": {
      "get": {
        "description": "The Linear Regression Intercept (LINEARREGINTERCEPT) calculates the point where the linear regression line intersects the vertical axis, providing a reference point for trend analysis.",
        "operationId": "GetTimeSeriesLinearRegIntercept",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesLinearRegIntercept_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "LINEARREGINTERCEPT",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Statistic Functions",
        "x-order": "410"
      }
    },
    "/linearregslope": {
      "get": {
        "description": "The Linear Regression Slope (LINEARREGSLOPE) measures the steepness of the linear regression line, indicating the rate of change of the underlying trend.",
        "operationId": "GetTimeSeriesLinearRegSlope",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesLinearRegSlope_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "LINEARREGSLOPE",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Statistic Functions",
        "x-order": "420"
      }
    },
    "/ln": {
      "get": {
        "description": "The Natural Logarithm (LN) indicator calculates the natural logarithm of a given input value, often used in advanced mathematical analysis or calculations in financial markets.",
        "operationId": "GetTimeSeriesLn",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesLn_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "LN",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "430"
      }
    },
    "/log10": {
      "get": {
        "description": "The Base-10 Logarithm (LOG10) indicator calculates the base-10 logarithm of a given input value, commonly used in advanced mathematical analysis or calculations in financial markets.",
        "operationId": "GetTimeSeriesLog10",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesLog10_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "LOG10",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "440"
      }
    },
    "/logo": {
      "get": {
        "description": "Returns a logo of company, cryptocurrency, or forex pair.",
        "operationId": "GetLogo",
        "parameters": [
          {
            "description": "The ticker symbol of an instrument for which data is requested, e.g., AAPL, TSLA.",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "The exchange name where the instrument is traded, e.g., `NASDAQ`, `NSE`",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "20"
            },
            "x-go-name": "Exchange",
            "x-order": "20",
            "example": "NASDAQ"
          },
          {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded, e.g., `XNAS`, `XLON`",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "30"
            },
            "x-go-name": "MicCode",
            "x-order": "30",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLogo_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Logo",
        "tags": [
          "fundamentals"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Fundamentals",
        "x-order": "10"
      }
    },
    "/ma": {
      "get": {
        "description": "The Moving Average (MA) is a smoothing indicator that calculates the average price of a security over a specified period, helping traders identify trends and potential support or resistance levels.",
        "operationId": "GetTimeSeriesMa",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "63"
            },
            "x-go-name": "TimePeriod",
            "x-order": "63"
          },
          {
            "description": "The type of moving average used",
            "in": "query",
            "name": "ma_type",
            "schema": {
              "default": "SMA",
              "enum": [
                "SMA",
                "EMA",
                "WMA",
                "DEMA",
                "TEMA",
                "TRIMA",
                "KAMA",
                "MAMA",
                "T3MA"
              ],
              "type": "string",
              "x-go-name": "MAType",
              "x-order": "64"
            },
            "x-go-name": "MAType",
            "x-order": "64"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMa_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MA",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "450"
      }
    },
    "/macd": {
      "get": {
        "description": "The Moving Average Convergence Divergence (MACD) is a momentum indicator that measures the difference between two moving averages, with a signal line used to identify potential trend reversals and trading opportunities.",
        "operationId": "GetTimeSeriesMacd",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods for fast moving average. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "fast_period",
            "schema": {
              "default": 12,
              "format": "int64",
              "type": "integer",
              "x-go-name": "FastPeriod",
              "x-order": "62"
            },
            "x-go-name": "FastPeriod",
            "x-order": "62"
          },
          {
            "description": "Number of periods for slow moving average. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "slow_period",
            "schema": {
              "default": 26,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SlowPeriod",
              "x-order": "63"
            },
            "x-go-name": "SlowPeriod",
            "x-order": "63"
          },
          {
            "description": "The time period used for generating the signal line.",
            "in": "query",
            "name": "signal_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SignalPeriod",
              "x-order": "64"
            },
            "x-go-name": "SignalPeriod",
            "x-order": "64"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMacd_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MACD",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "460"
      }
    },
    "/macd_slope": {
      "get": {
        "description": "The MACD Slope is the rate of change of the MACD line, helping traders identify the acceleration or deceleration of momentum in a security's price.",
        "operationId": "GetTimeSeriesMacdSlope",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods for fast moving average. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "fast_period",
            "schema": {
              "default": 12,
              "format": "int64",
              "type": "integer",
              "x-go-name": "FastPeriod",
              "x-order": "62"
            },
            "x-go-name": "FastPeriod",
            "x-order": "62"
          },
          {
            "description": "Number of periods for slow moving average. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "slow_period",
            "schema": {
              "default": 26,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SlowPeriod",
              "x-order": "63"
            },
            "x-go-name": "SlowPeriod",
            "x-order": "63"
          },
          {
            "description": "The time period used for generating the signal line.",
            "in": "query",
            "name": "signal_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SignalPeriod",
              "x-order": "64"
            },
            "x-go-name": "SignalPeriod",
            "x-order": "64"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "64"
            },
            "x-go-name": "TimePeriod",
            "x-order": "64"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMacdSlope_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MACD SLOPE",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "470",
        "x-starting-plan": "Pro"
      }
    },
    "/macdext": {
      "get": {
        "description": "The MACD Extension (MACDEXT) is a customizable version of the MACD indicator, allowing traders to choose different moving average types and parameters for increased flexibility.",
        "operationId": "GetTimeSeriesMacdExt",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods for fast moving average. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "fast_period",
            "schema": {
              "default": 12,
              "format": "int64",
              "type": "integer",
              "x-go-name": "FastPeriod",
              "x-order": "62"
            },
            "x-go-name": "FastPeriod",
            "x-order": "62"
          },
          {
            "description": "The type of fast moving average used in the calculation.",
            "in": "query",
            "name": "fast_ma_type",
            "schema": {
              "default": "SMA",
              "enum": [
                "SMA",
                "EMA",
                "WMA",
                "DEMA",
                "TEMA",
                "TRIMA",
                "KAMA",
                "MAMA",
                "T3MA"
              ],
              "type": "string",
              "x-go-name": "FastMAType",
              "x-order": "62"
            },
            "x-go-name": "FastMAType",
            "x-order": "62"
          },
          {
            "description": "Number of periods for slow moving average. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "slow_period",
            "schema": {
              "default": 26,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SlowPeriod",
              "x-order": "63"
            },
            "x-go-name": "SlowPeriod",
            "x-order": "63"
          },
          {
            "description": "The type of slow moving average used in the calculation.",
            "in": "query",
            "name": "slow_ma_type",
            "schema": {
              "default": "SMA",
              "enum": [
                "SMA",
                "EMA",
                "WMA",
                "DEMA",
                "TEMA",
                "TRIMA",
                "KAMA",
                "MAMA",
                "T3MA"
              ],
              "type": "string",
              "x-go-name": "SlowMAType",
              "x-order": "63"
            },
            "x-go-name": "SlowMAType",
            "x-order": "63"
          },
          {
            "description": "The time period used for generating the signal line.",
            "in": "query",
            "name": "signal_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SignalPeriod",
              "x-order": "64"
            },
            "x-go-name": "SignalPeriod",
            "x-order": "64"
          },
          {
            "description": "The type of fast moving average used for generating the signal line.",
            "in": "query",
            "name": "signal_ma_type",
            "schema": {
              "default": "SMA",
              "enum": [
                "SMA",
                "EMA",
                "WMA",
                "DEMA",
                "TEMA",
                "TRIMA",
                "KAMA",
                "MAMA",
                "T3MA"
              ],
              "type": "string",
              "x-go-name": "SignalMAType",
              "x-order": "64"
            },
            "x-go-name": "SignalMAType",
            "x-order": "64"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMacdExt_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MACDEXT",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "480"
      }
    },
    "/mama": {
      "get": {
        "description": "The MESA Adaptive Moving Average (MAMA) is a moving average that adapts to price movement based on the dominant market cycle, providing a balance between responsiveness and noise reduction.\nMore about MAMA can be read [here](http://www.mesasoftware.com/papers/MAMA.pdf).",
        "operationId": "GetTimeSeriesMama",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "The limit for the fast moving average.",
            "in": "query",
            "name": "fast_limit",
            "schema": {
              "default": 0.5,
              "format": "double",
              "type": "number",
              "x-go-name": "FastLimit",
              "x-order": "62"
            },
            "x-go-name": "FastLimit",
            "x-order": "62"
          },
          {
            "description": "The limit for the slow moving average.",
            "in": "query",
            "name": "slow_limit",
            "schema": {
              "default": 0.05,
              "format": "double",
              "type": "number",
              "x-go-name": "SlowLimit",
              "x-order": "63"
            },
            "x-go-name": "SlowLimit",
            "x-order": "63"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMama_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MAMA",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "490"
      }
    },
    "/market_cap": {
      "get": {
        "description": "Market capitalization history.",
        "operationId": "GetMarketCap",
        "parameters": [
          {
            "description": "Filter by symbol",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Filter by exchange name",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Filter by market identifier code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "Start date for market capitalization data retrieval.\nData will be returned from this date onwards.\nFormat `2006-01-02`",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "70"
            },
            "x-go-name": "StartDate",
            "x-order": "70",
            "example": "2023-01-01"
          },
          {
            "description": "End date for market capitalization data retrieval.\nData will be returned up to and including this date.\nFormat `2006-01-02`",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "80"
            },
            "x-go-name": "EndDate",
            "x-order": "80",
            "example": "2023-12-31"
          },
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Page",
              "x-order": "90"
            },
            "x-go-name": "Page",
            "x-order": "90"
          },
          {
            "description": "Number of records in response",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer",
              "x-go-name": "OutputSize",
              "x-order": "100"
            },
            "x-go-name": "OutputSize",
            "x-order": "100"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMarketCap_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Market capitalization",
        "tags": [
          "fundamentals"
        ],
        "x-api-credits-cost": "5",
        "x-api-credits-type": "request",
        "x-badge": "New",
        "x-group": "Fundamentals",
        "x-order": "190",
        "x-starting-plan": "Ultra",
        "x-url-hash": "market-cap"
      }
    },
    "/market_movers/{market}": {
      "get": {
        "description": "Get the list of the top gaining or losing stocks today.\n\nTop gainers are ordered by the highest rate of price increase since the previous day''s close. Top losers are ordered by the highest percentage of price decrease since the last day.\n\nData is available for all international equities, forex, crypto.",
        "operationId": "GetMarketMovers",
        "parameters": [
          {
            "description": "Maket type",
            "in": "path",
            "name": "market",
            "required": true,
            "schema": {
              "enum": [
                "stocks",
                "etf",
                "mutual_funds",
                "forex",
                "crypto"
              ],
              "type": "string",
              "x-go-name": "Market",
              "x-order": "5"
            },
            "x-go-name": "Market",
            "x-order": "5",
            "example": "stocks"
          },
          {
            "description": "Specifies direction of the snapshot gainers or losers",
            "in": "query",
            "name": "direction",
            "schema": {
              "default": "gainers",
              "enum": [
                "gainers",
                "losers"
              ],
              "type": "string",
              "x-go-name": "Direction",
              "x-order": "10"
            },
            "x-go-name": "Direction",
            "x-order": "10"
          },
          {
            "description": "Specifies the size of the snapshot.\nCan be in a range from `1` to `50`",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 50,
              "minimum": 1,
              "type": "integer",
              "x-go-name": "OutputSize",
              "x-order": "20"
            },
            "x-go-name": "OutputSize",
            "x-order": "20"
          },
          {
            "description": "Country of the snapshot, applicable to non-currencies only.\nTakes country name or alpha code",
            "in": "query",
            "name": "country",
            "schema": {
              "default": "USA",
              "type": "string",
              "x-go-name": "Country",
              "x-order": "30"
            },
            "x-go-name": "Country",
            "x-order": "30"
          },
          {
            "description": "Takes values with price grater than specified value",
            "in": "query",
            "name": "price_greater_than",
            "schema": {
              "type": "string",
              "x-go-name": "PriceGreaterThan",
              "x-order": "40"
            },
            "x-go-name": "PriceGreaterThan",
            "x-order": "40",
            "example": "175.5"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0,11] inclusive",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": "5",
              "maximum": 11,
              "minimum": 0,
              "type": "string",
              "x-go-name": "DecimalPlaces",
              "x-order": "50"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "50"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MarketMoversResponseBody"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Market movers",
        "tags": [
          "market_data"
        ],
        "x-api-credits-cost": "100",
        "x-api-credits-type": "request",
        "x-group": "Core data",
        "x-order": "80",
        "x-starting-plan": "Pro"
      }
    },
    "/market_state": {
      "get": {
        "description": "Check the state of all available exchanges, time to open, and time to close. Returns all available stock exchanges by default.",
        "operationId": "GetMarketState",
        "parameters": [
          {
            "description": "The exchange name where the instrument is traded.",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "10"
            },
            "x-go-name": "Exchange",
            "x-order": "10",
            "example": "NYSE"
          },
          {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "20"
            },
            "x-go-name": "MicCode",
            "x-order": "20",
            "example": "XNYS"
          },
          {
            "description": "The country where the exchange is located. Takes country name or alpha code.",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "30"
            },
            "x-go-name": "Country",
            "x-order": "30",
            "example": "United States"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMarketState_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Market state",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Reference data",
        "x-order": "120"
      }
    },
    "/max": {
      "get": {
        "description": "The Maximum (MAX) indicator calculates the highest value of a data series over a specified period, often used to identify potential resistance levels or extreme price movements.",
        "operationId": "GetTimeSeriesMax",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMax_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MAX",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Statistic Functions",
        "x-order": "500"
      }
    },
    "/maxindex": {
      "get": {
        "description": "The Maximum Index (MAXINDEX) returns the index of the highest value in a data series over a specified period, providing information about the timing of extreme price movements.",
        "operationId": "GetTimeSeriesMaxIndex",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMaxIndex_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MAXINDEX",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Statistic Functions",
        "x-order": "510"
      }
    },
    "/mcginley_dynamic": {
      "get": {
        "description": "The McGinley Dynamic (MCGINLEY_DYNAMIC) indicator is a smoothing tool designed to minimize the lag between the indicator and price action. It adjusts its speed based on the volatility of the security, providing a more accurate representation of price trends and potential support or resistance levels compared to traditional moving averages.",
        "operationId": "GetTimeSeriesMcGinleyDynamic",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMcGinleyDynamic_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MCGINLEY_DYNAMIC",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "520"
      }
    },
    "/medprice": {
      "get": {
        "description": "The Median Price (MEDPRICE) indicator calculates the midpoint between a security's high and low prices, providing a simplified view of price action.",
        "operationId": "GetTimeSeriesMedPrice",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMedPrice_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MEDPRICE",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "530"
      }
    },
    "/mfi": {
      "get": {
        "description": "The Money Flow Index (MFI) is a volume-weighted momentum oscillator that measures buying and selling pressure by comparing positive and negative money flow, helping traders identify overbought or oversold conditions.",
        "operationId": "GetTimeSeriesMfi",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMfi_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MFI",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "540"
      }
    },
    "/midpoint": {
      "get": {
        "description": "The Midpoint (MIDPOINT) indicator calculates the midpoint of a data series over a specified period, often used to smooth out data fluctuations and identify trends.",
        "operationId": "GetTimeSeriesMidPoint",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMidPoint_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MIDPOINT",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "550"
      }
    },
    "/midprice": {
      "get": {
        "description": "The Midprice (MIDPRICE) indicator calculates the average of a security's high and low prices over a specified period, providing a smoothed view of price action and potential support or resistance levels.",
        "operationId": "GetTimeSeriesMidPrice",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMidPrice_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MIDPRICE",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "560"
      }
    },
    "/min": {
      "get": {
        "description": "The Minimum (MIN) indicator calculates the lowest value of a data series over a specified period, often used to identify potential support levels or extreme price movements.",
        "operationId": "GetTimeSeriesMin",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMin_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MIN",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Statistic Functions",
        "x-order": "570"
      }
    },
    "/minindex": {
      "get": {
        "description": "The Minimum Index (MININDEX) returns the index of the lowest value in a data series over a specified period, providing information about the timing of extreme price movements.",
        "operationId": "GetTimeSeriesMinIndex",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMinIndex_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MININDEX",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Statistic Functions",
        "x-order": "580"
      }
    },
    "/minmax": {
      "get": {
        "description": "The Minimum and Maximum (MINMAX) indicator calculates the lowest and highest values of a data series over a specified period, often used to identify potential support and resistance levels or extreme price movements.",
        "operationId": "GetTimeSeriesMinMax",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMinMax_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MINMAX",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Statistic Functions",
        "x-order": "590"
      }
    },
    "/minmaxindex": {
      "get": {
        "description": "The Minimum and Maximum Index (MINMAXINDEX) returns the indices of the lowest and highest values in a data series over a specified period, providing information about the timing of extreme price movements.",
        "operationId": "GetTimeSeriesMinMaxIndex",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMinMaxIndex_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MINMAXINDEX",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Statistic Functions",
        "x-order": "600"
      }
    },
    "/minus_di": {
      "get": {
        "description": "The Minus Directional Indicator (MINUS_DI) is a component of the ADX indicator, measuring the strength of a security's downward price movement.",
        "operationId": "GetTimeSeriesMinusDI",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMinusDI_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MINUS_DI",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "610"
      }
    },
    "/minus_dm": {
      "get": {
        "description": "The Minus Directional Movement (MINUS_DM) is a component of the ADX indicator, measuring the extent of a security's downward price movement.",
        "operationId": "GetTimeSeriesMinusDM",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMinusDM_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MINUS_DM",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "620"
      }
    },
    "/mom": {
      "get": {
        "description": "The Momentum (MOM) indicator measures the rate of change of a security's price over a specified period, helping traders identify potential price trends and reversals.",
        "operationId": "GetTimeSeriesMom",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMom_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MOM",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "630"
      }
    },
    "/mult": {
      "get": {
        "description": "The Multiplication (MULT) indicator performs arithmetic multiplication of two input data series, typically used to combine or normalize multiple technical indicators or price data.",
        "operationId": "GetTimeSeriesMult",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type used as the first part of technical indicator",
            "in": "query",
            "name": "series_type_1",
            "schema": {
              "default": "open",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType1",
              "x-order": "62"
            },
            "x-go-name": "SeriesType1",
            "x-order": "62"
          },
          {
            "description": "Price type used as the second part of technical indicator",
            "in": "query",
            "name": "series_type_2",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType2",
              "x-order": "64"
            },
            "x-go-name": "SeriesType2",
            "x-order": "64"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesMult_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MULT",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "640"
      }
    },
    "/mutual_funds/family": {
      "get": {
        "description": "This API request returns a list of mutual funds families.",
        "operationId": "GetMutualFundsFamily",
        "parameters": [
          {
            "description": "Filter by investment company that manages the fund",
            "in": "query",
            "name": "fund_family",
            "schema": {
              "type": "string",
              "x-go-name": "FundFamily",
              "x-order": "20"
            },
            "x-go-name": "FundFamily",
            "x-order": "20",
            "example": "Jackson National"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "10"
            },
            "x-go-name": "Country",
            "x-order": "10",
            "example": "United States"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMutualFundsFamily_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MFs family list",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Mutual funds",
        "x-order": "20",
        "x-url-hash": "mutual-fund-family-list"
      }
    },
    "/mutual_funds/list": {
      "get": {
        "description": "This API request returns a list of mutual funds available at Twelve Data. Sorting is in descending order by total assets value. The list is updated daily.",
        "operationId": "GetMutualFundsList",
        "parameters": [
          {
            "description": "Filter by symbol",
            "in": "query",
            "name": "symbol",
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "1535462D"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG00HMMLCH1"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "LU1206782309"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "120678230"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "30"
            },
            "x-go-name": "Country",
            "x-order": "30",
            "example": "United States"
          },
          {
            "description": "Filter by investment company that manages the fund",
            "in": "query",
            "name": "fund_family",
            "schema": {
              "type": "string",
              "x-go-name": "FundFamily",
              "x-order": "40"
            },
            "x-go-name": "FundFamily",
            "x-order": "40",
            "example": "Jackson National"
          },
          {
            "description": "Filter by the type of fund",
            "in": "query",
            "name": "fund_type",
            "schema": {
              "type": "string",
              "x-go-name": "FundType",
              "x-order": "50"
            },
            "x-go-name": "FundType",
            "x-order": "50",
            "example": "Small Blend"
          },
          {
            "description": "Filter by performance rating from `0` to `5`",
            "in": "query",
            "name": "performance_rating",
            "schema": {
              "format": "int64",
              "type": "integer",
              "x-go-name": "PerformanceRating",
              "x-order": "60"
            },
            "x-go-name": "PerformanceRating",
            "x-order": "60",
            "example": 4
          },
          {
            "description": "Filter by risk rating from `0` to `5`",
            "in": "query",
            "name": "risk_rating",
            "schema": {
              "format": "int64",
              "type": "integer",
              "x-go-name": "RiskRating",
              "x-order": "70"
            },
            "x-go-name": "RiskRating",
            "x-order": "70",
            "example": 4
          },
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Page",
              "x-order": "80"
            },
            "x-go-name": "Page",
            "x-order": "80"
          },
          {
            "description": "Number of records in response",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 100,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "90"
            },
            "x-go-name": "PageSize",
            "x-order": "90"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMutualFundsList_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MFs list",
        "tags": [
          "reference_data"
        ],
        "x-additional-notes": "With Basic, Grow, and Pro plans, only 50 records will be in response. Ultra, Enterprise and Custom plans can access complete data on over 140,000 Mutual Funds.",
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-badge": "Useful",
        "x-group": "Mutual funds",
        "x-order": "10",
        "x-url-hash": "mutual-funds-list"
      }
    },
    "/mutual_funds/type": {
      "get": {
        "description": "This API request returns a list of mutual funds types.",
        "operationId": "GetMutualFundsType",
        "parameters": [
          {
            "description": "Filter by the type of fund",
            "in": "query",
            "name": "fund_type",
            "schema": {
              "type": "string",
              "x-go-name": "FundType",
              "x-order": "20"
            },
            "x-go-name": "FundType",
            "x-order": "20",
            "example": "Jackson National"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "10"
            },
            "x-go-name": "Country",
            "x-order": "10",
            "example": "United States"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMutualFundsType_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "MFs type list",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Mutual funds",
        "x-order": "30",
        "x-url-hash": "mutual-fund-type-list"
      }
    },
    "/mutual_funds/world": {
      "get": {
        "description": "This API request returns a complete breakdown of a mutual fund, including summary, performance, risk, ratings, composition, purchase_info, and sustainability.",
        "operationId": "GetMutualFundsWorld",
        "parameters": [
          {
            "description": "Symbol ticker of mutual fund",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "1535462D"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG00HMMLCH1"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "LU1206782309"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "120678230"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Number of decimal places for floating values. Accepts value in range [0,11]",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "50"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "50"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMutualFundsWorld_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "All data",
        "tags": [
          "mutual_funds"
        ],
        "x-api-credits-cost": "1000",
        "x-api-credits-type": "request",
        "x-badge": "High demand",
        "x-group": "Mutual funds",
        "x-order": "40",
        "x-starting-plan": "Ultra",
        "x-url-hash": "mf-all-data"
      }
    },
    "/mutual_funds/world/composition": {
      "get": {
        "description": "This API request returns portfolio composition of a mutual fund, including sectors, holding details, weighted exposure, and others.",
        "operationId": "GetMutualFundsWorldComposition",
        "parameters": [
          {
            "description": "Symbol ticker of mutual fund",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "1535462D"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG00HMMLCH1"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "LU1206782309"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "120678230"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Number of decimal places for floating values. Accepts value in range [0,11]",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "50"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "50"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMutualFundsWorldComposition_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Composition",
        "tags": [
          "mutual_funds"
        ],
        "x-api-credits-cost": "200",
        "x-api-credits-type": "request",
        "x-badge": "High demand",
        "x-group": "Mutual funds",
        "x-order": "90",
        "x-starting-plan": "Ultra",
        "x-url-hash": "mf-composition"
      }
    },
    "/mutual_funds/world/performance": {
      "get": {
        "description": "This API request returns detailed performance of a mutual fund, including trailing, annual, quarterly, and load-adjusted returns.",
        "operationId": "GetMutualFundsWorldPerformance",
        "parameters": [
          {
            "description": "Symbol ticker of mutual fund",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "1535462D"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG00HMMLCH1"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "LU1206782309"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "120678230"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Number of decimal places for floating values. Accepts value in range [0,11]",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "50"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "50"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMutualFundsWorldPerformance_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Performance",
        "tags": [
          "mutual_funds"
        ],
        "x-api-credits-cost": "200",
        "x-api-credits-type": "request",
        "x-badge": "High demand",
        "x-group": "Mutual funds",
        "x-order": "60",
        "x-starting-plan": "Ultra",
        "x-url-hash": "mf-performance"
      }
    },
    "/mutual_funds/world/purchase_info": {
      "get": {
        "description": "This API request returns essential information on purchasing a mutual fund, including minimums, pricing, and available brokerages.",
        "operationId": "GetMutualFundsWorldPurchaseInfo",
        "parameters": [
          {
            "description": "Symbol ticker of mutual fund",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "1535462D"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG00HMMLCH1"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "LU1206782309"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "120678230"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Number of decimal places for floating values. Accepts value in range [0,11]",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "50"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "50"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMutualFundsWorldPurchaseInfo_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Purchase info",
        "tags": [
          "mutual_funds"
        ],
        "x-api-credits-cost": "200",
        "x-api-credits-type": "request",
        "x-group": "Mutual funds",
        "x-order": "100",
        "x-starting-plan": "Ultra",
        "x-url-hash": "mf-purchase-info"
      }
    },
    "/mutual_funds/world/ratings": {
      "get": {
        "description": "This API request returns ratings of a mutual fund.",
        "operationId": "GetMutualFundsWorldRatings",
        "parameters": [
          {
            "description": "Symbol ticker of mutual fund",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "1535462D"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG00HMMLCH1"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "LU1206782309"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "120678230"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Number of decimal places for floating values. Accepts value in range [0,11]",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "50"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "50"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMutualFundsWorldRatings_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Ratings",
        "tags": [
          "mutual_funds"
        ],
        "x-api-credits-cost": "200",
        "x-api-credits-type": "request",
        "x-group": "Mutual funds",
        "x-order": "80",
        "x-starting-plan": "Ultra",
        "x-url-hash": "mf-ratings"
      }
    },
    "/mutual_funds/world/risk": {
      "get": {
        "description": "This API request returns core metrics to measure the risk of investing in a mutual fund.",
        "operationId": "GetMutualFundsWorldRisk",
        "parameters": [
          {
            "description": "Symbol ticker of mutual fund",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "1535462D"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG00HMMLCH1"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "LU1206782309"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "120678230"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Number of decimal places for floating values. Accepts value in range [0,11]",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "50"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "50"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMutualFundsWorldRisk_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Risk",
        "tags": [
          "mutual_funds"
        ],
        "x-api-credits-cost": "200",
        "x-api-credits-type": "request",
        "x-group": "Mutual funds",
        "x-order": "70",
        "x-starting-plan": "Ultra",
        "x-url-hash": "mf-risk"
      }
    },
    "/mutual_funds/world/summary": {
      "get": {
        "description": "This API request returns a brief summary of a mutual fund.",
        "operationId": "GetMutualFundsWorldSummary",
        "parameters": [
          {
            "description": "Symbol ticker of mutual fund",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "1535462D"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG00HMMLCH1"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "LU1206782309"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "120678230"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Number of decimal places for floating values. Accepts value in range [0,11]",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "50"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "50"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMutualFundsWorldSummary_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Summary",
        "tags": [
          "mutual_funds"
        ],
        "x-api-credits-cost": "200",
        "x-api-credits-type": "request",
        "x-group": "Mutual funds",
        "x-order": "50",
        "x-starting-plan": "Ultra",
        "x-url-hash": "mf-summary"
      }
    },
    "/mutual_funds/world/sustainability": {
      "get": {
        "description": "This API request returns brief information on mutual fund sustainability and ESG.",
        "operationId": "GetMutualFundsWorldSustainability",
        "parameters": [
          {
            "description": "Symbol ticker of mutual fund",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "1535462D"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG00HMMLCH1"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "LU1206782309"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "120678230"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Number of decimal places for floating values. Accepts value in range [0,11]",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "50"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "50"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMutualFundsWorldSustainability_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Sustainability",
        "tags": [
          "mutual_funds"
        ],
        "x-api-credits-cost": "200",
        "x-api-credits-type": "request",
        "x-group": "Mutual funds",
        "x-order": "110",
        "x-starting-plan": "Ultra",
        "x-url-hash": "mf-sustainability"
      }
    },
    "/natr": {
      "get": {
        "description": "The Normalized Average True Range (NATR) is a volatility indicator that measures the average range of price movement over a specified period, expressed as a percentage of the security's price, allowing for comparisons across different securities.",
        "operationId": "GetTimeSeriesNatr",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesNatr_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "NATR",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Volatility Indicators",
        "x-order": "650"
      }
    },
    "/obv": {
      "get": {
        "description": "The On Balance Volume (OBV) indicator is a cumulative volume-based tool used to measure buying and selling pressure, helping traders identify potential price trends and reversals.",
        "operationId": "GetTimeSeriesObv",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesObv_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "OBV",
        "tags": [
          "technical_indicator"
        ],
        "x-additional-notes": "Take note that this endpoint is applicable to all instruments except currencies.",
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Volume Indicators",
        "x-order": "660"
      }
    },
    "/percent_b": {
      "get": {
        "description": "The Percent B (%B) is a component of the Bollinger Bands indicator, measuring the position of a security's price relative to the bands, helping traders identify potential overbought or oversold conditions.",
        "operationId": "GetTimeSeriesPercent_B",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "The standard deviation applied in the calculation.  Must be at least `1`",
            "in": "query",
            "name": "sd",
            "schema": {
              "default": 2,
              "format": "double",
              "type": "number",
              "x-go-name": "StandardDeviation",
              "x-order": "63"
            },
            "x-go-name": "StandardDeviation",
            "x-order": "63"
          },
          {
            "description": "The type of moving average used",
            "in": "query",
            "name": "ma_type",
            "schema": {
              "default": "SMA",
              "enum": [
                "SMA",
                "EMA",
                "WMA",
                "DEMA",
                "TEMA",
                "TRIMA",
                "KAMA",
                "MAMA",
                "T3MA"
              ],
              "type": "string",
              "x-go-name": "MAType",
              "x-order": "64"
            },
            "x-go-name": "MAType",
            "x-order": "64"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesPercent_B_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "PERCENT_B",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "670"
      }
    },
    "/pivot_points_hl": {
      "get": {
        "description": "The Pivot Points High Low (PIVOT_POINTS_HL) indicator calculates support and resistance levels based on the highest high and lowest low of a security's price over a specified period, providing potential entry and exit points.",
        "operationId": "GetTimeSeriesPivotPointsHL",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesPivotPointsHL_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "PIVOT_POINTS_HL",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "680",
        "x-starting-plan": "Pro"
      }
    },
    "/plus_di": {
      "get": {
        "description": "The Plus Directional Indicator (PLUS_DI) is a component of the ADX indicator, measuring the strength of a security's upward price movement.",
        "operationId": "GetTimeSeriesPlusDI",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesPlusDI_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "PLUS_DI",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "690"
      }
    },
    "/plus_dm": {
      "get": {
        "description": "The Plus Directional Movement (PLUS_DM) is a component of the ADX indicator, measuring the extent of a security's upward price movement.",
        "operationId": "GetTimeSeriesPlusDM",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesPlusDM_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "PLUS_DM",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "700"
      }
    },
    "/ppo": {
      "get": {
        "description": "The Percentage Price Oscillator (PPO) is a momentum oscillator that measures the percentage difference between two moving averages, helping traders identify potential trend reversals and trading opportunities.",
        "operationId": "GetTimeSeriesPpo",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods for fast moving average. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "fast_period",
            "schema": {
              "default": 12,
              "format": "int64",
              "type": "integer",
              "x-go-name": "FastPeriod",
              "x-order": "62"
            },
            "x-go-name": "FastPeriod",
            "x-order": "62"
          },
          {
            "description": "Number of periods for slow moving average. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "slow_period",
            "schema": {
              "default": 26,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SlowPeriod",
              "x-order": "63"
            },
            "x-go-name": "SlowPeriod",
            "x-order": "63"
          },
          {
            "description": "The type of moving average used",
            "in": "query",
            "name": "ma_type",
            "schema": {
              "default": "SMA",
              "enum": [
                "SMA",
                "EMA",
                "WMA",
                "DEMA",
                "TEMA",
                "TRIMA",
                "KAMA",
                "MAMA",
                "T3MA"
              ],
              "type": "string",
              "x-go-name": "MAType",
              "x-order": "64"
            },
            "x-go-name": "MAType",
            "x-order": "64"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesPpo_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "PPO",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "710"
      }
    },
    "/price": {
      "get": {
        "description": "This endpoint is a lightweight method that allows retrieving only the real-time price of the selected instrument.",
        "operationId": "GetPrice",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG000BHTMY7"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "30"
            },
            "x-go-name": "Exchange",
            "x-order": "30",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "40"
            },
            "x-go-name": "MicCode",
            "x-order": "40",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "50"
            },
            "x-go-name": "Country",
            "x-order": "50",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "60"
            },
            "x-go-name": "Type",
            "x-order": "60",
            "example": "ETF"
          },
          {
            "description": "Value can be JSON or CSV",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "70"
            },
            "x-go-name": "Format",
            "x-order": "70"
          },
          {
            "description": "Specify the delimiter used when downloading the CSV file",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "80"
            },
            "x-go-name": "Delimiter",
            "x-order": "80"
          },
          {
            "description": "Parameter is optional. Only for Pro and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume.",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "100"
            },
            "x-go-name": "Prepost",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0,11] inclusive",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "110"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "110"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPrice_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Real-time price",
        "tags": [
          "market_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Core data",
        "x-order": "60"
      }
    },
    "/price_target": {
      "get": {
        "description": "This API endpoint returns the analysts' projection of a security's future price.",
        "operationId": "GetPriceTarget",
        "parameters": [
          {
            "description": "Filter by symbol",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Filter by exchange name",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "50"
            },
            "x-go-name": "Exchange",
            "x-order": "50",
            "example": "NASDAQ"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPriceTarget_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Price target",
        "tags": [
          "analysis"
        ],
        "x-api-credits-cost": "75",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Analysis",
        "x-order": "70",
        "x-starting-plan": "Ultra",
        "x-url-hash": "price_target"
      }
    },
    "/profile": {
      "get": {
        "description": "Returns general information about the company.",
        "operationId": "GetProfile",
        "parameters": [
          {
            "description": "Symbol ticker of instrument. For preffered stocks use dot(.) delimiter.\nE.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProfile_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Profile",
        "tags": [
          "fundamentals"
        ],
        "x-api-credits-cost": "10",
        "x-api-credits-type": "symbol",
        "x-badge": "Useful",
        "x-group": "Fundamentals",
        "x-order": "20",
        "x-starting-plan": "Grow"
      }
    },
    "/quote": {
      "get": {
        "description": "Quote endpoint is an efficient method to retrieve the latest quote of the selected instrument.",
        "operationId": "GetQuote",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG000BHTMY7"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval of the quote",
            "in": "query",
            "name": "interval",
            "schema": {
              "default": "1day",
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "Number of periods for Average Volume",
            "in": "query",
            "name": "volume_time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "AverageVolumeTimePeriod",
              "x-order": "70"
            },
            "x-go-name": "AverageVolumeTimePeriod",
            "x-order": "70"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "80"
            },
            "x-go-name": "Type",
            "x-order": "80",
            "example": "ETF"
          },
          {
            "description": "Value can be JSON or CSV\nDefault JSON",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "Specify the delimiter used when downloading the CSV file",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Parameter is optional. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume.",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "120"
            },
            "x-go-name": "Prepost",
            "x-order": "120"
          },
          {
            "description": "If true, then return data for closed day",
            "in": "query",
            "name": "eod",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Eod",
              "x-order": "130"
            },
            "x-go-name": "Eod",
            "x-order": "130"
          },
          {
            "description": "Number of hours for calculate rolling change at period. By default set to 24, it can be in range [1, 168].",
            "in": "query",
            "name": "rolling_period",
            "schema": {
              "default": 24,
              "format": "int64",
              "type": "integer",
              "x-go-name": "RollingPeriod",
              "x-order": "140"
            },
            "x-go-name": "RollingPeriod",
            "x-order": "140"
          },
          {
            "description": "Specifies the number of decimal places for floating values\nShould be in range [0,11] inclusive",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "150"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "150"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a>.</li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "160"
            },
            "x-go-name": "Timezone",
            "x-order": "160"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetQuote_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Quote",
        "tags": [
          "market_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Core data",
        "x-order": "50"
      }
    },
    "/recommendations": {
      "get": {
        "description": "This API endpoint returns the average of all analyst recommendations and classifies them as Strong Buy, Buy, Hold, or Sell. Also, it returns a recommendation score.",
        "operationId": "GetRecommendations",
        "parameters": [
          {
            "description": "Filter by symbol",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "40"
            },
            "x-go-name": "Cusip",
            "x-order": "40",
            "example": "594918104"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "50"
            },
            "x-go-name": "Country",
            "x-order": "50",
            "example": "United States"
          },
          {
            "description": "The exchange name where the instrument is traded, e.g., `Nasdaq`, `NSE`.",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "60"
            },
            "x-go-name": "Exchange",
            "x-order": "60",
            "example": "NASDAQ"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRecommendations_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Recommendations",
        "tags": [
          "analysis"
        ],
        "x-api-credits-cost": "100",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Analysis",
        "x-order": "60",
        "x-starting-plan": "Ultra",
        "x-url-hash": "recommendations"
      }
    },
    "/revenue_estimate": {
      "get": {
        "description": "This API endpoint returns analysts' estimate for a company's future quarterly and annual sales (total revenue).",
        "operationId": "GetRevenueEstimate",
        "parameters": [
          {
            "description": "Filter by symbol",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "40"
            },
            "x-go-name": "Country",
            "x-order": "40",
            "example": "United States"
          },
          {
            "description": "Filter by exchange name",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "50"
            },
            "x-go-name": "Exchange",
            "x-order": "50",
            "example": "NASDAQ"
          },
          {
            "description": "Number of decimal places for floating values.\nShould be in range [0,11] inclusive",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "60"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "60"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRevenueEstimate_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Revenue estimate",
        "tags": [
          "analysis"
        ],
        "x-api-credits-cost": "20",
        "x-api-credits-type": "symbol",
        "x-group": "Analysis",
        "x-order": "20",
        "x-starting-plan": "Ultra",
        "x-url-hash": "revenue_estimate"
      }
    },
    "/roc": {
      "get": {
        "description": "The Rate of Change (ROC) indicator measures the percentage change in a security's price over a specified period, helping traders identify potential price trends and reversals.",
        "operationId": "GetTimeSeriesRoc",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesRoc_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "ROC",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "720"
      }
    },
    "/rocp": {
      "get": {
        "description": "The Rate of Change Percentage (ROCP) indicator calculates the percentage change in a security's price over a specified period, providing insight into momentum and potential trend reversals.",
        "operationId": "GetTimeSeriesRocp",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesRocp_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "ROCP",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "730"
      }
    },
    "/rocr": {
      "get": {
        "description": "The Rate of Change Ratio (ROCR) indicator measures the ratio of a security's current price to its price a specified number of periods ago, helping traders identify potential price trends and reversals.",
        "operationId": "GetTimeSeriesRocr",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesRocr_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "ROCR",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "740"
      }
    },
    "/rocr100": {
      "get": {
        "description": "The Rate of Change Ratio 100 (ROCR100) indicator measures the percentage change in a security's price over a specified period, expressed as a ratio to 100, providing insight into momentum and potential trend reversals.",
        "operationId": "GetTimeSeriesRocr100",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesRocr100_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "ROCR100",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "750"
      }
    },
    "/rsi": {
      "get": {
        "description": "The Relative Strength Index (RSI) is a momentum oscillator that measures the speed and change of price movements, helping traders identify potential overbought or oversold conditions and trend reversals.",
        "operationId": "GetTimeSeriesRsi",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesRsi_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "RSI",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "760"
      }
    },
    "/rvol": {
      "get": {
        "description": "The Relative Volume (RVOL) is a ratio that compares a security's current trading volume to its average trading volume over a specified period. By measuring volume activity relative to its historical norm, RVOL helps traders identify unusual market activity, potential breakouts, and the strength of price movements.",
        "operationId": "GetTimeSeriesRvol",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesRvol_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "RVOL",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Volume Indicators",
        "x-order": "770",
        "x-starting-plan": "Grow"
      }
    },
    "/sanctions/{source}": {
      "get": {
        "description": "This API endpoint returns a list of sanctioned entities for a given sanction source (ofac, uk, eu, au, etc)",
        "operationId": "GetSourceSanctionedEntities",
        "parameters": [
          {
            "description": "Sanctions source",
            "in": "path",
            "name": "source",
            "required": true,
            "schema": {
              "enum": [
                "ofac",
                "uk",
                "eu",
                "au"
              ],
              "type": "string",
              "x-go-name": "Source"
            },
            "x-go-name": "Source",
            "example": "ofac"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSourceSanctionedEntities_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Sanctioned entities",
        "tags": [
          "regulatory"
        ],
        "x-api-credits-cost": "50",
        "x-api-credits-type": "request",
        "x-badge": "New",
        "x-group": "Regulatory",
        "x-order": "70",
        "x-starting-plan": "Ultra",
        "x-url-hash": "sanctioned_entities"
      }
    },
    "/sar": {
      "get": {
        "description": "The Parabolic SAR (SAR) is a trend-following indicator that calculates potential support and resistance levels based on a security's price and time, helping traders identify potential entry and exit points.",
        "operationId": "GetTimeSeriesSar",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "The rate of change in the indicator's values.",
            "in": "query",
            "name": "acceleration",
            "schema": {
              "default": 0.02,
              "format": "double",
              "type": "number",
              "x-go-name": "Acceleration",
              "x-order": "61"
            },
            "x-go-name": "Acceleration",
            "x-order": "61"
          },
          {
            "description": "The maximum value considered for the indicator calculation.",
            "in": "query",
            "name": "maximum",
            "schema": {
              "default": 0.2,
              "format": "double",
              "type": "number",
              "x-go-name": "Maximum",
              "x-order": "62"
            },
            "x-go-name": "Maximum",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesSar_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "SAR",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "780",
        "x-starting-plan": "Grow"
      }
    },
    "/sarext": {
      "get": {
        "description": "The Parabolic SAR Extended (SAREXT) is a customizable version of the Parabolic SAR indicator, allowing traders to choose different parameters for increased flexibility in identifying potential entry and exit points.",
        "operationId": "GetTimeSeriesSarExt",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "The initial value for the indicator calculation.",
            "in": "query",
            "name": "start_value",
            "schema": {
              "default": 0,
              "format": "double",
              "type": "number",
              "x-go-name": "StartValue",
              "x-order": "61"
            },
            "x-go-name": "StartValue",
            "x-order": "61"
          },
          {
            "description": "The adjustment applied when the indicator's direction changes.",
            "in": "query",
            "name": "offset_on_reverse",
            "schema": {
              "default": 0,
              "format": "double",
              "type": "number",
              "x-go-name": "OffsetOnReverse",
              "x-order": "62"
            },
            "x-go-name": "OffsetOnReverse",
            "x-order": "62"
          },
          {
            "description": "The maximum acceleration value for long positions.",
            "in": "query",
            "name": "acceleration_limit_long",
            "schema": {
              "default": 0.02,
              "format": "double",
              "type": "number",
              "x-go-name": "AccelerationLimitLong",
              "x-order": "63"
            },
            "x-go-name": "AccelerationLimitLong",
            "x-order": "63"
          },
          {
            "description": "The acceleration value for long positions.",
            "in": "query",
            "name": "acceleration_long",
            "schema": {
              "default": 0.02,
              "format": "double",
              "type": "number",
              "x-go-name": "AccelerationLong",
              "x-order": "63"
            },
            "x-go-name": "AccelerationLong",
            "x-order": "63"
          },
          {
            "description": "The highest allowed acceleration for long positions.",
            "in": "query",
            "name": "acceleration_max_long",
            "schema": {
              "default": 0.2,
              "format": "double",
              "type": "number",
              "x-go-name": "AccelerationMaxLong",
              "x-order": "63"
            },
            "x-go-name": "AccelerationMaxLong",
            "x-order": "63"
          },
          {
            "description": "The maximum acceleration value for short positions.",
            "in": "query",
            "name": "acceleration_limit_short",
            "schema": {
              "default": 0.02,
              "format": "double",
              "type": "number",
              "x-go-name": "AccelerationLimitShort",
              "x-order": "64"
            },
            "x-go-name": "AccelerationLimitShort",
            "x-order": "64"
          },
          {
            "description": "The acceleration value for short positions.",
            "in": "query",
            "name": "acceleration_short",
            "schema": {
              "default": 0.02,
              "format": "double",
              "type": "number",
              "x-go-name": "AccelerationShort",
              "x-order": "64"
            },
            "x-go-name": "AccelerationShort",
            "x-order": "64"
          },
          {
            "description": "The highest allowed acceleration for short positions.",
            "in": "query",
            "name": "acceleration_max_short",
            "schema": {
              "default": 0.2,
              "format": "double",
              "type": "number",
              "x-go-name": "AccelerationMaxShort",
              "x-order": "65"
            },
            "x-go-name": "AccelerationMaxShort",
            "x-order": "65"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesSarExt_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "SAREXT",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "790"
      }
    },
    "/sma": {
      "get": {
        "description": "The Simple Moving Average (SMA) is a smoothing indicator that calculates the average price of a security over a specified period, helping traders identify trends and potential support or resistance levels.",
        "operationId": "GetTimeSeriesSma",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesSma_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "SMA",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "800"
      }
    },
    "/splits": {
      "get": {
        "description": "Returns the date and the split factor of shares of the company for the last 10+ years.",
        "operationId": "GetSplits",
        "parameters": [
          {
            "description": "Symbol ticker of instrument. For preffered stocks use dot(.) delimiter. E.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "Range of data to be returned",
            "in": "query",
            "name": "range",
            "schema": {
              "default": "last",
              "enum": [
                "last",
                "1m",
                "3m",
                "6m",
                "ytd",
                "1y",
                "2y",
                "5y",
                "full"
              ],
              "type": "string",
              "x-go-name": "Range",
              "x-order": "70"
            },
            "x-go-name": "Range",
            "x-order": "70"
          },
          {
            "description": "The starting date for data selection. Format `2006-01-02`",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "80"
            },
            "x-go-name": "StartDate",
            "x-order": "80",
            "example": "2020-01-01"
          },
          {
            "description": "The ending date for data selection. Format `2006-01-02`",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "90"
            },
            "x-go-name": "EndDate",
            "x-order": "90",
            "example": "2020-12-31"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSplits_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Splits",
        "tags": [
          "fundamentals"
        ],
        "x-api-credits-cost": "20",
        "x-api-credits-type": "symbol",
        "x-group": "Fundamentals",
        "x-order": "50",
        "x-starting-plan": "Grow"
      }
    },
    "/splits_calendar": {
      "get": {
        "description": "This API method returns split data as a calendar for a given date range. To call custom period, use start_date and end_date parameters.",
        "operationId": "GetSplitsCalendar",
        "parameters": [
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "10"
            },
            "x-go-name": "Exchange",
            "x-order": "10",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "20"
            },
            "x-go-name": "MicCode",
            "x-order": "20",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "30"
            },
            "x-go-name": "Country",
            "x-order": "30",
            "example": "United States"
          },
          {
            "description": "The starting date (inclusive) for filtering split events in the calendar. Format `2006-01-02`",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "40"
            },
            "x-go-name": "StartDate",
            "x-order": "40",
            "example": "2024-01-01"
          },
          {
            "description": "The ending date (inclusive) for filtering split events in the calendar. Format `2006-01-02`",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "50"
            },
            "x-go-name": "EndDate",
            "x-order": "50",
            "example": "2024-12-31"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `500`. Default `100` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 100,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Outputsize",
              "x-order": "60"
            },
            "x-go-name": "Outputsize",
            "x-order": "60"
          },
          {
            "description": "Page number",
            "in": "query",
            "name": "page",
            "schema": {
              "default": "1",
              "type": "string",
              "x-go-name": "Page",
              "x-order": "70"
            },
            "x-go-name": "Page",
            "x-order": "70"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSplitsCalendar_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Splits calendar",
        "tags": [
          "fundamentals"
        ],
        "x-api-credits-cost": "40",
        "x-api-credits-type": "symbol",
        "x-group": "Fundamentals",
        "x-order": "60",
        "x-starting-plan": "Grow"
      }
    },
    "/sqrt": {
      "get": {
        "description": "The Square Root (SQRT) indicator calculates the square root of a given input value, often used in advanced mathematical analysis or calculations in financial markets.",
        "operationId": "GetTimeSeriesSqrt",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesSqrt_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "SQRT",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "810"
      }
    },
    "/statistics": {
      "get": {
        "description": "Returns current overview of company’s main statistics including valuation metrics and financials.",
        "operationId": "GetStatistics",
        "parameters": [
          {
            "description": "Symbol ticker of instrument.\nFor preffered stocks use dot(.) delimiter.\nE.g. `BRK.A` or `BRK.B` will be correct",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG000B9Y5X2"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "31"
            },
            "x-go-name": "Cusip",
            "x-order": "31",
            "example": "594918104"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "Country where instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStatistics_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Statistics",
        "tags": [
          "fundamentals"
        ],
        "x-api-credits-cost": "50",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Fundamentals",
        "x-order": "100",
        "x-starting-plan": "Pro"
      }
    },
    "/stddev": {
      "get": {
        "description": "The Standard Deviation (STDDEV) indicator measures the dispersion of a data series from its mean, often used as a volatility indicator to identify potential trading opportunities and risk management.",
        "operationId": "GetTimeSeriesStdDev",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "63"
            },
            "x-go-name": "TimePeriod",
            "x-order": "63"
          },
          {
            "description": "The standard deviation applied in the calculation.",
            "in": "query",
            "name": "sd",
            "schema": {
              "default": 2,
              "format": "double",
              "type": "number",
              "x-go-name": "StandardDeviation",
              "x-order": "61"
            },
            "x-go-name": "StandardDeviation",
            "x-order": "61"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesStdDev_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "STDDEV",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Statistic Functions",
        "x-order": "820"
      }
    },
    "/stoch": {
      "get": {
        "description": "The Stochastic Oscillator (STOCH) is a momentum indicator that compares a security's closing price to its price range over a specified period, helping traders identify potential overbought or oversold conditions and trend reversals.",
        "operationId": "GetTimeSeriesStoch",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "The time period for the fast %K line in the Stochastic Oscillator. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "fast_k_period",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "FastKPeriod",
              "x-order": "61"
            },
            "x-go-name": "FastKPeriod",
            "x-order": "61"
          },
          {
            "description": "The time period for the slow %K line in the Stochastic Oscillator. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "slow_k_period",
            "schema": {
              "default": 1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SlowKPeriod",
              "x-order": "61"
            },
            "x-go-name": "SlowKPeriod",
            "x-order": "61"
          },
          {
            "description": "The time period for the slow %D line in the Stochastic Oscillator. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "slow_d_period",
            "schema": {
              "default": 3,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SlowDPeriod",
              "x-order": "62"
            },
            "x-go-name": "SlowDPeriod",
            "x-order": "62"
          },
          {
            "description": "The type of slow %K Moving Average used. Default is SMA.",
            "in": "query",
            "name": "slow_kma_type",
            "schema": {
              "default": "SMA",
              "enum": [
                "SMA",
                "EMA",
                "WMA",
                "DEMA",
                "TEMA",
                "TRIMA",
                "KAMA",
                "MAMA",
                "T3MA"
              ],
              "type": "string",
              "x-go-name": "SlowKMAType",
              "x-order": "63"
            },
            "x-go-name": "SlowKMAType",
            "x-order": "63"
          },
          {
            "description": "The type of slow Displaced Moving Average used. Default is SMA.",
            "in": "query",
            "name": "slow_dma_type",
            "schema": {
              "default": "SMA",
              "enum": [
                "SMA",
                "EMA",
                "WMA",
                "DEMA",
                "TEMA",
                "TRIMA",
                "KAMA",
                "MAMA",
                "T3MA"
              ],
              "type": "string",
              "x-go-name": "SlowDMAType",
              "x-order": "64"
            },
            "x-go-name": "SlowDMAType",
            "x-order": "64"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesStoch_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "STOCH",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "830"
      }
    },
    "/stochf": {
      "get": {
        "description": "The Stochastic Fast (STOCHF) is a variation of the Stochastic Oscillator, using fewer periods for calculation, making it more responsive to price changes but also more prone to false signals.",
        "operationId": "GetTimeSeriesStochF",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "The time period for the fast %K line in the Stochastic Oscillator. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "fast_k_period",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "FastKPeriod",
              "x-order": "61"
            },
            "x-go-name": "FastKPeriod",
            "x-order": "61"
          },
          {
            "description": "The time period for the fast %D line in the Stochastic Oscillator. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "fast_d_period",
            "schema": {
              "default": 3,
              "format": "int64",
              "type": "integer",
              "x-go-name": "FastDPeriod",
              "x-order": "62"
            },
            "x-go-name": "FastDPeriod",
            "x-order": "62"
          },
          {
            "description": "The type of fast Displaced Moving Average used.",
            "in": "query",
            "name": "fast_dma_type",
            "schema": {
              "default": "SMA",
              "enum": [
                "SMA",
                "EMA",
                "WMA",
                "DEMA",
                "TEMA",
                "TRIMA",
                "KAMA",
                "MAMA",
                "T3MA"
              ],
              "type": "string",
              "x-go-name": "FastDMAType",
              "x-order": "63"
            },
            "x-go-name": "FastDMAType",
            "x-order": "63"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesStochF_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "STOCHF",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "840"
      }
    },
    "/stochrsi": {
      "get": {
        "description": "The Stochastic RSI (STOCHRSI) is an oscillator that applies the Stochastic formula to RSI values, providing a more sensitive indicator for identifying overbought or oversold conditions and potential trend reversals.",
        "operationId": "GetTimeSeriesStochRsi",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Specifies the price data type: open, high, low, or close.",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "open",
                "high",
                "low",
                "close"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "63"
            },
            "x-go-name": "SeriesType",
            "x-order": "63"
          },
          {
            "description": "Length of period for calculating the RSI component. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "rsi_length",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "64"
            },
            "x-go-name": "TimePeriod",
            "x-order": "64"
          },
          {
            "description": "Period length for computing the stochastic oscillator of the RSI. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "stoch_length",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "FastKPeriod",
              "x-order": "61"
            },
            "x-go-name": "FastKPeriod",
            "x-order": "61"
          },
          {
            "description": "Period for smoothing the %K line. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "k_period",
            "schema": {
              "default": 3,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SlowKPeriod",
              "x-order": "61"
            },
            "x-go-name": "SlowKPeriod",
            "x-order": "61"
          },
          {
            "in": "query",
            "name": "slow_kma_type",
            "schema": {
              "type": "string",
              "x-go-name": "SlowKMAType"
            },
            "x-go-name": "SlowKMAType"
          },
          {
            "description": "Period for smoothing the %D line, which is a moving average of %K. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "d_period",
            "schema": {
              "default": 3,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SlowDPeriod",
              "x-order": "62"
            },
            "x-go-name": "SlowDPeriod",
            "x-order": "62"
          },
          {
            "in": "query",
            "name": "slow_dma_type",
            "schema": {
              "type": "string",
              "x-go-name": "SlowDMAType"
            },
            "x-go-name": "SlowDMAType"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesStochRsi_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "STOCHRSI",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "850"
      }
    },
    "/stocks": {
      "get": {
        "description": "This API call returns an array of symbols available at Twelve Data API. This list is updated daily.",
        "operationId": "GetStocks",
        "parameters": [
          {
            "description": "The ticker symbol of an instrument for which data is requested",
            "in": "query",
            "name": "symbol",
            "schema": {
              "type": "string",
              "x-go-name": "Symbol"
            },
            "x-go-name": "Symbol",
            "example": "AAPL"
          },
          {
            "description": "Filter by financial instrument global identifier (FIGI)",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi"
            },
            "x-go-name": "Figi",
            "example": "BBG000B9Y5X2"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin"
            },
            "x-go-name": "Isin",
            "example": "US0378331005"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip"
            },
            "x-go-name": "Cusip",
            "example": "594918104"
          },
          {
            "description": "Filter by exchange name",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange"
            },
            "x-go-name": "Exchange",
            "example": "NASDAQ"
          },
          {
            "description": "Filter by market identifier code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode"
            },
            "x-go-name": "MicCode",
            "example": "XNGS"
          },
          {
            "description": "Filter by country name or alpha code, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country"
            },
            "x-go-name": "Country",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Index",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type"
            },
            "x-go-name": "Type",
            "example": "Common Stock"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format"
            },
            "x-go-name": "Format"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter"
            },
            "x-go-name": "Delimiter"
          },
          {
            "description": "Adds info on which plan symbol is available",
            "in": "query",
            "name": "show_plan",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "ShowPlan"
            },
            "x-go-name": "ShowPlan"
          },
          {
            "description": "Include delisted identifiers",
            "in": "query",
            "name": "include_delisted",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeDelisted"
            },
            "x-go-name": "IncludeDelisted"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStocks_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Stocks list",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Reference data",
        "x-order": "10"
      }
    },
    "/sub": {
      "get": {
        "description": "The Subtraction (SUB) indicator performs arithmetic subtraction of two input data series, typically used to combine or normalize multiple technical indicators or price data.",
        "operationId": "GetTimeSeriesSub",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type used as the first part of technical indicator",
            "in": "query",
            "name": "series_type_1",
            "schema": {
              "default": "open",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType1",
              "x-order": "62"
            },
            "x-go-name": "SeriesType1",
            "x-order": "62"
          },
          {
            "description": "Price type used as the second part of technical indicator",
            "in": "query",
            "name": "series_type_2",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType2",
              "x-order": "63"
            },
            "x-go-name": "SeriesType2",
            "x-order": "63"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesSub_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "SUB",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "860"
      }
    },
    "/sum": {
      "get": {
        "description": "The Summation (SUM) indicator calculates the sum of a data series over a specified period, often used in conjunction with other indicators for data analysis or calculation purposes.",
        "operationId": "GetTimeSeriesSum",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "62"
            },
            "x-go-name": "SeriesType",
            "x-order": "62"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesSum_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "SUM",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "870"
      }
    },
    "/supertrend": {
      "get": {
        "description": "The Supertrend indicator is a trend-following tool that uses a combination of price, time, and volatility to generate potential entry and exit points in trending markets.",
        "operationId": "GetTimeSeriesSuperTrend",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "The period used for calculation in the indicator. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "period",
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Period",
              "x-order": "61"
            },
            "x-go-name": "Period",
            "x-order": "61"
          },
          {
            "description": "The factor used to adjust the indicator's sensitivity.",
            "in": "query",
            "name": "multiplier",
            "schema": {
              "default": 3,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Multiplier",
              "x-order": "62"
            },
            "x-go-name": "Multiplier",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesSuperTrend_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "SUPERTREND",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Volatility Indicators",
        "x-order": "880"
      }
    },
    "/supertrend_heikinashicandles": {
      "get": {
        "description": "The Supertrend and Heikin Ashi Candles indicator delivers a combined analysis of trend-following signals and smoothed price action visualization, widely used for identifying trends and potential entry or exit points in trading.",
        "operationId": "GetTimeSeriesSuperTrendHeikinAshiCandles",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "The period used for calculation in the indicator. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "period",
            "schema": {
              "default": 10,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Period",
              "x-order": "61"
            },
            "x-go-name": "Period",
            "x-order": "61"
          },
          {
            "description": "The factor used to adjust the indicator's sensitivity.",
            "in": "query",
            "name": "multiplier",
            "schema": {
              "default": 3,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Multiplier",
              "x-order": "62"
            },
            "x-go-name": "Multiplier",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesSuperTrendHeikinAshiCandles_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "SUPERTREND HEIKINASHICANDLES",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Volatility Indicators",
        "x-order": "890",
        "x-starting-plan": "Grow"
      }
    },
    "/symbol_search": {
      "get": {
        "description": "This method helps to find the best matching symbol. It can be used as the base for custom lookups. The response is returned in descending order, with the most relevant instrument at the beginning.",
        "operationId": "GetSymbolSearch",
        "parameters": [
          {
            "description": "Symbol to search. Supports:\n<ul>\n<li>Ticker symbol of instrument.</li>\n<li>International securities identification number (ISIN).\n<li>Financial instrument global identifier (FIGI).\n<li>Composite FIGI.</li>\n<li>Share Class FIGI.</li>\n</ul>",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Number of matches in response. Max <code>120</code>",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "maximum": 120,
              "type": "integer",
              "x-go-name": "Outputsize",
              "x-order": "30"
            },
            "x-go-name": "Outputsize",
            "x-order": "30"
          },
          {
            "description": "Adds info on which plan symbol is available.",
            "in": "query",
            "name": "show_plan",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "ShowPlan",
              "x-order": "40"
            },
            "x-go-name": "ShowPlan",
            "x-order": "40"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSymbolSearch_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Symbol search",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-badge": "High demand",
        "x-group": "Reference data",
        "x-order": "170"
      }
    },
    "/t3ma": {
      "get": {
        "description": "The Triple Exponential Moving Average (T3MA) is a smoothing indicator that applies three exponential moving averages to price data, reducing lag and providing a more accurate representation of trends.",
        "operationId": "GetTimeSeriesT3ma",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "The factor used to adjust the indicator's volatility. Takes values in the range from `0` to `1`",
            "in": "query",
            "name": "v_factor",
            "schema": {
              "default": 0.7,
              "format": "double",
              "type": "number",
              "x-go-name": "VFactor",
              "x-order": "63"
            },
            "x-go-name": "VFactor",
            "x-order": "63"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesT3ma_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "T3MA",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "900"
      }
    },
    "/tax_info": {
      "get": {
        "description": "This API endpoint returns tax information for the instrument.",
        "operationId": "GetTaxInfo",
        "parameters": [
          {
            "description": "The ticker symbol of an instrument for which data is requested, e.g., `SKYQ`, `AIRE`, `ALM:BME`, `HSI:HKEX`.",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "SKYQ"
          },
          {
            "description": "The ISIN of an instrument for which data is requested",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "30"
            },
            "x-go-name": "Isin",
            "x-order": "30",
            "example": "US5949181045"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG019XJT9D6"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "25"
            },
            "x-go-name": "Cusip",
            "x-order": "25",
            "example": "594918104"
          },
          {
            "description": "The exchange name where the instrument is traded, e.g., `Nasdaq`, `Euronext`",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "Nasdaq"
          },
          {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded, e.g., `XNAS`, `XLON`",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaxInfo_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Tax information",
        "tags": [
          "regulatory"
        ],
        "x-api-credits-cost": "50",
        "x-api-credits-type": "symbol",
        "x-group": "Regulatory",
        "x-order": "10",
        "x-starting-plan": "Ultra",
        "x-url-hash": "tax_info"
      }
    },
    "/technical_indicators": {
      "get": {
        "description": "This API call returns an array of objects with available technical indicators. This endpoint might be used to build an abstract interface to make more convenient API calls from the application.",
        "operationId": "GetTechnicalIndicators",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTechnicalIndicators_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Technical indicators interface",
        "tags": [
          "reference_data"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "request",
        "x-group": "Reference data",
        "x-order": "150",
        "x-url-hash": "technical-indicators-interface"
      }
    },
    "/tema": {
      "get": {
        "description": "The Triple Exponential Moving Average (TEMA) is a smoothing indicator that applies three exponential moving averages to price data, reducing lag and providing a more accurate representation of trends.",
        "operationId": "GetTimeSeriesTema",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "The time period used for calculation in the indicator. Default is 9.",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesTema_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "TEMA",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "910"
      }
    },
    "/time_series": {
      "get": {
        "description": "This API call returns meta and time series for the requested instrument. Metaobject consists of general information about the requested symbol. Time series is the array of objects ordered by time descending with Open, High, Low, Close prices. Non-currency instruments also include volume information.",
        "operationId": "GetTimeSeries",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeries_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Time series",
        "tags": [
          "market_data",
          "time_series"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-badge": "High demand",
        "x-group": "Core data",
        "x-order": "10"
      }
    },
    "/time_series/cross": {
      "get": {
        "description": "This API call returns meta and cross rate time series for the requested instruments. Metaobject consists of general information about the requested symbol. Time series is the array of objects ordered by time descending with Open, High, Low, Close prices. Works with stocks, forex and cryptocurrency.",
        "operationId": "GetTimeSeriesCross",
        "parameters": [
          {
            "description": "Base currency symbol",
            "in": "query",
            "name": "base",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Base"
            },
            "x-go-name": "Base",
            "example": "JPY"
          },
          {
            "description": "Base instrument type according to the `/instrument_type` endpoint",
            "in": "query",
            "name": "base_type",
            "schema": {
              "type": "string",
              "x-go-name": "BaseType"
            },
            "x-go-name": "BaseType",
            "example": "Physical Currency"
          },
          {
            "description": "Base exchange",
            "in": "query",
            "name": "base_exchange",
            "schema": {
              "type": "string",
              "x-go-name": "BaseExchange"
            },
            "x-go-name": "BaseExchange",
            "example": "Binance"
          },
          {
            "description": "Base MIC code",
            "in": "query",
            "name": "base_mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "BaseMicCode"
            },
            "x-go-name": "BaseMicCode",
            "example": "XNGS"
          },
          {
            "description": "Quote currency symbol",
            "in": "query",
            "name": "quote",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Quote"
            },
            "x-go-name": "Quote",
            "example": "BTC"
          },
          {
            "description": "Quote instrument type according to the `/instrument_type` endpoint",
            "in": "query",
            "name": "quote_type",
            "schema": {
              "type": "string",
              "x-go-name": "QuoteType"
            },
            "x-go-name": "QuoteType",
            "example": "Digital Currency"
          },
          {
            "description": "Quote exchange",
            "in": "query",
            "name": "quote_exchange",
            "schema": {
              "type": "string",
              "x-go-name": "QuoteExchange"
            },
            "x-go-name": "QuoteExchange",
            "example": "Coinbase"
          },
          {
            "description": "Quote MIC code",
            "in": "query",
            "name": "quote_mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "QuoteMicCode"
            },
            "x-go-name": "QuoteMicCode",
            "example": "XNYS"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval"
            },
            "x-go-name": "Interval",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "format": "int64",
              "type": "integer",
              "x-go-name": "OutputSize"
            },
            "x-go-name": "OutputSize",
            "example": 30
          },
          {
            "description": "Format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format"
            },
            "x-go-name": "Format",
            "example": "JSON"
          },
          {
            "description": "Delimiter used in CSV file",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter"
            },
            "x-go-name": "Delimiter",
            "example": ";"
          },
          {
            "description": "Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume.",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PrePost"
            },
            "x-go-name": "PrePost"
          },
          {
            "description": "Start date for the time series data",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate"
            },
            "x-go-name": "StartDate",
            "example": "2025-01-01"
          },
          {
            "description": "End date for the time series data",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate"
            },
            "x-go-name": "EndDate",
            "example": "2025-01-31"
          },
          {
            "description": "Specifies if there should be an adjustment",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": true,
              "type": "boolean",
              "x-go-name": "Adjust"
            },
            "x-go-name": "Adjust"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": 5,
              "format": "int64",
              "type": "integer",
              "x-go-name": "Dp"
            },
            "x-go-name": "Dp",
            "example": 5
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a>.</li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "type": "string",
              "x-go-name": "Timezone"
            },
            "x-go-name": "Timezone",
            "example": "UTC"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesCross_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "Time series cross",
        "tags": [
          "market_data",
          "time_series"
        ],
        "x-api-credits-cost": "5",
        "x-api-credits-type": "symbol",
        "x-group": "Core data",
        "x-order": "20"
      }
    },
    "/trange": {
      "get": {
        "description": "The True Range (TRANGE) indicator measures the range of price movement over a specified period, providing a volatility measure that helps traders identify potential trading opportunities and risk management.",
        "operationId": "GetTimeSeriesTRange",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesTRange_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "TRANGE",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Volatility Indicators",
        "x-order": "920"
      }
    },
    "/trima": {
      "get": {
        "description": "The Triangular Moving Average (TRIMA) is a smoothing indicator that calculates the average price of a security over a specified period, weighting prices in the middle of the range more heavily, providing a balanced view of price action.",
        "operationId": "GetTimeSeriesTrima",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesTrima_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "TRIMA",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "930"
      }
    },
    "/tsf": {
      "get": {
        "description": "The Time Series Forecast (TSF) indicator projects future price levels based on linear regression analysis, helping traders identify potential support, resistance, and trend direction.",
        "operationId": "GetTimeSeriesTsf",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesTsf_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "TSF",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Statistic Functions",
        "x-order": "940"
      }
    },
    "/typprice": {
      "get": {
        "description": "The Typical Price (TYPPRICE) indicator calculates the average of a security's high, low, and close prices, providing a simplified view of price action.",
        "operationId": "GetTimeSeriesTypPrice",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesTypPrice_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "TYPPRICE",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "950"
      }
    },
    "/ultosc": {
      "get": {
        "description": "The Ultimate Oscillator (ULTOSC) is a momentum oscillator that combines short, intermediate, and long-term price action to identify potential overbought or oversold conditions and trend reversals.",
        "operationId": "GetTimeSeriesUltOsc",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "The first time period used for calculation in the indicator. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period_1",
            "schema": {
              "default": 7,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod1",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod1",
            "x-order": "62"
          },
          {
            "description": "The second time period used for calculation in the indicator. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period_2",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod2",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod2",
            "x-order": "62"
          },
          {
            "description": "The third time period used for calculation in the indicator. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period_3",
            "schema": {
              "default": 28,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod3",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod3",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesUltOsc_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "ULTOSC",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "960"
      }
    },
    "/var": {
      "get": {
        "description": "The Variance (VAR) indicator measures the dispersion of a data series from its mean, often used as a volatility indicator to identify potential trading opportunities and risk management.",
        "operationId": "GetTimeSeriesVar",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesVar_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "VAR",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Statistic Functions",
        "x-order": "960"
      }
    },
    "/vwap": {
      "get": {
        "description": "The Volume Weighted Average Price (VWAP) indicator offers an insightful measure of the average trading price weighted by volume, commonly used for trading analysis and execution evaluation.",
        "operationId": "GetTimeSeriesVwap",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "The time period for the standard deviation calculation. Must be greater than `0`. Recommended value is `9`.\nThis parameter is only used together with `sd`.",
            "in": "query",
            "name": "sd_time_period",
            "schema": {
              "default": 0,
              "format": "int64",
              "type": "integer",
              "x-go-name": "SDTimePeriod",
              "x-order": "62"
            },
            "x-go-name": "SDTimePeriod",
            "x-order": "62"
          },
          {
            "description": "The standard deviation applied in the calculation. Must be greater than `0`. Recommended value is `2`.\nThis parameter is only used together with `sd_time_period`.",
            "in": "query",
            "name": "sd",
            "schema": {
              "default": 0,
              "format": "double",
              "type": "number",
              "x-go-name": "StandardDeviation",
              "x-order": "61"
            },
            "x-go-name": "StandardDeviation",
            "x-order": "61"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesVwap_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "VWAP",
        "tags": [
          "technical_indicator"
        ],
        "x-additional-notes": "Take note that this endpoint is applicable to all instruments except currencies.",
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "970"
      }
    },
    "/wclprice": {
      "get": {
        "description": "The Weighted Close Price (WCLPRICE) indicator calculates the average of a security's high, low, and close prices, with extra weight given to the close price, providing a balanced view of price action.",
        "operationId": "GetTimeSeriesWclPrice",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesWclPrice_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "WCLPRICE",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Price Transform",
        "x-order": "980"
      }
    },
    "/willr": {
      "get": {
        "description": "The Williams %R (WILLR) is a momentum oscillator that measures the level of a security's closing price in relation to the high and low range over a specified period, helping traders identify potential overbought or oversold conditions and trend reversals.",
        "operationId": "GetTimeSeriesWillR",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 14,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesWillR_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "WILLR",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Momentum Indicators",
        "x-order": "990"
      }
    },
    "/wma": {
      "get": {
        "description": "The Weighted Moving Average (WMA) is a smoothing indicator that calculates the average price of a security over a specified period, with more weight given to recent prices, providing a more responsive view of price action.",
        "operationId": "GetTimeSeriesWma",
        "parameters": [
          {
            "description": "Symbol ticker of the instrument. E.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
            "in": "query",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "x-go-name": "Symbol",
              "x-order": "10"
            },
            "x-go-name": "Symbol",
            "x-order": "10",
            "example": "AAPL"
          },
          {
            "description": "Filter by international securities identification number (ISIN)",
            "in": "query",
            "name": "isin",
            "schema": {
              "type": "string",
              "x-go-name": "Isin",
              "x-order": "25"
            },
            "x-go-name": "Isin",
            "x-order": "25",
            "example": "US0378331005"
          },
          {
            "description": "The FIGI of an instrument for which data is requested",
            "in": "query",
            "name": "figi",
            "schema": {
              "type": "string",
              "x-go-name": "Figi",
              "x-order": "20"
            },
            "x-go-name": "Figi",
            "x-order": "20",
            "example": "BBG01293F5X4"
          },
          {
            "description": "The CUSIP of an instrument for which data is requested",
            "in": "query",
            "name": "cusip",
            "schema": {
              "type": "string",
              "x-go-name": "Cusip",
              "x-order": "26"
            },
            "x-go-name": "Cusip",
            "x-order": "26",
            "example": "594918104"
          },
          {
            "description": "Interval between two consecutive points in time series",
            "in": "query",
            "name": "interval",
            "required": true,
            "schema": {
              "enum": [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "5h",
                "1day",
                "1week",
                "1month"
              ],
              "type": "string",
              "x-go-name": "Interval",
              "x-order": "30"
            },
            "x-go-name": "Interval",
            "x-order": "30",
            "example": "1min"
          },
          {
            "description": "Number of data points to retrieve. Supports values in the range from `1` to `5000`. Default `30` when no date parameters are set, otherwise set to maximum",
            "in": "query",
            "name": "outputsize",
            "schema": {
              "default": 30,
              "format": "int64",
              "type": "integer",
              "x-go-name": "PageSize",
              "x-order": "80"
            },
            "x-go-name": "PageSize",
            "x-order": "80"
          },
          {
            "description": "Exchange where instrument is traded",
            "in": "query",
            "name": "exchange",
            "schema": {
              "type": "string",
              "x-go-name": "Exchange",
              "x-order": "40"
            },
            "x-go-name": "Exchange",
            "x-order": "40",
            "example": "NASDAQ"
          },
          {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "in": "query",
            "name": "mic_code",
            "schema": {
              "type": "string",
              "x-go-name": "MicCode",
              "x-order": "50"
            },
            "x-go-name": "MicCode",
            "x-order": "50",
            "example": "XNAS"
          },
          {
            "description": "The country where the instrument is traded, e.g., `United States` or `US`",
            "in": "query",
            "name": "country",
            "schema": {
              "type": "string",
              "x-go-name": "Country",
              "x-order": "60"
            },
            "x-go-name": "Country",
            "x-order": "60",
            "example": "United States"
          },
          {
            "description": "The asset class to which the instrument belongs",
            "in": "query",
            "name": "type",
            "schema": {
              "enum": [
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Limited Partnership",
                "Mutual Fund",
                "Physical Currency",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ],
              "type": "string",
              "x-go-name": "Type",
              "x-order": "70"
            },
            "x-go-name": "Type",
            "x-order": "70",
            "example": "Common Stock"
          },
          {
            "description": "Timezone at which output datetime will be displayed. Supports:\n<ul>\n<li>1. <code>Exchange</code> for local exchange time</li>\n<li>2. <code>UTC</code> for datetime at universal UTC standard</li>\n<li>3. Timezone name according to the IANA Time Zone Database. E.g. <code>America/New_York</code>, <code>Asia/Singapore</code>. Full list of timezones can be found <a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\" target=\"blank\">here</a></li>\n</ul>\n<i>Take note that the IANA Timezone name is case-sensitive</i>",
            "in": "query",
            "name": "timezone",
            "schema": {
              "default": "Exchange",
              "type": "string",
              "x-go-name": "Timezone",
              "x-order": "135"
            },
            "x-go-name": "Timezone",
            "x-order": "135"
          },
          {
            "description": "Can be used separately and together with `end_date`. Format `2006-01-02` or `2006-01-02 15:04:05`\n\nDefault location:\n<ul>\n<li>Forex and Cryptocurrencies - <code>UTC</code></li>\n<li>Stocks - where exchange is located (e.g. for AAPL it will be <code>America/New_York</code>)</li>\n</ul>\nBoth parameters take into account if <code>timezone</code> parameter is provided.<br/>\nIf <code>timezone</code> is given then, <code>start_date</code> and <code>end_date</code> will be used in the specified location\n\nExamples:\n<ul>\n<li>1. <code>&symbol=AAPL&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 New York time up to current date</li>\n<li>2. <code>&symbol=EUR/USD&timezone=Asia/Singapore&start_date=2019-08-09 15:50:00&…</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Singapore time up to current date</li>\n<li>3. <code>&symbol=ETH/BTC&timezone=Europe/Zurich&start_date=2019-08-09 15:50:00&end_date=2019-08-09 15:55:00&...</code><br/>\nReturns all records starting from 2019-08-09 15:50:00 Zurich time up to 2019-08-09 15:55:00</li>\n</ul>",
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "x-go-name": "StartDate",
              "x-order": "150"
            },
            "x-go-name": "StartDate",
            "x-order": "150",
            "example": "2024-08-22 15:04:05"
          },
          {
            "description": "The ending date and time for data selection, see `start_date` description for details.",
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "x-go-name": "EndDate",
              "x-order": "160"
            },
            "x-go-name": "EndDate",
            "x-order": "160",
            "example": "2024-08-22 16:04:05"
          },
          {
            "description": "Specifies the exact date to get the data for. Could be the exact date, e.g. `2021-10-27`, or in human language `today` or `yesterday`",
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string",
              "x-go-name": "Date",
              "x-order": "140"
            },
            "x-go-name": "Date",
            "x-order": "140",
            "example": "2021-10-27"
          },
          {
            "description": "Sorting order of the output",
            "in": "query",
            "name": "order",
            "schema": {
              "default": "desc",
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string",
              "x-go-name": "Order",
              "x-order": "130"
            },
            "x-go-name": "Order",
            "x-order": "130"
          },
          {
            "description": "Returns quotes that include pre-market and post-market data. Only for `Pro` and above plans.\nAvailable at the `1min`, `5min`, `15min`, and `30min` intervals for all US equities.\nOpen, high, low, close values are supplied without volume",
            "in": "query",
            "name": "prepost",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "Prepost",
              "x-order": "110"
            },
            "x-go-name": "Prepost",
            "x-order": "110"
          },
          {
            "description": "The format of the response data",
            "in": "query",
            "name": "format",
            "schema": {
              "default": "JSON",
              "enum": [
                "JSON",
                "CSV"
              ],
              "type": "string",
              "x-go-name": "Format",
              "x-order": "90"
            },
            "x-go-name": "Format",
            "x-order": "90"
          },
          {
            "description": "The separator used in the CSV response data",
            "in": "query",
            "name": "delimiter",
            "schema": {
              "default": ";",
              "type": "string",
              "x-go-name": "Delimiter",
              "x-order": "100"
            },
            "x-go-name": "Delimiter",
            "x-order": "100"
          },
          {
            "description": "Specifies the number of decimal places for floating values.\nShould be in range [0, 11] inclusive.\nBy default, the number of decimal places is automatically determined based on the values provided",
            "in": "query",
            "name": "dp",
            "schema": {
              "default": -1,
              "format": "int64",
              "type": "integer",
              "x-go-name": "DecimalPlaces",
              "x-order": "120"
            },
            "x-go-name": "DecimalPlaces",
            "x-order": "120"
          },
          {
            "description": "A boolean parameter to include the previous closing price in the time_series data. If true, adds previous bar close price value to the current object",
            "in": "query",
            "name": "previous_close",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "PreviousPrice",
              "x-order": "170"
            },
            "x-go-name": "PreviousPrice",
            "x-order": "170"
          },
          {
            "description": "Adjusting mode for prices",
            "in": "query",
            "name": "adjust",
            "schema": {
              "default": "splits",
              "enum": [
                "all",
                "splits",
                "dividends",
                "none"
              ],
              "type": "string",
              "x-go-name": "Adjust",
              "x-order": "180"
            },
            "x-go-name": "Adjust",
            "x-order": "180"
          },
          {
            "description": "Price type on which technical indicator is calculated",
            "in": "query",
            "name": "series_type",
            "schema": {
              "default": "close",
              "enum": [
                "close",
                "open",
                "high",
                "low",
                "volume"
              ],
              "type": "string",
              "x-go-name": "SeriesType",
              "x-order": "61"
            },
            "x-go-name": "SeriesType",
            "x-order": "61"
          },
          {
            "description": "Number of periods to average over. Takes values in the range from `1` to `800`",
            "in": "query",
            "name": "time_period",
            "schema": {
              "default": 9,
              "format": "int64",
              "type": "integer",
              "x-go-name": "TimePeriod",
              "x-order": "62"
            },
            "x-go-name": "TimePeriod",
            "x-order": "62"
          },
          {
            "description": "Specify if OHLC values should be added in the output",
            "in": "query",
            "name": "include_ohlc",
            "schema": {
              "default": false,
              "type": "boolean",
              "x-go-name": "IncludeOHLC",
              "x-order": "132"
            },
            "x-go-name": "IncludeOHLC",
            "x-order": "132"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTimeSeriesWma_200_response"
                }
              }
            },
            "description": ""
          }
        },
        "summary": "WMA",
        "tags": [
          "technical_indicator"
        ],
        "x-api-credits-cost": "1",
        "x-api-credits-type": "symbol",
        "x-group": "Technical indicators/Overlap Studies",
        "x-order": "1000"
      }
    }
  },
  "components": {
    "responses": {
      "ApiUsageResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetApiUsage_200_response"
            }
          }
        },
        "description": ""
      },
      "BatchResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/advanced_200_response"
            }
          }
        },
        "description": ""
      },
      "BondsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetBonds_200_response"
            }
          }
        },
        "description": ""
      },
      "CommoditiesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetCommodities_200_response"
            }
          }
        },
        "description": ""
      },
      "CrossListingsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetCrossListings_200_response"
            }
          }
        },
        "description": ""
      },
      "CryptocurrenciesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetCryptocurrencies_200_response"
            }
          }
        },
        "description": ""
      },
      "CryptocurrencyExchangesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetCryptocurrencyExchanges_200_response"
            }
          }
        },
        "description": ""
      },
      "CurrencyConversionResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetCurrencyConversion_200_response"
            }
          }
        },
        "description": ""
      },
      "ETFsFamilyResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetETFsFamily_200_response"
            }
          }
        },
        "description": ""
      },
      "ETFsListResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetETFsList_200_response"
            }
          }
        },
        "description": ""
      },
      "ETFsTypeResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetETFsType_200_response"
            }
          }
        },
        "description": ""
      },
      "EarliestTimestampResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetEarliestTimestamp_200_response"
            }
          }
        },
        "description": ""
      },
      "EarningsCalendarResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetEarningsCalendar_200_response"
            }
          }
        },
        "description": ""
      },
      "EarningsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetEarnings_200_response"
            }
          }
        },
        "description": ""
      },
      "EodResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetEod_200_response"
            }
          }
        },
        "description": ""
      },
      "EtfResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetEtf_200_response"
            }
          }
        },
        "description": ""
      },
      "ExchangeRateResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetExchangeRate_200_response"
            }
          }
        },
        "description": ""
      },
      "ExchangeScheduleResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetExchangeSchedule_200_response"
            }
          }
        },
        "description": ""
      },
      "ExchangesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetExchanges_200_response"
            }
          }
        },
        "description": ""
      },
      "ForexResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetForexPairs_200_response"
            }
          }
        },
        "description": ""
      },
      "FundsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetFunds_200_response"
            }
          }
        },
        "description": ""
      },
      "GetAssetsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object"
            }
          }
        },
        "description": ""
      },
      "GetCountriesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetCountries_200_response"
            }
          }
        },
        "description": ""
      },
      "GetInstrumentTypeResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetInstrumentType_200_response"
            }
          }
        },
        "description": ""
      },
      "IndicesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_1"
            }
          }
        },
        "description": ""
      },
      "IntervalsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetIntervals_200_response"
            }
          }
        },
        "description": ""
      },
      "MarketMoversResponseValue": {
        "content": {},
        "description": "",
        "headers": {
          "volume": {
            "description": "The trading volume of the symbol today",
            "schema": {
              "examples": [
                108297
              ],
              "format": "int64",
              "type": "integer"
            }
          },
          "symbol": {
            "description": "The exchange symbol ticker",
            "schema": {
              "examples": [
                "BSET"
              ],
              "type": "string"
            }
          },
          "datetime": {
            "description": "The last updated datetime timestamp",
            "schema": {
              "examples": [
                "2023-10-01T12:00:00Z"
              ],
              "type": "string"
            }
          },
          "high": {
            "description": "The highest price for the symbol today",
            "schema": {
              "examples": [
                18
              ],
              "format": "double",
              "type": "number"
            }
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "schema": {
              "examples": [
                "XNAS"
              ],
              "type": "string"
            }
          },
          "last": {
            "description": "The latest available price for the symbol today",
            "schema": {
              "examples": [
                17.25
              ],
              "format": "double",
              "type": "number"
            }
          },
          "low": {
            "description": "The lowest price for the symbol today",
            "schema": {
              "examples": [
                16.5
              ],
              "format": "double",
              "type": "number"
            }
          },
          "change": {
            "description": "The value of the change since the previous day",
            "schema": {
              "examples": [
                3.31
              ],
              "format": "double",
              "type": "number"
            }
          },
          "name": {
            "description": "The official name of the instrument",
            "schema": {
              "examples": [
                "Bassett Furniture Industries Inc"
              ],
              "type": "string"
            }
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "schema": {
              "examples": [
                "NASDAQ"
              ],
              "type": "string"
            }
          },
          "percent_change": {
            "description": "The percentage change since the previous day",
            "schema": {
              "examples": [
                23.74462
              ],
              "format": "double",
              "type": "number"
            }
          }
        }
      },
      "MarketStateResponse": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/MarketStateResponseItem"
              },
              "type": "array"
            }
          }
        },
        "description": ""
      },
      "MutualFundsFamilyResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetMutualFundsFamily_200_response"
            }
          }
        },
        "description": ""
      },
      "MutualFundsListResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetMutualFundsList_200_response"
            }
          }
        },
        "description": ""
      },
      "MutualFundsTypeResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetMutualFundsType_200_response"
            }
          }
        },
        "description": ""
      },
      "PriceResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetPrice_200_response"
            }
          }
        },
        "description": ""
      },
      "QuoteResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetQuote_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseAnalystRatingsLight": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetAnalystRatingsLight_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseAnalystRatingsUsEquities": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetAnalystRatingsUsEquities_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseBalanceSheet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetBalanceSheet_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseBalanceSheetConsolidated": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetBalanceSheetConsolidated_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseCashFlow": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetCashFlow_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseCashFlowConsolidated": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetCashFlowConsolidated_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseDirectHolders": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetDirectHolders_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseDividends": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetDividends_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseDividendsCalendar": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/DividendsCalendarItem"
              },
              "type": "array"
            }
          }
        },
        "description": ""
      },
      "ResponseETFsWorld": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetETFsWorld_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseETFsWorldComposition": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetETFsWorldComposition_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseETFsWorldPerformance": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetETFsWorldPerformance_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseETFsWorldPurchaseInfo": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_2"
            }
          }
        },
        "description": ""
      },
      "ResponseETFsWorldRatings": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_3"
            }
          }
        },
        "description": ""
      },
      "ResponseETFsWorldRisk": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetETFsWorldRisk_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseETFsWorldSummary": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetETFsWorldSummary_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseETFsWorldSustainability": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_4"
            }
          }
        },
        "description": ""
      },
      "ResponseEarningsEstimates": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetEarningsEstimate_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseEdgarFilingsArchive": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetEdgarFilingsArchive_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseEpsRevisions": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetEpsRevisions_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseEpsTrend": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetEpsTrend_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseFundHolders": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetFundHolders_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseGrowthEstimates": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetGrowthEstimates_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseIncomeStatement": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetIncomeStatement_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseIncomeStatementConsolidated": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetIncomeStatementConsolidated_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseInsiderTransactions": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetInsiderTransactions_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseInstitutionalHolders": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetInstitutionalHolders_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseIpoCalendar": {
        "content": {
          "application/json": {
            "schema": {
              "additionalProperties": {
                "items": {
                  "$ref": "#/components/schemas/GetIpoCalendar_200_response_value_inner"
                },
                "type": "array"
              },
              "type": "object"
            }
          }
        },
        "description": ""
      },
      "ResponseKeyExecutives": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetKeyExecutives_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseLastChanges": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetLastChanges_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseLogo": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetLogo_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseMarketCap": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetMarketCap_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseMarketMovers": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MarketMoversResponseBody"
            }
          }
        },
        "description": ""
      },
      "ResponseMutualFundsWorld": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseMutualFundsWorldComposition": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetMutualFundsWorldComposition_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseMutualFundsWorldPerformance": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetMutualFundsWorldPerformance_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseMutualFundsWorldPurchaseInfo": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetMutualFundsWorldPurchaseInfo_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseMutualFundsWorldRatings": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetMutualFundsWorldRatings_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseMutualFundsWorldRisk": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetMutualFundsWorldRisk_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseMutualFundsWorldSummary": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetMutualFundsWorldSummary_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseMutualFundsWorldSustainability": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetMutualFundsWorldSustainability_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseOptionsChain": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_5"
            }
          }
        },
        "description": ""
      },
      "ResponseOptionsExpiration": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_6"
            }
          }
        },
        "description": ""
      },
      "ResponsePriceTarget": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetPriceTarget_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseProfile": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetProfile_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseRecommendations": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetRecommendations_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseRevenueEstimate": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetRevenueEstimate_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseSourceSanctionedEntities": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetSourceSanctionedEntities_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseSplits": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetSplits_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseSplitsCalendar": {
        "content": {
          "application/json": {
            "schema": {
              "items": {
                "$ref": "#/components/schemas/SplitsCalendarResponseItem"
              },
              "type": "array"
            }
          }
        },
        "description": ""
      },
      "ResponseStatistics": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetStatistics_200_response"
            }
          }
        },
        "description": ""
      },
      "ResponseTaxInfo": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTaxInfo_200_response"
            }
          }
        },
        "description": ""
      },
      "StockExchangesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_7"
            }
          }
        },
        "description": ""
      },
      "StocksResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetStocks_200_response"
            }
          }
        },
        "description": ""
      },
      "SymbolSearchResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetSymbolSearch_200_response"
            }
          }
        },
        "description": ""
      },
      "TechnicalIndicatorsResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTechnicalIndicators_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesCrossResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesCross_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponse": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeries_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseAcos": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_8"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseAd": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesAd_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseAdOsc": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesAdOsc_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseAdd": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesAdd_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseAdx": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesAdx_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseAdxr": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesAdxr_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseApo": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesApo_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseAroon": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesAroon_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseAroonOsc": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesAroonOsc_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseAsin": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_9"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseAtan": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_10"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseAtr": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesAtr_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseAvg": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesAvg_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseAvgPrice": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesAvgPrice_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseBBands": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesBBands_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseBeta": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesBeta_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseBop": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesBop_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseCci": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesCci_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseCeil": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesCeil_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseCmo": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesCmo_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseCoppock": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesCoppock_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseCorrel": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesCorrel_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseCos": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_11"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseCosh": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_12"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseCrsi": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesCrsi_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseDema": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesDema_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseDiv": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesDiv_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseDpo": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesDpo_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseDx": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesDx_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseEma": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesEma_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseExp": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesExp_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseFloor": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesFloor_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseHeikinashiCandles": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesHeikinashiCandles_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseHlc3": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesHlc3_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseHtDcPeriod": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesHtDcPeriod_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseHtDcPhase": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesHtDcPhase_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseHtPhasor": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesHtPhasor_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseHtSine": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesHtSine_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseHtTrendMode": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesHtTrendMode_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseHtTrendline": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesHtTrendline_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseIchimoku": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesIchimoku_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseKama": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesKama_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseKeltner": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesKeltner_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseKst": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesKst_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseLinearReg": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesLinearReg_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseLinearRegAngle": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesLinearRegAngle_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseLinearRegIntercept": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesLinearRegIntercept_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseLinearRegSlope": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesLinearRegSlope_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseLn": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesLn_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseLog10": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesLog10_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMa": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMa_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMaVp": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_13"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMacd": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMacd_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMacdExt": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMacdExt_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMacdSlope": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMacdSlope_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMama": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMama_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMax": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMax_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMaxIndex": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMaxIndex_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMcGinleyDynamic": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMcGinleyDynamic_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMedPrice": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMedPrice_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMfi": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMfi_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMidPoint": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMidPoint_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMidPrice": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMidPrice_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMin": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMin_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMinIndex": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMinIndex_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMinMax": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMinMax_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMinMaxIndex": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMinMaxIndex_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMinusDI": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMinusDI_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMinusDM": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMinusDM_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMom": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMom_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseMult": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesMult_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseNatr": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesNatr_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseObv": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesObv_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponsePercent_B": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesPercent_B_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponsePivotPointsHL": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesPivotPointsHL_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponsePlusDI": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesPlusDI_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponsePlusDM": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesPlusDM_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponsePpo": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesPpo_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseRoc": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesRoc_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseRocp": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesRocp_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseRocr": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesRocr_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseRocr100": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesRocr100_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseRsi": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesRsi_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseRvol": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesRvol_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseSar": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesSar_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseSarExt": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesSarExt_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseSin": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_14"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseSinh": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_15"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseSma": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesSma_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseSqrt": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesSqrt_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseStdDev": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesStdDev_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseStoch": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesStoch_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseStochF": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesStochF_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseStochRsi": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesStochRsi_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseSub": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesSub_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseSum": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesSum_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseSuperTrend": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesSuperTrend_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseSuperTrendHeikinAshiCandles": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesSuperTrendHeikinAshiCandles_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseT3ma": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesT3ma_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseTRange": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesTRange_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseTan": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_16"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseTanh": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/inline_object_17"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseTema": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesTema_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseTrima": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesTrima_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseTsf": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesTsf_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseTypPrice": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesTypPrice_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseUltOsc": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesUltOsc_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseVar": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesVar_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseVwap": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesVwap_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseWclPrice": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesWclPrice_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseWillR": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesWillR_200_response"
            }
          }
        },
        "description": ""
      },
      "TimeSeriesResponseWma": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetTimeSeriesWma_200_response"
            }
          }
        },
        "description": ""
      }
    },
    "schemas": {
      "AssetsInfo": {
        "description": "AssetsInfo represents assets information in the balance sheet",
        "properties": {
          "total_assets": {
            "description": "Total assets",
            "examples": [
              352583000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalAssets",
            "x-order": 10
          },
          "current_assets": {
            "$ref": "#/components/schemas/AssetsInfo_current_assets"
          },
          "non_current_assets": {
            "$ref": "#/components/schemas/AssetsInfo_non_current_assets"
          },
          "liabilities": {
            "$ref": "#/components/schemas/AssetsInfo_liabilities"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "BalanceSheetConsolidatedItem": {
        "description": "Balance sheet for a specific fiscal date",
        "properties": {
          "fiscal_date": {
            "description": "Date of the balance sheet release",
            "examples": [
              "2023-09-30"
            ],
            "type": "string",
            "x-go-name": "FiscalDate",
            "x-order": 10
          },
          "assets": {
            "$ref": "#/components/schemas/AssetsInfo"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "BondResponseItem": {
        "description": "BondResponseItem represents details of a bond",
        "properties": {
          "symbol": {
            "description": "Bond symbol",
            "examples": [
              "US2Y"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Full name of the bond",
            "examples": [
              "US Treasury Yield 2 Years"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "country": {
            "description": "Country where the bond is located",
            "examples": [
              "United States"
            ],
            "type": "string",
            "x-go-name": "Country",
            "x-order": 30
          },
          "currency": {
            "description": "Currency of the bond according to the ISO 4217 standard",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 40
          },
          "exchange": {
            "description": "Exchange where the bond is traded",
            "examples": [
              "NYSE"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 50
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNYS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 60
          },
          "type": {
            "description": "Type of the bond",
            "examples": [
              "Bond"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 70
          },
          "access": {
            "$ref": "#/components/schemas/BondsResponseItemAccess"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "BondsResponseItemAccess": {
        "description": "Info on which plan symbol is available (displayed then `show_plan` is `true`)",
        "properties": {
          "global": {
            "description": "Level of access to the symbol",
            "examples": [
              "Level A"
            ],
            "type": "string",
            "x-go-name": "Global"
          },
          "plan": {
            "description": "The plan name for the symbol",
            "examples": [
              "Grow"
            ],
            "type": "string",
            "x-go-name": "Plan"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "CashFlowData": {
        "description": "CashFlowData represents cash flow data for a specific fiscal date",
        "properties": {
          "fiscal_date": {
            "description": "Fiscal date",
            "examples": [
              "2023-09-30"
            ],
            "type": "string",
            "x-go-name": "FiscalDate",
            "x-order": 10
          },
          "cash_flow_from_operating_activities": {
            "$ref": "#/components/schemas/CashFlowData_cash_flow_from_operating_activities"
          },
          "cash_flow_from_investing_activities": {
            "$ref": "#/components/schemas/CashFlowData_cash_flow_from_investing_activities"
          },
          "cash_flow_from_financing_activities": {
            "$ref": "#/components/schemas/CashFlowData_cash_flow_from_financing_activities"
          },
          "supplemental_data": {
            "$ref": "#/components/schemas/CashFlowData_supplemental_data"
          },
          "foreign_and_domestic_sales": {
            "$ref": "#/components/schemas/CashFlowData_foreign_and_domestic_sales"
          },
          "cash_position": {
            "$ref": "#/components/schemas/CashFlowData_cash_position"
          },
          "direct_method_cash_flow": {
            "$ref": "#/components/schemas/CashFlowData_direct_method_cash_flow"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "CashFlowStruct": {
        "properties": {
          "fiscal_date": {
            "description": "Date of the cash flow release",
            "examples": [
              "2021-12-31"
            ],
            "type": "string",
            "x-go-name": "FiscalDate",
            "x-order": 10
          },
          "quarter": {
            "description": "Fiscal quarter. Visible when `&period=quarterly`",
            "examples": [
              "1"
            ],
            "type": "string",
            "x-go-name": "Quarter",
            "x-order": 20
          },
          "year": {
            "description": "Fiscal year",
            "examples": [
              2022
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Year",
            "x-order": 25
          },
          "operating_activities": {
            "$ref": "#/components/schemas/CashFlowStruct_operating_activities"
          },
          "investing_activities": {
            "$ref": "#/components/schemas/CashFlowStruct_investing_activities"
          },
          "financing_activities": {
            "$ref": "#/components/schemas/CashFlowStruct_financing_activities"
          },
          "end_cash_position": {
            "description": "Returns the amount of cash a company has when adding the change in cash and beginning cash balance for the current fiscal period",
            "examples": [
              38630000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EndCashPosition",
            "x-order": 60
          },
          "income_tax_paid": {
            "description": "Refers to supplemental data about income tax paid",
            "examples": [
              5235000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "IncomeTaxPaid",
            "x-order": 70
          },
          "interest_paid": {
            "description": "Refers to supplemental data about interest paid",
            "examples": [
              531000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InterestPaid",
            "x-order": 80
          },
          "free_cash_flow": {
            "description": "Represents the cash a company generates after accounting for cash outflows to support operations and maintain its capital assets",
            "examples": [
              49769000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FreeCashFlow",
            "x-order": 90
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/model/repository"
      },
      "CommoditiesResponseItem": {
        "description": "CommoditiesResponseItem represents details of a commodity",
        "properties": {
          "symbol": {
            "description": "Currency pair according to ISO 4217 standard codes with slash(/) delimiter",
            "examples": [
              "XAU/USD"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Full name of the instrument",
            "examples": [
              "Gold Spot"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "category": {
            "description": "Category of commodity",
            "examples": [
              "Precious Metal"
            ],
            "type": "string",
            "x-go-name": "Category",
            "x-order": 30
          },
          "description": {
            "description": "Short description of the commodity",
            "type": "string",
            "x-go-name": "Description",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "CountryResponseItem": {
        "description": "CountryResponseItem represents details of a country",
        "properties": {
          "iso2": {
            "description": "Two-letter country code defined in ISO 3166",
            "examples": [
              "US"
            ],
            "type": "string",
            "x-go-name": "Iso2",
            "x-order": 10
          },
          "iso3": {
            "description": "Three-letter country code defined in ISO 3166",
            "examples": [
              "USA"
            ],
            "type": "string",
            "x-go-name": "Iso3",
            "x-order": 20
          },
          "numeric": {
            "description": "Numeric country code defined in ISO 3166",
            "examples": [
              "840"
            ],
            "type": "string",
            "x-go-name": "Numeric",
            "x-order": 30
          },
          "name": {
            "description": "The full name of country",
            "examples": [
              "United States"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 40
          },
          "official_name": {
            "description": "Official name of country",
            "examples": [
              "United States of America"
            ],
            "type": "string",
            "x-go-name": "OfficialName",
            "x-order": 50
          },
          "capital": {
            "description": "Capital of country",
            "examples": [
              "Washington D.C."
            ],
            "type": "string",
            "x-go-name": "Capital",
            "x-order": 60
          },
          "currency": {
            "description": "Currency of country",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "CrossListingsItem": {
        "description": "Represents details of a cross listing",
        "properties": {
          "symbol": {
            "description": "Ticker symbol of instrument",
            "examples": [
              "NVDA"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of symbol",
            "examples": [
              "NVIDIA Corp"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 30
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNGS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "CrossListingsResult": {
        "description": "Represents the result of cross listings",
        "properties": {
          "count": {
            "description": "Number of cross listings found",
            "examples": [
              7
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Count"
          },
          "list": {
            "description": "List of cross listings",
            "items": {
              "$ref": "#/components/schemas/CrossListingsItem"
            },
            "type": "array",
            "x-go-name": "List"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "CrossMeta": {
        "description": "Json object with request general information",
        "properties": {
          "base_instrument": {
            "description": "Base instrument symbol",
            "examples": [
              "JPY/USD"
            ],
            "type": "string",
            "x-go-name": "BaseInstrument",
            "x-order": 10
          },
          "base_currency": {
            "description": "Base currency",
            "type": "string",
            "x-go-name": "BaseCurrency",
            "x-order": 20
          },
          "base_exchange": {
            "description": "Base exchange",
            "examples": [
              "PHYSICAL CURRENCY"
            ],
            "type": "string",
            "x-go-name": "BaseExchange",
            "x-order": 30
          },
          "interval": {
            "description": "Interval between two consecutive points in time series",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 40
          },
          "quote_instrument": {
            "description": "Quote instrument symbol",
            "examples": [
              "BTC/USD"
            ],
            "type": "string",
            "x-go-name": "QuoteInstrument",
            "x-order": 50
          },
          "quote_currency": {
            "description": "Quote currency",
            "type": "string",
            "x-go-name": "QuoteCurrency",
            "x-order": 60
          },
          "quote_exchange": {
            "description": "Quote exchange",
            "examples": [
              "Coinbase Pro"
            ],
            "type": "string",
            "x-go-name": "QuoteExchange",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "CryptocurrencyExchangesResponseItem": {
        "properties": {
          "name": {
            "description": "Name of cryptocurrency exchange",
            "examples": [
              "Binance"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "CryptocurrencyResponseItem": {
        "description": "CryptocurrencyResponseItem represents details of a cryptocurrency",
        "properties": {
          "symbol": {
            "description": "Cryptocurrency pair codes with slash(/) delimiter",
            "examples": [
              "BTC/USD"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "available_exchanges": {
            "description": "List of exchanges where the cryptocurrency is available",
            "examples": [
              [
                "ABCC",
                "Allcoin",
                "BTC-Alpha",
                "BTCTurk",
                "Bibox",
                "n.exchange",
                "p2pb2b",
                "xBTCe"
              ]
            ],
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "AvailableExchanges",
            "x-order": 20
          },
          "currency_base": {
            "description": "Base currency of the cryptocurrency pair",
            "examples": [
              "Bitcoin"
            ],
            "type": "string",
            "x-go-name": "CurrencyBase",
            "x-order": 30
          },
          "currency_quote": {
            "description": "Quote currency of the cryptocurrency pair",
            "examples": [
              "US Dollar"
            ],
            "type": "string",
            "x-go-name": "CurrencyQuote",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "DividendsCalendarItem": {
        "description": "DividendsCalendarItem represents details of a dividend",
        "properties": {
          "symbol": {
            "description": "Ticker symbol of instrument",
            "examples": [
              "MSFT"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNGS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 20
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 30
          },
          "ex_date": {
            "description": "Ex-dividend date",
            "examples": [
              "2024-02-14"
            ],
            "type": "string",
            "x-go-name": "ExDate",
            "x-order": 40
          },
          "amount": {
            "description": "Dividend payment amount",
            "examples": [
              0.75
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Amount",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/model/repository"
      },
      "ETFsListResponseItem": {
        "properties": {
          "symbol": {
            "description": "Instrument symbol (ticker)",
            "examples": [
              "IVV"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Full name of the fund",
            "examples": [
              "iShares Core S&P 500 ETF"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "country": {
            "description": "Country of fund incorporation",
            "examples": [
              "United States"
            ],
            "type": "string",
            "x-go-name": "Country",
            "x-order": 30
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 40
          },
          "fund_family": {
            "description": "Investment company that manages the fund",
            "examples": [
              "iShares"
            ],
            "type": "string",
            "x-go-name": "FundFamily",
            "x-order": 50
          },
          "fund_type": {
            "description": "Type of fund",
            "examples": [
              "Large Blend"
            ],
            "type": "string",
            "x-go-name": "FundType",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "EarningsItem": {
        "properties": {
          "date": {
            "description": "Date of earning release",
            "examples": [
              "2020-04-30"
            ],
            "type": "string",
            "x-go-name": "Date",
            "x-order": 10
          },
          "time": {
            "description": "Time of earning release, can be either of the following values: `Pre Market`, `After Hours`, `Time Not Supplied`",
            "examples": [
              "After Hours"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 20
          },
          "eps_estimate": {
            "description": "Analyst estimate of the future company earning",
            "examples": [
              2.09
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EpsEstimate",
            "x-order": 30
          },
          "eps_actual": {
            "description": "Actual value of reported earning",
            "examples": [
              2.55
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EpsActual",
            "x-order": 40
          },
          "difference": {
            "description": "Delta between `eps_actual` and `eps_estimate`",
            "examples": [
              0.46
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Difference",
            "x-order": 50
          },
          "surprise_prc": {
            "description": "Surprise in the percentage of the `eps_actual` related to `eps_estimate`",
            "examples": [
              22.01
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SurprisePrc",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/model/repository"
      },
      "EdgarFilingFile": {
        "description": "Filing file object",
        "properties": {
          "name": {
            "description": "File name",
            "examples": [
              "primary_doc.html"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "size": {
            "description": "File size",
            "examples": [
              2980
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Size",
            "x-order": 20
          },
          "type": {
            "description": "File type",
            "examples": [
              "144"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 30
          },
          "url": {
            "description": "File full url",
            "examples": [
              "https://www.sec.gov/Archives/edgar/data/1711463/000197185724000581/primary_doc.xml"
            ],
            "type": "string",
            "x-go-name": "URL",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "EdgarFilingValue": {
        "description": "Filing value object",
        "properties": {
          "cik": {
            "description": "CIK code",
            "examples": [
              1711463
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Cik",
            "x-order": 10
          },
          "filed_at": {
            "description": "Filing date in UNIX timestamp",
            "examples": [
              1726617600
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "FiledAt",
            "x-order": 20
          },
          "form_type": {
            "description": "Filing form type",
            "examples": [
              "144"
            ],
            "type": "string",
            "x-go-name": "FormType",
            "x-order": 30
          },
          "files": {
            "description": "Filing files",
            "items": {
              "$ref": "#/components/schemas/EdgarFilingFile"
            },
            "type": "array",
            "x-go-name": "Files",
            "x-order": 40
          },
          "filing_url": {
            "description": "Full URL of the filing",
            "examples": [
              "https://www.sec.gov/Archives/edgar/data/1711463/0001971857-24-000581-index.htm"
            ],
            "type": "string",
            "x-go-name": "FilingURL",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "EquityInfo": {
        "description": "EquityInfo represents equity information",
        "properties": {
          "total_equity_gross_minority_interest": {
            "description": "Total equity gross minority interest",
            "examples": [
              62146000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalEquityGrossMinorityInterest",
            "x-order": 10
          },
          "stockholders_equity": {
            "description": "Stockholders equity",
            "examples": [
              62146000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "StockholdersEquity",
            "x-order": 20
          },
          "common_stock_equity": {
            "description": "Common stock equity",
            "examples": [
              62146000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CommonStockEquity",
            "x-order": 30
          },
          "preferred_stock_equity": {
            "description": "Preferred stock equity",
            "examples": [
              62146000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PreferredStockEquity",
            "x-order": 40
          },
          "other_equity_interest": {
            "description": "Other equity interest",
            "examples": [
              62146000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherEquityInterest",
            "x-order": 50
          },
          "minority_interest": {
            "description": "Minority interest",
            "examples": [
              62146000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "MinorityInterest",
            "x-order": 60
          },
          "total_capitalization": {
            "description": "Total capitalization",
            "examples": [
              157427000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalCapitalization",
            "x-order": 70
          },
          "net_tangible_assets": {
            "description": "Net tangible assets",
            "examples": [
              62146000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetTangibleAssets",
            "x-order": 80
          },
          "tangible_book_value": {
            "description": "Tangible book value",
            "examples": [
              62146000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TangibleBookValue",
            "x-order": 90
          },
          "invested_capital": {
            "description": "Invested capital",
            "examples": [
              173234000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InvestedCapital",
            "x-order": 100
          },
          "working_capital": {
            "description": "Working capital",
            "examples": [
              -1742000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "WorkingCapital",
            "x-order": 110
          },
          "capital_stock": {
            "$ref": "#/components/schemas/EquityInfo_capital_stock"
          },
          "equity_adjustments": {
            "$ref": "#/components/schemas/EquityInfo_equity_adjustments"
          },
          "net_debt": {
            "description": "Net debt",
            "examples": [
              81123000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetDebt",
            "x-order": 140
          },
          "total_debt": {
            "description": "Total debt",
            "examples": [
              123930000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalDebt",
            "x-order": 150
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "EtfResponseItem": {
        "description": "EtfResponseItem represents details of an ETF",
        "properties": {
          "symbol": {
            "description": "Instrument symbol (ticker)",
            "examples": [
              "SPY"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Full name of the ETF",
            "examples": [
              "SPDR S&P 500 ETF Trust"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency of the ETF according to the ISO 4217 standard",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange": {
            "description": "Exchange where the ETF is traded",
            "examples": [
              "NYSE"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNYS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 50
          },
          "country": {
            "description": "Country where the ETF is located",
            "examples": [
              "United States"
            ],
            "type": "string",
            "x-go-name": "Country",
            "x-order": 60
          },
          "figi_code": {
            "description": "Financial instrument global identifier (FIGI)",
            "examples": [
              "BBG000BDTF76"
            ],
            "type": "string",
            "x-go-name": "FigiCode",
            "x-order": 70
          },
          "cfi_code": {
            "description": "Classification of Financial Instruments (CFI)",
            "examples": [
              "CEOJLU"
            ],
            "type": "string",
            "x-go-name": "CfiCode",
            "x-order": 80
          },
          "isin": {
            "description": "International securities identification number (ISIN)",
            "examples": [
              "US78462F1030"
            ],
            "type": "string",
            "x-go-name": "Isin",
            "x-order": 100
          },
          "cusip": {
            "description": "A unique nine-character alphanumeric code used to identify financial securities, ensuring accurate data retrieval for the specified asset",
            "examples": [
              "037833100"
            ],
            "type": "string",
            "x-go-name": "Cusip",
            "x-order": 110
          },
          "access": {
            "$ref": "#/components/schemas/EtfResponseItem_access"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "ExchangeScheduleResponseItem": {
        "description": "ExchangeScheduleResponseItem represents details of an exchange schedule",
        "properties": {
          "title": {
            "description": "Official name of exchange",
            "examples": [
              "NASDAQ/NGS (Global Select Market)"
            ],
            "type": "string",
            "x-go-name": "Title",
            "x-order": 10
          },
          "name": {
            "description": "Name of exchange",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNYS"
            ],
            "type": "string",
            "x-go-name": "Code",
            "x-order": 30
          },
          "country": {
            "description": "Country to which stock exchange belongs to",
            "examples": [
              "United States"
            ],
            "type": "string",
            "x-go-name": "Country",
            "x-order": 40
          },
          "time_zone": {
            "description": "Time zone where exchange is located",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "TimeZone",
            "x-order": 50
          },
          "sessions": {
            "description": "Exchange trading hours",
            "items": {
              "$ref": "#/components/schemas/ExchangeScheduleSession"
            },
            "type": "array",
            "x-go-name": "Sessions",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "ExchangeScheduleSession": {
        "description": "ExchangeScheduleSession represents a trading session",
        "properties": {
          "open_time": {
            "description": "Opening time of the session",
            "examples": [
              "04:00:00"
            ],
            "type": "string",
            "x-go-name": "OpenTime",
            "x-order": 10
          },
          "close_time": {
            "description": "Closing time of the session",
            "examples": [
              "09:30:00"
            ],
            "type": "string",
            "x-go-name": "CloseTime",
            "x-order": 20
          },
          "session_name": {
            "description": "Name of the session",
            "examples": [
              "Pre market"
            ],
            "type": "string",
            "x-go-name": "SessionName",
            "x-order": 30
          },
          "session_type": {
            "description": "Type of the session",
            "examples": [
              "pre"
            ],
            "type": "string",
            "x-go-name": "SessionType",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "ExchangesResponseItem": {
        "description": "ExchangesResponseItem represents details of an exchange",
        "properties": {
          "title": {
            "description": "Title of exchange",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Title",
            "x-order": 5
          },
          "name": {
            "description": "Name of exchange",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNGS"
            ],
            "type": "string",
            "x-go-name": "Code",
            "x-order": 20
          },
          "country": {
            "description": "Country to which stock exchange belongs to",
            "examples": [
              "United States"
            ],
            "type": "string",
            "x-go-name": "Country",
            "x-order": 30
          },
          "timezone": {
            "description": "Time zone where exchange is located",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "Timezone",
            "x-order": 40
          },
          "access": {
            "$ref": "#/components/schemas/ExchangesResponseItemAccess"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "ExchangesResponseItemAccess": {
        "description": "Info on which plan symbol is available (displayed then `show_plan` is `true`)",
        "properties": {
          "global": {
            "description": "Level of access to the symbol",
            "examples": [
              "Level A"
            ],
            "type": "string",
            "x-go-name": "Global"
          },
          "plan": {
            "description": "The plan name for the symbol",
            "examples": [
              "Grow"
            ],
            "type": "string",
            "x-go-name": "Plan"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "ForexResponseItem": {
        "description": "ForexResponseItem represents details of a forex pair",
        "properties": {
          "symbol": {
            "description": "Currency pair according to ISO 4217 standard codes with slash(/) delimiter",
            "examples": [
              "EUR/USD"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "currency_group": {
            "description": "Group to which currency pair belongs to, could be: Major, Minor, Exotic and Exotic-Cross",
            "examples": [
              "Major"
            ],
            "type": "string",
            "x-go-name": "CurrencyGroup",
            "x-order": 20
          },
          "currency_base": {
            "description": "Base currency name according to ISO 4217 standard",
            "examples": [
              "EUR"
            ],
            "type": "string",
            "x-go-name": "CurrencyBase",
            "x-order": 30
          },
          "currency_quote": {
            "description": "Quote currency name according to ISO 4217 standard",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "CurrencyQuote",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "FundResponseItem": {
        "description": "FundResponseItem represents details of a fund",
        "properties": {
          "symbol": {
            "description": "Instrument symbol (ticker)",
            "examples": [
              "DIVI"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Full name of the fund",
            "examples": [
              "AdvisorShares Athena High Dividend ETF"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "country": {
            "description": "Country where the fund is located",
            "examples": [
              "United States"
            ],
            "type": "string",
            "x-go-name": "Country",
            "x-order": 30
          },
          "currency": {
            "description": "Currency of the fund according to the ISO 4217 standard",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 40
          },
          "exchange": {
            "description": "Exchange where the fund is traded",
            "examples": [
              "NYSE"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 50
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "ARCX"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 60
          },
          "type": {
            "description": "Type of the fund",
            "examples": [
              "ETF"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 70
          },
          "figi_code": {
            "description": "Financial instrument global identifier (FIGI)",
            "examples": [
              "BBG00161BCW4"
            ],
            "type": "string",
            "x-go-name": "FigiCode",
            "x-order": 80
          },
          "cfi_code": {
            "description": "Classification of Financial Instruments (CFI)",
            "examples": [
              "CECILU"
            ],
            "type": "string",
            "x-go-name": "CfiCode",
            "x-order": 90
          },
          "isin": {
            "description": "International securities identification number (ISIN)",
            "examples": [
              "GB00B65TLW28"
            ],
            "type": "string",
            "x-go-name": "Isin",
            "x-order": 100
          },
          "cusip": {
            "description": "A unique nine-character alphanumeric code used to identify financial securities, ensuring accurate data retrieval for the specified asset",
            "examples": [
              "35473P108"
            ],
            "type": "string",
            "x-go-name": "Cusip",
            "x-order": 110
          },
          "access": {
            "$ref": "#/components/schemas/FundResponseItem_access"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "GetAssetsResponseItem": {
        "properties": {
          "code": {
            "description": "Currency code",
            "examples": [
              "AUD"
            ],
            "type": "string",
            "x-go-name": "Code"
          },
          "description": {
            "description": "Description of the asset",
            "examples": [
              "Australian Dollar"
            ],
            "type": "string",
            "x-go-name": "Description"
          },
          "mic_code": {
            "description": "Market identifier code, e.g. DIGITAL_CURRENCY, PHYSICAL_CURRENCY, etc.",
            "examples": [
              "PHYSICAL_CURRENCY"
            ],
            "type": "string",
            "x-go-name": "MicCode"
          },
          "symbol": {
            "description": "Currency symbol",
            "examples": [
              "A$"
            ],
            "type": "string",
            "x-go-name": "Symbol"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "HolderItem": {
        "properties": {
          "entity_name": {
            "description": "Refers to the legal name of the institution",
            "examples": [
              "Vanguard Group, Inc. (The)"
            ],
            "type": "string",
            "x-go-name": "EntityName",
            "x-order": 10
          },
          "date_reported": {
            "description": "Refers to date reported",
            "examples": [
              "2021-06-30"
            ],
            "type": "string",
            "x-go-name": "DateReported",
            "x-order": 20
          },
          "shares": {
            "description": "Refers to the number of shares owned",
            "examples": [
              1264936543
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Shares",
            "x-order": 30
          },
          "value": {
            "description": "Total value of shares owned, calculated by multiplying `shares` by the current price",
            "examples": [
              173245708929
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Value",
            "x-order": 40
          },
          "percent_held": {
            "description": "Represents the percentage of shares outstanding that are owned by the financial institution",
            "examples": [
              0.0765
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PercentHeld",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "IncomeStatementBlock": {
        "properties": {
          "fiscal_date": {
            "description": "Date of the income statement release",
            "examples": [
              "2021-12-31"
            ],
            "type": "string",
            "x-go-name": "FiscalDate",
            "x-order": 10
          },
          "quarter": {
            "description": "Fiscal quarter. Visible when `&period=quarterly`",
            "examples": [
              1
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Quarter",
            "x-order": 20
          },
          "year": {
            "description": "Fiscal year",
            "examples": [
              2022
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Year",
            "x-order": 30
          },
          "sales": {
            "description": "Refers to total reported revenue",
            "examples": [
              123945000000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Sales",
            "x-order": 40
          },
          "cost_of_goods": {
            "description": "Refers to cost of revenue",
            "examples": [
              69702000000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "CostOfGoods",
            "x-order": 50
          },
          "gross_profit": {
            "description": "Refers to net gross profit: `sales` - `cost_of_goods`",
            "examples": [
              54243000000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "GrossProfit",
            "x-order": 60
          },
          "operating_expense": {
            "$ref": "#/components/schemas/IncomeStatementBlock_operating_expense"
          },
          "operating_income": {
            "description": "Refers to net operating income: `gross_profit` - `research_and_development` - `selling_general_and_administrative`",
            "examples": [
              41488000000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "OperatingIncome",
            "x-order": 80
          },
          "non_operating_interest": {
            "$ref": "#/components/schemas/IncomeStatementBlock_non_operating_interest"
          },
          "other_income_expense": {
            "description": "Refers to other incomes or expenses",
            "examples": [
              -203000000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "OtherIncomeExpense",
            "x-order": 100
          },
          "pretax_income": {
            "description": "Refers to earnings before tax: `operating_income` + `net_non_operating_interest` - `other_income_expense`",
            "examples": [
              41241000000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "PretaxIncome",
            "x-order": 110
          },
          "income_tax": {
            "description": "Refers to a tax provision",
            "examples": [
              6611000000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "IncomeTax",
            "x-order": 120
          },
          "net_income": {
            "description": "Refers to net income: `pretax_income` - `income_tax`",
            "examples": [
              34630000000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "NetIncome",
            "x-order": 130
          },
          "eps_basic": {
            "description": "Refers to earnings per share (EPS)",
            "examples": [
              2.11
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EPSBasic",
            "x-order": 140
          },
          "eps_diluted": {
            "description": "Refers to diluted earnings per share (EPS)",
            "examples": [
              2.1
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EPSDiluted",
            "x-order": 150
          },
          "basic_shares_outstanding": {
            "description": "Refers for the shares outstanding held by all its shareholders",
            "examples": [
              16391724000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "BasicSharesOutstanding",
            "x-order": 160
          },
          "diluted_shares_outstanding": {
            "description": "Refers to the total number of shares a company would have if all dilutive securities were exercised and converted into shares",
            "examples": [
              16391724000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "DilutedSharesOutstanding",
            "x-order": 170
          },
          "ebit": {
            "description": "Refers to earnings before interest and taxes (EBIT) measure",
            "examples": [
              41488000000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "EBIT",
            "x-order": 175
          },
          "ebitda": {
            "description": "Refers to EBITDA (earnings before interest, taxes, depreciation, and amortization) measure",
            "examples": [
              44632000000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "EBITDA",
            "x-order": 180
          },
          "net_income_continuous_operations": {
            "description": "Refers to the after-tax earnings that a business has generated from its operational activities",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "NetIncomeContinuousOperations",
            "x-order": 190
          },
          "minority_interests": {
            "description": "Refers to amount of minority interests paid out",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "MinorityInterests",
            "x-order": 200
          },
          "preferred_stock_dividends": {
            "description": "Refers to dividend that is allocated to and paid on a company's preferred shares",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "PreferredStockDividends",
            "x-order": 210
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/model/repository"
      },
      "IncomeStatementItem": {
        "description": "IncomeStatementItem represents a single income statement record",
        "properties": {
          "fiscal_date": {
            "description": "Date of the income statement release",
            "examples": [
              "2023-09-30"
            ],
            "type": "string",
            "x-go-name": "FiscalDate",
            "x-order": 10
          },
          "year": {
            "description": "Fiscal year",
            "examples": [
              2022
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Year",
            "x-order": 15
          },
          "revenue": {
            "$ref": "#/components/schemas/IncomeStatementItem_revenue"
          },
          "gross_profit": {
            "$ref": "#/components/schemas/IncomeStatementItem_gross_profit"
          },
          "operating_income": {
            "$ref": "#/components/schemas/IncomeStatementItem_operating_income"
          },
          "net_income": {
            "$ref": "#/components/schemas/IncomeStatementItem_net_income"
          },
          "earnings_per_share": {
            "$ref": "#/components/schemas/IncomeStatementItem_earnings_per_share"
          },
          "expenses": {
            "$ref": "#/components/schemas/IncomeStatementItem_expenses"
          },
          "interest_income_and_expense": {
            "$ref": "#/components/schemas/IncomeStatementItem_interest_income_and_expense"
          },
          "other_income_and_expenses": {
            "$ref": "#/components/schemas/IncomeStatementItem_other_income_and_expenses"
          },
          "taxes": {
            "$ref": "#/components/schemas/IncomeStatementItem_taxes"
          },
          "depreciation_and_amortization": {
            "$ref": "#/components/schemas/IncomeStatementItem_depreciation_and_amortization"
          },
          "ebitda": {
            "$ref": "#/components/schemas/IncomeStatementItem_ebitda"
          },
          "dividends_and_shares": {
            "$ref": "#/components/schemas/IncomeStatementItem_dividends_and_shares"
          },
          "unusual_items": {
            "$ref": "#/components/schemas/IncomeStatementItem_unusual_items"
          },
          "depreciation": {
            "$ref": "#/components/schemas/IncomeStatementItem_depreciation"
          },
          "pretax_income": {
            "$ref": "#/components/schemas/IncomeStatementItem_pretax_income"
          },
          "special_income_charges": {
            "$ref": "#/components/schemas/IncomeStatementItem_special_income_charges"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "Index": {
        "description": "Indices info",
        "properties": {
          "country": {
            "type": "string",
            "x-go-name": "Country"
          },
          "currency": {
            "type": "string",
            "x-go-name": "Currency"
          },
          "exchange": {
            "type": "string",
            "x-go-name": "Exchange"
          },
          "mic_code": {
            "type": "string",
            "x-go-name": "ExchangeCode"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "symbol": {
            "type": "string",
            "x-go-name": "Symbol"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/core-go/model/entity"
      },
      "LastChangeResponseItem": {
        "properties": {
          "symbol": {
            "description": "Ticker of the company",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "mic_code": {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 20
          },
          "last_change": {
            "description": "The date and time of last changes, in `2006-01-02 15:04:05` format",
            "format": "date-time",
            "type": "string",
            "x-go-name": "LastChange",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/model/repository"
      },
      "MarketMoversResponseBody": {
        "properties": {
          "values": {
            "description": "Market movers list",
            "items": {
              "$ref": "#/components/schemas/MarketMoversResponseValue"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 10
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "required": [
          "values"
        ],
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "MarketMoversResponseValue": {
        "properties": {
          "symbol": {
            "description": "The exchange symbol ticker",
            "examples": [
              "BSET"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "The official name of the instrument",
            "examples": [
              "Bassett Furniture Industries Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 30
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 40
          },
          "datetime": {
            "description": "The last updated datetime timestamp",
            "examples": [
              "2023-10-01T12:00:00Z"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 50
          },
          "last": {
            "description": "The latest available price for the symbol today",
            "examples": [
              17.25
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Last",
            "x-order": 60
          },
          "high": {
            "description": "The highest price for the symbol today",
            "examples": [
              18
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "High",
            "x-order": 70
          },
          "low": {
            "description": "The lowest price for the symbol today",
            "examples": [
              16.5
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Low",
            "x-order": 80
          },
          "volume": {
            "description": "The trading volume of the symbol today",
            "examples": [
              108297
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Volume",
            "x-order": 90
          },
          "change": {
            "description": "The value of the change since the previous day",
            "examples": [
              3.31
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Change",
            "x-order": 100
          },
          "percent_change": {
            "description": "The percentage change since the previous day",
            "examples": [
              23.74462
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PercentChange",
            "x-order": 110
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "MarketStateResponseItem": {
        "properties": {
          "name": {
            "description": "The full name of exchange",
            "examples": [
              "NYSE"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNYS"
            ],
            "type": "string",
            "x-go-name": "Code",
            "x-order": 20
          },
          "country": {
            "description": "Country where the exchange is located",
            "examples": [
              "United States"
            ],
            "type": "string",
            "x-go-name": "Country",
            "x-order": 30
          },
          "is_market_open": {
            "description": "Indicates if the market is currently open",
            "examples": [
              true
            ],
            "type": "boolean",
            "x-go-name": "IsMarketOpen",
            "x-order": 40
          },
          "time_after_open": {
            "description": "Time after market opening in <code>HH:MM:SS</code> format; if currently closed - returns <code>00:00:00</code>",
            "examples": [
              "02:39:03"
            ],
            "type": "string",
            "x-go-name": "TimeAfterOpen",
            "x-order": 50
          },
          "time_to_open": {
            "description": "Time to market opening in <code>HH:MM:SS</code> format; if currently open - returns <code>00:00:00</code>",
            "examples": [
              "00:00:00"
            ],
            "type": "string",
            "x-go-name": "TimeToOpen",
            "x-order": 60
          },
          "time_to_close": {
            "description": "Time to market closing in <code>HH:MM:SS</code> format; if currently closed - returns <code>00:00:00</code>",
            "examples": [
              "05:20:57"
            ],
            "type": "string",
            "x-go-name": "TimeToClose",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "MutualFundsListResponseListItem": {
        "properties": {
          "symbol": {
            "description": "Fund symbol ticker",
            "examples": [
              "0P0001LCQ3"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Fund name",
            "examples": [
              "JNL Small Cap Index Fund (I)"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "country": {
            "description": "Country of fund incorporation",
            "examples": [
              "United States"
            ],
            "type": "string",
            "x-go-name": "Country",
            "x-order": 30
          },
          "fund_family": {
            "description": "Investment company that manages the fund",
            "examples": [
              "Jackson National"
            ],
            "type": "string",
            "x-go-name": "FundFamily",
            "x-order": 40
          },
          "fund_type": {
            "description": "Type of fund",
            "examples": [
              "Small Blend"
            ],
            "type": "string",
            "x-go-name": "FundType",
            "x-order": 50
          },
          "performance_rating": {
            "description": "Performance rating from `0` to `5`",
            "examples": [
              2
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "PerformanceRating",
            "x-order": 60
          },
          "risk_rating": {
            "description": "Risk rating from `0` to `5`",
            "examples": [
              4
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "RiskRating",
            "x-order": 70
          },
          "currency": {
            "description": "Currency code in which the fund is denominated",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 80
          },
          "exchange": {
            "description": "Exchange name where the fund is listed",
            "examples": [
              "OTC"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 90
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "OTCM"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 100
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "OptionSide": {
        "properties": {
          "ask": {
            "format": "double",
            "type": "number",
            "x-go-name": "Ask"
          },
          "bid": {
            "format": "double",
            "type": "number",
            "x-go-name": "Bid"
          },
          "change": {
            "format": "double",
            "type": "number",
            "x-go-name": "Change"
          },
          "contract_name": {
            "type": "string",
            "x-go-name": "ContractName"
          },
          "implied_volatility": {
            "format": "double",
            "type": "number",
            "x-go-name": "ImpliedVolatility"
          },
          "in_the_money": {
            "type": "boolean",
            "x-go-name": "InTheMoney"
          },
          "last_price": {
            "format": "double",
            "type": "number",
            "x-go-name": "LastPrice"
          },
          "last_trade_date": {
            "type": "string",
            "x-go-name": "LastTradeDate"
          },
          "open_interest": {
            "format": "int64",
            "type": "integer",
            "x-go-name": "OpenInterest"
          },
          "option_id": {
            "type": "string",
            "x-go-name": "OptionID"
          },
          "percent_change": {
            "format": "double",
            "type": "number",
            "x-go-name": "PercentChange"
          },
          "strike": {
            "format": "double",
            "type": "number",
            "x-go-name": "Strike"
          },
          "volume": {
            "format": "int64",
            "type": "integer",
            "x-go-name": "Volume"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/model/repository"
      },
      "ResponseMutualFundWorldComposition": {
        "description": "Mutual fund composition",
        "properties": {
          "major_market_sectors": {
            "description": "Breakdown of the fund’s portfolio by major industry sectors and their respective weights",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_composition_major_market_sectors_inner"
            },
            "type": "array",
            "x-go-name": "MajorMarketSectors",
            "x-order": 10
          },
          "asset_allocation": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_composition_asset_allocation"
          },
          "top_holdings": {
            "description": "Top holdings of the fund with their respective weights in the overall portfolio composition",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_composition_top_holdings_inner"
            },
            "type": "array",
            "x-go-name": "TopHoldings",
            "x-order": 20
          },
          "bond_breakdown": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_composition_bond_breakdown"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/model/repository"
      },
      "ResponseMutualFundWorldPerformance": {
        "description": "Detailed performance of a mutual fund",
        "properties": {
          "trailing_returns": {
            "description": "Trailing returns of the fund",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_performance_trailing_returns_inner"
            },
            "type": "array",
            "x-go-name": "TrailingReturns",
            "x-order": 10
          },
          "annual_total_returns": {
            "description": "Annual total returns of the fund",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_performance_annual_total_returns_inner"
            },
            "type": "array",
            "x-go-name": "AnnualTotalReturns",
            "x-order": 20
          },
          "quarterly_total_returns": {
            "description": "Quarterly total returns of the fund",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_performance_quarterly_total_returns_inner"
            },
            "type": "array",
            "x-go-name": "QuarterlyTotalReturns",
            "x-order": 30
          },
          "load_adjusted_return": {
            "description": "Load adjusted return of the fund",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_performance_load_adjusted_return_inner"
            },
            "type": "array",
            "x-go-name": "LoadAdjustedReturn",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/model/repository"
      },
      "ResponseMutualFundWorldPurchaseInfo": {
        "description": "Purchase information for the mutual fund",
        "properties": {
          "expenses": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_purchase_info_expenses"
          },
          "minimums": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_purchase_info_minimums"
          },
          "pricing": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_purchase_info_pricing"
          },
          "brokerages": {
            "description": "List of brokerages where mutual fund can be purchased",
            "examples": [
              []
            ],
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "Brokerages",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/model/repository"
      },
      "ResponseMutualFundWorldRatings": {
        "description": "Ratings of a mutual fund",
        "properties": {
          "performance_rating": {
            "description": "Performance rating from 0 to 5",
            "examples": [
              2
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "PerformanceRating",
            "x-order": 10
          },
          "risk_rating": {
            "description": "Risk rating from 0 to 5",
            "examples": [
              4
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "RiskRating",
            "x-order": 20
          },
          "return_rating": {
            "description": "Return rating from 0 to 5",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "ReturnRating",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/model/repository"
      },
      "ResponseMutualFundWorldRisk": {
        "description": "Risk and volatility statistics of the fund and its category over different periods",
        "properties": {
          "volatility_measures": {
            "description": "Volatility statistics of the fund",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_risk_volatility_measures_inner"
            },
            "type": "array",
            "x-go-name": "VolatilityMeasures",
            "x-order": 10
          },
          "valuation_metrics": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_risk_valuation_metrics"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/model/repository"
      },
      "ResponseMutualFundWorldSummary": {
        "description": "A brief summary of a mutual fund",
        "properties": {
          "symbol": {
            "description": "All available fund types segmented by country",
            "examples": [
              "0P0001LCQ3"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Fund name",
            "examples": [
              "JNL Small Cap Index Fund (I)"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "fund_family": {
            "description": "Investment company that manages the fund",
            "examples": [
              "Jackson National"
            ],
            "type": "string",
            "x-go-name": "FundFamily",
            "x-order": 30
          },
          "fund_type": {
            "description": "Type of the fund",
            "examples": [
              "Small Blend"
            ],
            "type": "string",
            "x-go-name": "FundType",
            "x-order": 40
          },
          "currency": {
            "description": "Currency of fund price",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 50
          },
          "share_class_inception_date": {
            "description": "The date from which the fund started operations and the returns are calculated",
            "examples": [
              "2021-04-26"
            ],
            "type": "string",
            "x-go-name": "ShareClassInceptionDate",
            "x-order": 60
          },
          "ytd_return": {
            "description": "Percentage of profit of the fund since the first trading day of the current calendar year",
            "examples": [
              -0.02986
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "YtdReturn",
            "x-order": 70
          },
          "expense_ratio_net": {
            "description": "Percentage of mutual fund assets steered toward a fund's operating expenses and fund management fees",
            "examples": [
              0.001
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ExpenseRatioNet",
            "x-order": 80
          },
          "yield": {
            "description": "Income returned to its investors through interest and dividends generated by the fund's investments",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Yield",
            "x-order": 90
          },
          "nav": {
            "description": "Net Asset Value: fund value minus liabilities",
            "examples": [
              10.09
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Nav",
            "x-order": 100
          },
          "min_investment": {
            "description": "Investment minimum",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "MinInvestment",
            "x-order": 110
          },
          "turnover_rate": {
            "description": "Percentage rate at which mutual fund replaces its holdings on investment every year",
            "examples": [
              0.32
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TurnoverRate",
            "x-order": 120
          },
          "net_assets": {
            "description": "Total assets of a fund minus its total liabilities",
            "examples": [
              2400762112
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "NetAssets",
            "x-order": 130
          },
          "overview": {
            "description": "Description of the fund",
            "examples": [
              "The fund invests, normally, at least 80% of its assets in the stocks..."
            ],
            "type": "string",
            "x-go-name": "Overview",
            "x-order": 140
          },
          "people": {
            "description": "Information about the fund’s managers",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_summary_people_inner"
            },
            "type": "array",
            "x-go-name": "People",
            "x-order": 150
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/model/repository"
      },
      "ResponseMutualFundWorldSustainability": {
        "description": "Sustainability score and ESG (Environmental, Social, Governance) metrics for the fund",
        "properties": {
          "score": {
            "description": "Sustainability score: asset-weighted average of normalized company-level ESG Scores for the covered holdings in the portfolio from `0` to `100`",
            "examples": [
              22
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Score",
            "x-order": 10
          },
          "corporate_esg_pillars": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_sustainability_corporate_esg_pillars"
          },
          "sustainable_investment": {
            "description": "Indication that the fund discloses in their prospectus that they employ socially responsible or ESG principles in their investment selection processes",
            "examples": [
              false
            ],
            "type": "boolean",
            "x-go-name": "SustainableInvestment",
            "x-order": 30
          },
          "corporate_aum": {
            "description": "Percentage of AUM used to calculate sustainability score",
            "examples": [
              0.99486
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CorporateAum",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/model/repository"
      },
      "ResponseSanctionItem": {
        "properties": {
          "source": {
            "description": "The sanction source",
            "examples": [
              "ofac"
            ],
            "type": "string",
            "x-go-name": "Source",
            "x-order": 10
          },
          "program": {
            "description": "The sanction program",
            "examples": [
              "RUSSIA-EO14024"
            ],
            "type": "string",
            "x-go-name": "Program",
            "x-order": 20
          },
          "notes": {
            "description": "Notes for the sanction",
            "examples": [
              "Block"
            ],
            "type": "string",
            "x-go-name": "Notes",
            "x-order": 30
          },
          "lists": {
            "description": "Sanction lists",
            "items": {
              "$ref": "#/components/schemas/ResponseSanctionItemList"
            },
            "type": "array",
            "x-go-name": "Lists",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "ResponseSanctionItemList": {
        "properties": {
          "name": {
            "description": "The sanction list name",
            "examples": [
              "SDN List"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "published_at": {
            "description": "The sanction published date in the current sanctions list",
            "examples": [
              "2024-10-30"
            ],
            "type": "string",
            "x-go-name": "PublishedAt",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "ResponseSanctionedEntitiy": {
        "properties": {
          "symbol": {
            "description": "The instrument symbol ticker",
            "examples": [
              "LOKESHMACH"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "The instrument name",
            "examples": [
              "Lokesh Machines Ltd."
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "mic_code": {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "examples": [
              "NSE"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 30
          },
          "country": {
            "description": "Country name",
            "examples": [
              "India"
            ],
            "type": "string",
            "x-go-name": "Country",
            "x-order": 40
          },
          "sanction": {
            "$ref": "#/components/schemas/ResponseSanctionItem"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "SplitsCalendarResponseItem": {
        "description": "List of stock splits",
        "properties": {
          "date": {
            "description": "Stands for the split date",
            "examples": [
              "2024-04-23"
            ],
            "type": "string",
            "x-go-name": "Date",
            "x-order": 10
          },
          "symbol": {
            "description": "Ticker of the company",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 20
          },
          "mic_code": {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "examples": [
              "XNGS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 30
          },
          "exchange": {
            "description": "Exchange name where the company is listed",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          },
          "description": {
            "description": "Specification of the split event",
            "examples": [
              "1-for-1 split"
            ],
            "type": "string",
            "x-go-name": "Description",
            "x-order": 50
          },
          "ratio": {
            "description": "The ratio by which the number of a company's outstanding shares of stock are increased following a stock split. For example, a `4-for-1 split` results in four times as many outstanding shares, with each share selling at one forth of its pre-split price",
            "examples": [
              1
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Ratio",
            "x-order": 60
          },
          "from_factor": {
            "description": "From factor of the split",
            "examples": [
              1
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FromFactor",
            "x-order": 70
          },
          "to_factor": {
            "description": "To factor of the split",
            "examples": [
              1
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ToFactor",
            "x-order": 80
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/model/repository"
      },
      "StockExchange": {
        "description": "Stock info",
        "properties": {
          "country": {
            "type": "string",
            "x-go-name": "Country"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/core-go/model/entity"
      },
      "StocksResponseItem": {
        "description": "StocksResponseItem represents details of a stock instrument",
        "properties": {
          "symbol": {
            "description": "Instrument symbol (ticker)",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Full name of instrument",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency of the instrument according to the ISO 4217 standard",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNGS"
            ],
            "type": "string",
            "x-go-name": "ExchangeCode",
            "x-order": 50
          },
          "country": {
            "description": "Country where exchange is located",
            "examples": [
              "United States"
            ],
            "type": "string",
            "x-go-name": "Country",
            "x-order": 60
          },
          "type": {
            "description": "Common issue type",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 70
          },
          "figi_code": {
            "description": "Financial instrument global identifier (FIGI)",
            "examples": [
              "BBG000B9Y5X2"
            ],
            "type": "string",
            "x-go-name": "FigiCode",
            "x-order": 80
          },
          "cfi_code": {
            "description": "Classification of Financial Instruments (CFI)",
            "examples": [
              "ESVUFR"
            ],
            "type": "string",
            "x-go-name": "CfiCode",
            "x-order": 90
          },
          "isin": {
            "description": "International securities identification number (ISIN), available by individual request to support",
            "examples": [
              "US0378331005"
            ],
            "type": "string",
            "x-go-name": "Isin",
            "x-order": 100
          },
          "cusip": {
            "description": "A unique nine-character alphanumeric code used to identify financial securities, ensuring accurate data retrieval for the specified asset",
            "examples": [
              "037833100"
            ],
            "type": "string",
            "x-go-name": "Cusip",
            "x-order": 110
          },
          "access": {
            "$ref": "#/components/schemas/FundResponseItem_access"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "SymbolSearchResponseItem": {
        "description": "SymbolSearchResponseItem represents details of a symbol search result",
        "properties": {
          "symbol": {
            "description": "Ticker symbol of instrument",
            "examples": [
              "AA"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "instrument_name": {
            "description": "Name of exchange",
            "examples": [
              "Alcoa Corp"
            ],
            "type": "string",
            "x-go-name": "InstrumentName",
            "x-order": 20
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NYSE"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 30
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNYS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 40
          },
          "exchange_timezone": {
            "description": "Time zone where exchange is located",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 50
          },
          "instrument_type": {
            "description": "Type of instrument",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "InstrumentType",
            "x-order": 60
          },
          "country": {
            "description": "Country to which stock exchange belongs to",
            "examples": [
              "United States"
            ],
            "type": "string",
            "x-go-name": "Country",
            "x-order": 70
          },
          "currency": {
            "description": "Currency in which the instrument is traded",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 80
          },
          "access": {
            "$ref": "#/components/schemas/SymbolSearchResponseItemAccess"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "SymbolSearchResponseItemAccess": {
        "description": "Info on which plan symbol is available (displayed then `show_plan` is `true`)",
        "properties": {
          "global": {
            "description": "Level of access to the symbol",
            "examples": [
              "Basic"
            ],
            "type": "string",
            "x-go-name": "Global"
          },
          "plan": {
            "description": "The plan name for the symbol",
            "examples": [
              "Basic"
            ],
            "type": "string",
            "x-go-name": "Plan"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "TechnicalIndicatorsResponseMacdOutputValue": {
        "description": "Output parameter name. Example values: <code>ad</code>, <code>add</code>, <code>adxr</code>, <code>aroonosc</code>,  <code>macd</code>, <code>macd_signal</code>, <code>macd_hist</code>, etc",
        "properties": {
          "default_color": {
            "description": "Suggested color for displaying returns hex color code",
            "examples": [
              "#FF0000"
            ],
            "type": "string",
            "x-go-name": "DefaultColor",
            "x-order": 10
          },
          "display": {
            "description": "How output value should be rendered",
            "enum": [
              "line",
              "histogram",
              "candle",
              "points"
            ],
            "examples": [
              "line"
            ],
            "type": "string",
            "x-go-name": "Display",
            "x-order": 20
          },
          "min_range": {
            "description": "If output value has minimum bound",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "MinRange",
            "x-order": 30
          },
          "max_range": {
            "description": "If output value has maximum bound",
            "examples": [
              5
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "MaxRange",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "TechnicalIndicatorsResponseMacdOutputValues": {
        "description": "An array of output values",
        "properties": {
          "parameter_name": {
            "$ref": "#/components/schemas/TechnicalIndicatorsResponseMacdOutputValue"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "TechnicalIndicatorsResponseMacdParameter": {
        "description": "Input parameter name. Example values: <code>series_type</code>, <code>fast_period</code>, <code>slow_period</code>, <code>time_period</code>, <code>signal_period</code>",
        "properties": {
          "default": {
            "description": "Specifies parameter value set by default",
            "examples": [
              12
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Default"
          },
          "max_range": {
            "description": "If the parameter has upper bound in order to ensure correct calculation",
            "examples": [
              1
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "MaxRange"
          },
          "min_range": {
            "description": "If the parameter has lower bound in order to ensure correct calculation",
            "examples": [
              1
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "MinRange"
          },
          "range": {
            "description": "An array of available parameter values",
            "examples": [
              [
                "open",
                "high",
                "low",
                "close"
              ]
            ],
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "Range"
          },
          "type": {
            "description": "Type of parameter might be <code>string</code>, <code>int</code>, <code>float</code> or <code>array</code>",
            "examples": [
              "int"
            ],
            "type": "string",
            "x-go-name": "Type"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "TechnicalIndicatorsResponseMacdParameters": {
        "description": "An array of input parameters for the indicator",
        "properties": {
          "parameter_name": {
            "$ref": "#/components/schemas/TechnicalIndicatorsResponseMacdParameter"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "TechnicalIndicatorsResponseMacdTinting": {
        "description": "An array of tinting values used for proper indicator coloring",
        "properties": {
          "display": {
            "description": "How the tinting should be rendered",
            "examples": [
              "fill"
            ],
            "type": "string",
            "x-go-name": "Display",
            "x-order": 10
          },
          "color": {
            "description": "Hex color code for the tinting",
            "examples": [
              "#FF0000"
            ],
            "type": "string",
            "x-go-name": "Color",
            "x-order": 20
          },
          "transparency": {
            "description": "Transparency level, float value from <code>0</code> to <code>1</code>",
            "examples": [
              0.5
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Transparency",
            "x-order": 30
          },
          "lower_bound": {
            "description": "Lower bound of tinting, can be a number or a return parameter name",
            "examples": [
              "0"
            ],
            "type": "object",
            "x-go-name": "LowerBound"
          },
          "upper_bound": {
            "description": "Upper bound of tinting, can be a number or a return parameter name",
            "examples": [
              "macd"
            ],
            "type": "object",
            "x-go-name": "UpperBound"
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "TimeSeriesCrossItem": {
        "description": "TimeSeriesCrossItem represents a single data point in the time series",
        "properties": {
          "datetime": {
            "description": "Datetime at local exchange time referring to when the bar with specified interval was opened",
            "examples": [
              "2025-02-28 14:30:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "open": {
            "description": "Price at the opening of the current bar",
            "examples": [
              "0.0000081115665"
            ],
            "type": "string",
            "x-go-name": "Open",
            "x-order": 20
          },
          "high": {
            "description": "Highest price which occurred during the current bar",
            "examples": [
              "0.0000081273069"
            ],
            "type": "string",
            "x-go-name": "High",
            "x-order": 30
          },
          "low": {
            "description": "Lowest price which occurred during the current bar",
            "examples": [
              "0.0000081088287"
            ],
            "type": "string",
            "x-go-name": "Low",
            "x-order": 40
          },
          "close": {
            "description": "Close price at the end of the bar",
            "examples": [
              "0.0000081268066"
            ],
            "type": "string",
            "x-go-name": "Close",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "TimeSeriesItem": {
        "properties": {
          "datetime": {
            "description": "Datetime at local exchange time referring to when the bar with specified interval was opened.",
            "examples": [
              "2021-09-16 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "open": {
            "description": "Price at the opening of current bar",
            "examples": [
              "148.73500"
            ],
            "type": "string",
            "x-go-name": "Open",
            "x-order": 20
          },
          "high": {
            "description": "Highest price which occurred during the current bar.",
            "examples": [
              "148.86000"
            ],
            "type": "string",
            "x-go-name": "High",
            "x-order": 30
          },
          "low": {
            "description": "Lowest price which occurred during the current bar.",
            "examples": [
              "148.73000"
            ],
            "type": "string",
            "x-go-name": "Low",
            "x-order": 40
          },
          "close": {
            "description": "Close price at the end of the bar.",
            "examples": [
              "148.85001"
            ],
            "type": "string",
            "x-go-name": "Close",
            "x-order": 50
          },
          "volume": {
            "description": "Trading volume which occurred during the current bar",
            "examples": [
              "624277"
            ],
            "type": "string",
            "x-go-name": "Volume",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-package": "gitlab.atlasgroup.ai/twelvedata/api/route/description"
      },
      "GetTimeSeriesAd_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "AD - Chaikin A/D Line"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesAd_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesAd_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesAd_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "ad": {
            "description": "AD value",
            "examples": [
              "2262629.83773"
            ],
            "type": "string",
            "x-go-name": "Ad",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAd_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesAd_200_response_meta"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesAd_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAdd_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "ADD - Arithmetic Addition"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type_1": {
            "description": "Price type used as the first part of technical indicator",
            "examples": [
              "open"
            ],
            "type": "string",
            "x-go-name": "SeriesType1",
            "x-order": 20
          },
          "series_type_2": {
            "description": "Price type used as the second part of technical indicator",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType2",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesAdd_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesAdd_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesAdd_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "add": {
            "description": "Add value",
            "examples": [
              "402.10798"
            ],
            "type": "string",
            "x-go-name": "Add",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAdd_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesAdd_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesAdd_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAdOsc_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "ADOSC - Chaikin A/D Oscillator"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "fast_period": {
            "description": "Number of periods for fast moving average",
            "examples": [
              12
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "FastPeriod",
            "x-order": 20
          },
          "slow_period": {
            "description": "Number of periods for slow moving average",
            "examples": [
              26
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SlowPeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesAdOsc_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesAdOsc_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesAdOsc_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "adosc": {
            "description": "Adosc value",
            "examples": [
              "-233315.15185"
            ],
            "type": "string",
            "x-go-name": "AdOsc",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAdOsc_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesAdOsc_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesAdOsc_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAdx_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "ADX - Average Directional Index"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesAdx_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesAdx_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesAdx_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "adx": {
            "description": "ADX value",
            "examples": [
              "49.22897"
            ],
            "type": "string",
            "x-go-name": "Adx",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAdx_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesAdx_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesAdx_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAdxr_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "ADXR - Average Directional Movement Index Rating"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesAdxr_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesAdxr_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesAdxr_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "adxr": {
            "description": "Adxr value",
            "examples": [
              "37.43665"
            ],
            "type": "string",
            "x-go-name": "Adxr",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAdxr_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesAdxr_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesAdxr_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetAnalystRatingsLight_200_response_meta": {
        "description": "Meta information about the instrument",
        "properties": {
          "symbol": {
            "description": "Symbol ticker of the instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the instrument",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency in which the instrument is traded",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "Timezone of the exchange",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 40
          },
          "exchange": {
            "description": "Exchange where the instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 50
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNGS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 60
          },
          "type": {
            "description": "Type of the instrument",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetAnalystRatingsLight_200_response_ratings_inner": {
        "properties": {
          "date": {
            "description": "Date when the rating was released",
            "examples": [
              "2022-08-19"
            ],
            "type": "string",
            "x-go-name": "Date",
            "x-order": 10
          },
          "firm": {
            "description": "Firm that issued the ranking",
            "examples": [
              "Keybanc"
            ],
            "type": "string",
            "x-go-name": "Firm",
            "x-order": 20
          },
          "rating_change": {
            "description": "Defines the action of the firm to ranking, could be `Maintains`, `Upgrade`, `Downgrade`, `Initiates` or `Reiterates`",
            "examples": [
              "Maintains"
            ],
            "type": "string",
            "x-go-name": "RatingChange",
            "x-order": 30
          },
          "rating_current": {
            "description": "Current firm's ranking of the instrument",
            "examples": [
              "Overweight"
            ],
            "type": "string",
            "x-go-name": "RatingCurrent",
            "x-order": 40
          },
          "rating_prior": {
            "description": "Prior firm's ranking of the instrument",
            "examples": [
              "Overweight"
            ],
            "type": "string",
            "x-go-name": "RatingPrior",
            "x-order": 50
          }
        },
        "type": "object"
      },
      "GetAnalystRatingsLight_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetAnalystRatingsLight_200_response_meta"
          },
          "ratings": {
            "description": "List of analyst ratings",
            "items": {
              "$ref": "#/components/schemas/GetAnalystRatingsLight_200_response_ratings_inner"
            },
            "type": "array",
            "x-go-name": "Ratings",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetAnalystRatingsUsEquities_200_response_ratings_inner": {
        "properties": {
          "date": {
            "description": "Date when the rating was released",
            "examples": [
              "2022-08-19"
            ],
            "type": "string",
            "x-go-name": "Date",
            "x-order": 10
          },
          "firm": {
            "description": "Firm that issued the ranking",
            "examples": [
              "Keybanc"
            ],
            "type": "string",
            "x-go-name": "Firm",
            "x-order": 20
          },
          "analyst_name": {
            "description": "Name of an analyst",
            "examples": [
              "Brandon Nispel"
            ],
            "type": "string",
            "x-go-name": "AnalystName",
            "x-order": 30
          },
          "rating_change": {
            "description": "Defines the action of the firm to ranking, could be `Maintains`, `Upgrade`, `Downgrade`, `Initiates`, `Reiterates`, `Assumes`, or `Reinstates`",
            "examples": [
              "Maintains"
            ],
            "type": "string",
            "x-go-name": "RatingChange",
            "x-order": 40
          },
          "rating_current": {
            "description": "Current firm's ranking of the instrument",
            "examples": [
              "Overweight"
            ],
            "type": "string",
            "x-go-name": "RatingCurrent",
            "x-order": 50
          },
          "rating_prior": {
            "description": "Prior firm's ranking of the instrument",
            "examples": [
              "Overweight"
            ],
            "type": "string",
            "x-go-name": "RatingPrior",
            "x-order": 60
          },
          "time": {
            "description": "Time when the rating was released or updated",
            "examples": [
              "08:29:48"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 70
          },
          "action_price_target": {
            "description": "Action that firm took towards target price",
            "examples": [
              "Raises"
            ],
            "type": "string",
            "x-go-name": "ActionPriceTarget",
            "x-order": 80
          },
          "price_target_current": {
            "description": "Current firm's price target for the instrument",
            "examples": [
              185.14
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceTargetCurrent",
            "x-order": 90
          },
          "price_target_prior": {
            "description": "Prior firm's price target for the instrument",
            "examples": [
              177.01
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceTargetPrior",
            "x-order": 100
          }
        },
        "type": "object"
      },
      "GetAnalystRatingsUsEquities_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetAnalystRatingsLight_200_response_meta"
          },
          "ratings": {
            "description": "List of analyst ratings",
            "items": {
              "$ref": "#/components/schemas/GetAnalystRatingsUsEquities_200_response_ratings_inner"
            },
            "type": "array",
            "x-go-name": "Ratings",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetApiUsage_200_response": {
        "properties": {
          "timestamp": {
            "description": "Current timestamp in UTC timezone",
            "examples": [
              "2025-05-07 11:10:12"
            ],
            "type": "string",
            "x-go-name": "Timestamp",
            "x-order": 10
          },
          "current_usage": {
            "description": "Number of requests made in last minute",
            "examples": [
              4003
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "CurrentUsage",
            "x-order": 20
          },
          "plan_limit": {
            "description": "Your personal API limit (requests/minute) depending on the plan",
            "examples": [
              4181
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "PlanLimit",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesApo_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "APO - Absolute Price Oscillator"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "fast_period": {
            "description": "Number of periods for fast moving average",
            "examples": [
              12
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "FastPeriod",
            "x-order": 30
          },
          "slow_period": {
            "description": "Number of periods for slow moving average",
            "examples": [
              26
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SlowPeriod",
            "x-order": 40
          },
          "ma_type": {
            "description": "Type of moving average used",
            "examples": [
              "SMA"
            ],
            "type": "string",
            "x-go-name": "MAType",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesApo_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesApo_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesApo_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "apo": {
            "description": "APO value",
            "examples": [
              "-0.54508"
            ],
            "type": "string",
            "x-go-name": "Apo",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesApo_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesApo_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesApo_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAroon_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "AROON - Aroon Indicator"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesAroon_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesAroon_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesAroon_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "aroon_down": {
            "description": "Aroon down value",
            "examples": [
              "92.85714"
            ],
            "type": "string",
            "x-go-name": "AroonDown",
            "x-order": 20
          },
          "aroon_up": {
            "description": "Aroon up value",
            "examples": [
              "0.0"
            ],
            "type": "string",
            "x-go-name": "AroonUp",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAroon_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesAroon_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesAroon_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAroonOsc_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "AROONOSC - Aroon Oscillator"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesAroonOsc_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesAroonOsc_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesAroonOsc_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "aroonosc": {
            "description": "Aroon oscillator value",
            "examples": [
              "-92.85714"
            ],
            "type": "string",
            "x-go-name": "AroonOsc",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAroonOsc_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesAroonOsc_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesAroonOsc_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAtr_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "ATR - Average True Range"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesAtr_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesAtr_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesAtr_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "atr": {
            "description": "ATR value",
            "examples": [
              "0.19828"
            ],
            "type": "string",
            "x-go-name": "Atr",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAtr_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesAtr_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesAtr_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAvg_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "AVG - Average"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesAvg_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesAvg_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesAvg_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "avg": {
            "description": "Avg value",
            "examples": [
              "201.53871"
            ],
            "type": "string",
            "x-go-name": "Avg",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAvg_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesAvg_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesAvg_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAvgPrice_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "AVGPRICE - Average Price"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesAvgPrice_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesAvgPrice_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesAvgPrice_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "avgprice": {
            "description": "Avgprice value",
            "examples": [
              "201.02449"
            ],
            "type": "string",
            "x-go-name": "AvgPrice",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesAvgPrice_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesAvgPrice_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesAvgPrice_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetBalanceSheet_200_response_meta": {
        "description": "Metadata about the balance sheet",
        "properties": {
          "symbol": {
            "description": "Ticker symbol of instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the company",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency of the balance sheet according to the ISO 4217 standard",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 50
          },
          "exchange_timezone": {
            "description": "Exchange timezone",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "period": {
            "description": "Values can be annual or quarterly",
            "examples": [
              "Quarterly"
            ],
            "type": "string",
            "x-go-name": "Period",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetBalanceSheet_200_response_balance_sheet_inner_assets_current_assets": {
        "description": "Current assets section",
        "properties": {
          "cash": {
            "description": "Cash includes currency, bank accounts, and undeposited checks",
            "examples": [
              17305000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Cash",
            "x-order": 10
          },
          "cash_equivalents": {
            "description": "Represents cash equivalents that have high credit quality and are highly liquid",
            "examples": [
              17635000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CashEquivalents",
            "x-order": 20
          },
          "cash_and_cash_equivalents": {
            "description": "Combined value of cash and cash equivalents when company doesn't report a breakdown",
            "examples": [
              34940000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CashAndCashEquivalents",
            "x-order": 30
          },
          "other_short_term_investments": {
            "description": "Represents other short term investments",
            "examples": [
              27699000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherShortTermInvestments",
            "x-order": 40
          },
          "accounts_receivable": {
            "description": "Represents the balance of money due to a firm for goods or services delivered or used but not yet paid for by customers",
            "examples": [
              26278000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccountsReceivable",
            "x-order": 50
          },
          "other_receivables": {
            "description": "Represents other receivables",
            "examples": [
              25228000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherReceivables",
            "x-order": 60
          },
          "inventory": {
            "description": "Represents the goods available for sale and raw materials used to produce goods available for sale",
            "examples": [
              6580000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Inventory",
            "x-order": 70
          },
          "prepaid_assets": {
            "description": "Represents expense that has already been paid for, but which has not yet been consumed",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PrepaidAssets",
            "x-order": 80
          },
          "restricted_cash": {
            "description": "Represents money that is held for a specific purpose and thus not available to the company for immediate or general business use",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RestrictedCash",
            "x-order": 90
          },
          "assets_held_for_sale": {
            "description": "Represents assets which company plans to sell",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AssetsHeldForSale",
            "x-order": 100
          },
          "hedging_assets": {
            "description": "Represents money that is spent on hedging assets",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "HedgingAssets",
            "x-order": 110
          },
          "other_current_assets": {
            "description": "Represents other current assets",
            "examples": [
              14111000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherCurrentAssets",
            "x-order": 120
          },
          "total_current_assets": {
            "description": "All current assets values in a total",
            "examples": [
              134836000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalCurrentAssets",
            "x-order": 130
          }
        },
        "type": "object",
        "x-go-name": "CurrentAssets",
        "x-order": 10
      },
      "GetBalanceSheet_200_response_balance_sheet_inner_assets_non_current_assets": {
        "description": "Non-current assets section",
        "properties": {
          "properties": {
            "description": "Represents property owned",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Properties",
            "x-order": 10
          },
          "land_and_improvements": {
            "description": "Represents land and improvements owned",
            "examples": [
              20041000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LandAndImprovements",
            "x-order": 20
          },
          "machinery_furniture_equipment": {
            "description": "Represents office equipment, furniture, and vehicles owned",
            "examples": [
              78659000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "MachineryFurnitureEquipment",
            "x-order": 30
          },
          "construction_in_progress": {
            "description": "Represents the cost of construction work, which is not yet completed",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ConstructionInProgress",
            "x-order": 40
          },
          "leases": {
            "description": "Represents operating and financial leases",
            "examples": [
              11023000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Leases",
            "x-order": 50
          },
          "accumulated_depreciation": {
            "description": "Represents the cumulative depreciation of an asset that has been recorded",
            "examples": [
              -70283000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccumulatedDepreciation",
            "x-order": 60
          },
          "goodwill": {
            "description": "Represents the value of a brand name, solid customer base, good customer relations, good employee relations, and proprietary technology",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Goodwill",
            "x-order": 70
          },
          "investment_properties": {
            "description": "Represents real estate property purchased with the intention of earning a return on the investment",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InvestmentProperties",
            "x-order": 80
          },
          "financial_assets": {
            "description": "Represents liquid asset that gets its value from a contractual right or ownership claim",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FinancialAssets",
            "x-order": 90
          },
          "intangible_assets": {
            "description": "Represents the patents, trademarks, and other intellectual properties",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "IntangibleAssets",
            "x-order": 100
          },
          "investments_and_advances": {
            "description": "Represents available for sale financial securities",
            "examples": [
              127877000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InvestmentsAndAdvances",
            "x-order": 110
          },
          "other_non_current_assets": {
            "description": "Represents other long-term assets",
            "examples": [
              48849000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherNonCurrentAssets",
            "x-order": 120
          },
          "total_non_current_assets": {
            "description": "All long-term assets values in total",
            "examples": [
              216166000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalNonCurrentAssets",
            "x-order": 130
          }
        },
        "type": "object",
        "x-go-name": "NonCurrentAssets",
        "x-order": 20
      },
      "GetBalanceSheet_200_response_balance_sheet_inner_assets": {
        "description": "Assets section of the balance sheet",
        "properties": {
          "current_assets": {
            "$ref": "#/components/schemas/GetBalanceSheet_200_response_balance_sheet_inner_assets_current_assets"
          },
          "non_current_assets": {
            "$ref": "#/components/schemas/GetBalanceSheet_200_response_balance_sheet_inner_assets_non_current_assets"
          },
          "total_assets": {
            "description": "The sum of total_current_assets + total_non_current_assets",
            "examples": [
              351002000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalAssets",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Assets",
        "x-order": 20
      },
      "GetBalanceSheet_200_response_balance_sheet_inner_liabilities_current_liabilities": {
        "description": "Current liabilities section",
        "properties": {
          "accounts_payable": {
            "description": "Refers to an account within the general ledger that represents an obligation to pay off a short-term debt to creditors or suppliers",
            "examples": [
              54763000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccountsPayable",
            "x-order": 10
          },
          "accrued_expenses": {
            "description": "Represents payments that a company is obligated to pay in the future for which goods and services have already been delivered",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccruedExpenses",
            "x-order": 20
          },
          "short_term_debt": {
            "description": "Represents current debt and capital lease obligations",
            "examples": [
              15613000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ShortTermDebt",
            "x-order": 30
          },
          "deferred_revenue": {
            "description": "Represents advance payments a company receives for products or services that are to be delivered or performed in the future",
            "examples": [
              7612000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DeferredRevenue",
            "x-order": 40
          },
          "tax_payable": {
            "description": "Represents taxes due to the government within one year",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TaxPayable",
            "x-order": 50
          },
          "pensions": {
            "description": "Represents to pensions to be paid out",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Pensions",
            "x-order": 60
          },
          "other_current_liabilities": {
            "description": "Represents other current liabilities",
            "examples": [
              47493000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherCurrentLiabilities",
            "x-order": 70
          },
          "total_current_liabilities": {
            "description": "Represents total current liabilities",
            "examples": [
              125481000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalCurrentLiabilities",
            "x-order": 80
          }
        },
        "type": "object",
        "x-go-name": "CurrentLiabilities",
        "x-order": 10
      },
      "GetBalanceSheet_200_response_balance_sheet_inner_liabilities_non_current_liabilities": {
        "description": "Non-current liabilities section",
        "properties": {
          "long_term_provisions": {
            "description": "Represents money set aside for employee benefits such as gratuity",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LongTermProvisions",
            "x-order": 10
          },
          "long_term_debt": {
            "description": "Represents amount of outstanding debt that has a maturity of 12 months or longer",
            "examples": [
              109106000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LongTermDebt",
            "x-order": 20
          },
          "provision_for_risks_and_charges": {
            "description": "Represents funds set aside as assets to pay for anticipated future losses",
            "examples": [
              24689000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ProvisionForRisksAndCharges",
            "x-order": 30
          },
          "deferred_liabilities": {
            "description": "Represents revenue producing activity for which revenue has not yet been recognized, and is not expected to be recognized in the next 12 months",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DeferredLiabilities",
            "x-order": 40
          },
          "derivative_product_liabilities": {
            "description": "Represents the value of derivative financial instruments that a company has issued",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DerivativeProductLiabilities",
            "x-order": 50
          },
          "other_non_current_liabilities": {
            "description": "Represents other non-current liabilities",
            "examples": [
              28636000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherNonCurrentLiabilities",
            "x-order": 60
          },
          "total_non_current_liabilities": {
            "description": "Represents total non-current liabilities",
            "examples": [
              162431000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalNonCurrentLiabilities",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-name": "NonCurrentLiabilities",
        "x-order": 20
      },
      "GetBalanceSheet_200_response_balance_sheet_inner_liabilities": {
        "description": "Liabilities section of the balance sheet",
        "properties": {
          "current_liabilities": {
            "$ref": "#/components/schemas/GetBalanceSheet_200_response_balance_sheet_inner_liabilities_current_liabilities"
          },
          "non_current_liabilities": {
            "$ref": "#/components/schemas/GetBalanceSheet_200_response_balance_sheet_inner_liabilities_non_current_liabilities"
          },
          "total_liabilities": {
            "description": "The sum of total_current_liabilities + total_non_current_liabilities",
            "examples": [
              287912000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalLiabilities",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Liabilities",
        "x-order": 30
      },
      "GetBalanceSheet_200_response_balance_sheet_inner_shareholders_equity": {
        "description": "Shareholders' equity section of the balance sheet",
        "properties": {
          "common_stock": {
            "description": "Represents net worth of investors shares, which is equal to the total_assets - total_liabilities",
            "examples": [
              57365000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CommonStock",
            "x-order": 10
          },
          "retained_earnings": {
            "description": "Refers to the profits earned minus dividends paid",
            "examples": [
              5562000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RetainedEarnings",
            "x-order": 20
          },
          "other_shareholders_equity": {
            "description": "Represents other not affecting retained earnings gains and looses",
            "examples": [
              163000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherShareholdersEquity",
            "x-order": 30
          },
          "total_shareholders_equity": {
            "description": "Represents the net worth of a company, which is the amount that would be returned to shareholders if a company's total assets were liquidated, and all of its debts were repaid",
            "examples": [
              63090000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalShareholdersEquity",
            "x-order": 40
          },
          "additional_paid_in_capital": {
            "description": "Represents the additional paid-in capital, which is the amount shareholders have invested in a company above the par value of its stock",
            "format": "double",
            "type": "number",
            "x-go-name": "AdditionalPaidInCapital",
            "x-order": 50
          },
          "treasury_stock": {
            "description": "Represents the value of shares that have been repurchased by the company and are held in its treasury",
            "format": "double",
            "type": "number",
            "x-go-name": "TreasuryStock",
            "x-order": 60
          },
          "minority_interest": {
            "description": "Represents the portion of shareholders' equity that is attributable to minority shareholders in a subsidiary company",
            "format": "double",
            "type": "number",
            "x-go-name": "MinorityInterest",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-name": "ShareholdersEquity",
        "x-order": 40
      },
      "GetBalanceSheet_200_response_balance_sheet_inner": {
        "properties": {
          "fiscal_date": {
            "description": "Date of the balance sheet release",
            "examples": [
              "2021-09-30"
            ],
            "type": "string",
            "x-go-name": "FiscalDate",
            "x-order": 10
          },
          "year": {
            "description": "Fiscal year",
            "examples": [
              2022
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Year",
            "x-order": 15
          },
          "assets": {
            "$ref": "#/components/schemas/GetBalanceSheet_200_response_balance_sheet_inner_assets"
          },
          "liabilities": {
            "$ref": "#/components/schemas/GetBalanceSheet_200_response_balance_sheet_inner_liabilities"
          },
          "shareholders_equity": {
            "$ref": "#/components/schemas/GetBalanceSheet_200_response_balance_sheet_inner_shareholders_equity"
          }
        },
        "type": "object"
      },
      "GetBalanceSheet_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetBalanceSheet_200_response_meta"
          },
          "balance_sheet": {
            "description": "Array of balance sheet records",
            "items": {
              "$ref": "#/components/schemas/GetBalanceSheet_200_response_balance_sheet_inner"
            },
            "type": "array",
            "x-go-name": "BalanceSheet",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetBalanceSheetConsolidated_200_response": {
        "properties": {
          "balance_sheet": {
            "description": "Balance sheet data",
            "items": {
              "$ref": "#/components/schemas/BalanceSheetConsolidatedItem"
            },
            "type": "array",
            "x-go-name": "BalanceSheet",
            "x-order": 10
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "advanced_request_value": {
        "properties": {
          "url": {
            "description": "Requested url",
            "examples": [
              "/time_series?symbol=AAPL&interval=1min&apikey=demo&source=docs&outputsize=2"
            ],
            "type": "string",
            "x-go-name": "Url"
          }
        },
        "type": "object"
      },
      "advanced_200_response": {
        "properties": {
          "code": {
            "description": "HTTP status code",
            "examples": [
              200
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Code",
            "x-order": 10
          },
          "status": {
            "description": "Status of the request",
            "examples": [
              "success"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          },
          "data": {
            "additionalProperties": {
              "properties": {},
              "type": "object"
            },
            "description": "Response data containing individual request results",
            "examples": [
              {
                "req_1": {
                  "response": {
                    "meta": {
                      "currency": "USD",
                      "exchange": "NASDAQ",
                      "exchange_timezone": "America/New_York",
                      "interval": "1min",
                      "mic_code": "XNGS",
                      "symbol": "AAPL",
                      "type": "Common Stock"
                    },
                    "status": "ok",
                    "values": [
                      {
                        "close": "248.6",
                        "datetime": "2025-02-21 12:51:00",
                        "high": "248.6",
                        "low": "248.4",
                        "open": "248.5",
                        "volume": "22290"
                      },
                      {
                        "close": "248.52",
                        "datetime": "2025-02-21 12:50:00",
                        "high": "248.59",
                        "low": "248.43",
                        "open": "248.52",
                        "volume": "64085"
                      }
                    ]
                  },
                  "status": "success"
                },
                "req_2": {
                  "response": {
                    "rate": 149.25999,
                    "symbol": "USD/JPY",
                    "timestamp": 1740160260
                  },
                  "status": "success"
                },
                "req_3": {
                  "response": {
                    "amount": 18209.71933,
                    "rate": 149.25999,
                    "symbol": "USD/JPY",
                    "timestamp": 1740160260
                  },
                  "status": "success"
                }
              }
            ],
            "type": "object",
            "x-go-name": "Data",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesBBands_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "BBANDS - Bollinger Bands®"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              20
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          },
          "sd": {
            "description": "Number of standard deviations",
            "examples": [
              2
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "StandardDeviation",
            "x-order": 40
          },
          "ma_type": {
            "description": "Moving average type",
            "examples": [
              "SMA"
            ],
            "type": "string",
            "x-go-name": "MAType",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesBBands_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesBBands_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesBBands_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "upper_band": {
            "description": "Upper band value",
            "examples": [
              "203.36511"
            ],
            "type": "string",
            "x-go-name": "UpperBand",
            "x-order": 20
          },
          "middle_band": {
            "description": "Middle band value",
            "examples": [
              "202.04999"
            ],
            "type": "string",
            "x-go-name": "MiddleBand",
            "x-order": 30
          },
          "lower_band": {
            "description": "Lower band value",
            "examples": [
              "200.73486"
            ],
            "type": "string",
            "x-go-name": "LowerBand",
            "x-order": 40
          }
        },
        "type": "object"
      },
      "GetTimeSeriesBBands_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesBBands_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesBBands_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesBeta_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "BETA - Beta"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type_1": {
            "description": "Price type used as the first part of technical indicator",
            "examples": [
              "open"
            ],
            "type": "string",
            "x-go-name": "SeriesType1",
            "x-order": 20
          },
          "series_type_2": {
            "description": "Price type used as the second part of technical indicator",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType2",
            "x-order": 30
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesBeta_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesBeta_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesBeta_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "beta": {
            "description": "Beta value",
            "examples": [
              "-0.05742"
            ],
            "type": "string",
            "x-go-name": "Beta",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesBeta_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesBeta_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesBeta_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetBonds_200_response_result": {
        "properties": {
          "count": {
            "description": "Total number of matching instruments",
            "examples": [
              6
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Count"
          },
          "list": {
            "items": {
              "$ref": "#/components/schemas/BondResponseItem"
            },
            "type": "array",
            "x-go-name": "Data"
          }
        },
        "type": "object",
        "x-go-name": "Result"
      },
      "GetBonds_200_response": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/GetBonds_200_response_result"
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status"
          }
        },
        "type": "object"
      },
      "GetTimeSeriesBop_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "BOP - Balance of Power"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesBop_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesBop_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesBop_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "bop": {
            "description": "Bop value",
            "examples": [
              "0.27231"
            ],
            "type": "string",
            "x-go-name": "Bop",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesBop_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesBop_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesBop_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetCashFlow_200_response_meta": {
        "description": "Meta information about the response",
        "properties": {
          "symbol": {
            "description": "Symbol ticker of instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the company",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency of the cash flow data according to the ISO 4217 standard",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 50
          },
          "exchange_timezone": {
            "description": "Exchange timezone",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "period": {
            "description": "Period of the cash flow data (Annual or Quarterly)",
            "examples": [
              "Quarterly"
            ],
            "type": "string",
            "x-go-name": "Period",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetCashFlow_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetCashFlow_200_response_meta"
          },
          "cash_flow": {
            "description": "Cash flow data",
            "items": {
              "$ref": "#/components/schemas/CashFlowStruct"
            },
            "type": "array",
            "x-go-name": "CashFlow",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetCashFlowConsolidated_200_response": {
        "properties": {
          "cash_flow": {
            "description": "Cash flow data",
            "items": {
              "$ref": "#/components/schemas/CashFlowData"
            },
            "type": "array",
            "x-go-name": "CashFlow",
            "x-order": 10
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesCci_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "CCI - Commodity Channel Index"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              20
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesCci_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesCci_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesCci_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "cci": {
            "description": "CCI value",
            "examples": [
              "-122.30794"
            ],
            "type": "string",
            "x-go-name": "Cci",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesCci_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesCci_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesCci_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesCeil_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "CEIL - Vector CEIL"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesCeil_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesCeil_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesCeil_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "ceil": {
            "description": "Ceil value",
            "examples": [
              "202.0"
            ],
            "type": "string",
            "x-go-name": "Ceil",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesCeil_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesCeil_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesCeil_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesCmo_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "CMO - Chande Momentum Oscillator"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesCmo_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesCmo_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesCmo_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "cmo": {
            "description": "CMO value",
            "examples": [
              "-71.24979"
            ],
            "type": "string",
            "x-go-name": "Cmo",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesCmo_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesCmo_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesCmo_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetCommodities_200_response": {
        "properties": {
          "data": {
            "description": "List of commodities",
            "items": {
              "$ref": "#/components/schemas/CommoditiesResponseItem"
            },
            "type": "array",
            "x-go-name": "Data"
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status"
          }
        },
        "type": "object"
      },
      "GetTimeSeriesCoppock_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "COPPOCK - Coppock Curve"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "wma_period": {
            "description": "Number of periods for weighted moving average",
            "examples": [
              10
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "WMAPeriod",
            "x-order": 30
          },
          "long_roc_period": {
            "description": "Number of periods for long term rate of change",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "LongRocPeriod",
            "x-order": 40
          },
          "short_roc_period": {
            "description": "Number of periods for short term rate of change",
            "examples": [
              11
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "ShortRocPeriod",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesCoppock_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesCoppock_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesCoppock_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "coppock": {
            "description": "Coppock value",
            "examples": [
              "-1.37253"
            ],
            "type": "string",
            "x-go-name": "Coppock",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesCoppock_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesCoppock_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesCoppock_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesCorrel_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "CORREL - Pearson's Correlation Coefficient"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type_1": {
            "description": "Price type used as the first part of technical indicator",
            "examples": [
              "open"
            ],
            "type": "string",
            "x-go-name": "SeriesType1",
            "x-order": 20
          },
          "series_type_2": {
            "description": "Price type used as the second part of technical indicator",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType2",
            "x-order": 30
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesCorrel_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesCorrel_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesCorrel_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "correl": {
            "description": "Correl value",
            "examples": [
              "0.93282"
            ],
            "type": "string",
            "x-go-name": "Correl",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesCorrel_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesCorrel_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesCorrel_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetCountries_200_response": {
        "properties": {
          "data": {
            "description": "List of countries with their ISO codes, names, capital, and currency",
            "items": {
              "$ref": "#/components/schemas/CountryResponseItem"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 10
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "GetCrossListings_200_response": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/CrossListingsResult"
          }
        },
        "type": "object"
      },
      "GetTimeSeriesCrsi_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "CRSI - ConnorsRSI"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "rsi_period": {
            "description": "Number of periods for RSI used to calculate price momentum",
            "examples": [
              3
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "RsiPeriod",
            "x-order": 30
          },
          "up_down_length": {
            "description": "Number of periods for RSI used to calculate up/down trend",
            "examples": [
              2
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "UpDownLength",
            "x-order": 40
          },
          "percent_rank_period": {
            "description": "Number of periods used to calculate PercentRank",
            "examples": [
              100
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "PercentRankPeriod",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesCrsi_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesCrsi_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesCrsi_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "crsi": {
            "description": "crsi value",
            "examples": [
              "74.76102"
            ],
            "type": "string",
            "x-go-name": "Crsi",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesCrsi_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesCrsi_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesCrsi_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetCryptocurrencies_200_response": {
        "properties": {
          "data": {
            "description": "List of cryptocurrencies",
            "items": {
              "$ref": "#/components/schemas/CryptocurrencyResponseItem"
            },
            "type": "array",
            "x-go-name": "Data"
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status"
          }
        },
        "type": "object"
      },
      "GetCryptocurrencyExchanges_200_response": {
        "properties": {
          "data": {
            "description": "List of cryptocurrency exchanges",
            "items": {
              "$ref": "#/components/schemas/CryptocurrencyExchangesResponseItem"
            },
            "type": "array",
            "x-go-name": "Data"
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status"
          }
        },
        "type": "object"
      },
      "GetCurrencyConversion_200_response": {
        "properties": {
          "symbol": {
            "description": "Requested currency symbol",
            "examples": [
              "USD/JPY"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "rate": {
            "description": "Real-time exchange rate for the corresponding symbol",
            "examples": [
              105.12
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Rate",
            "x-order": 20
          },
          "amount": {
            "description": "Amount of converted currency",
            "examples": [
              12824.64
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Amount",
            "x-order": 30
          },
          "timestamp": {
            "description": "Unix timestamp of the rate",
            "examples": [
              1602714051
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Timestamp",
            "x-order": 40
          }
        },
        "type": "object"
      },
      "GetTimeSeriesDema_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "DEMA - Double Exponential Moving Average"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesDema_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesDema_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesDema_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "dema": {
            "description": "Dema value",
            "examples": [
              "200.93371"
            ],
            "type": "string",
            "x-go-name": "Dema",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesDema_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesDema_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesDema_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetDirectHolders_200_response_meta": {
        "description": "Meta information about the financial instrument",
        "properties": {
          "symbol": {
            "description": "Ticker symbol of instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of symbol",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency of the instrument according to the ISO 4217 standard",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 50
          },
          "exchange_timezone": {
            "description": "Timezone of the exchange",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetDirectHolders_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetDirectHolders_200_response_meta"
          },
          "direct_holders": {
            "description": "List of direct holders for the financial instrument",
            "items": {
              "$ref": "#/components/schemas/HolderItem"
            },
            "type": "array",
            "x-go-name": "DirectHolders",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesDiv_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "DIV - Arithmetic Division"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type_1": {
            "description": "Price type used as the first part of technical indicator",
            "examples": [
              "open"
            ],
            "type": "string",
            "x-go-name": "SeriesType1",
            "x-order": 20
          },
          "series_type_2": {
            "description": "Price type used as the second part of technical indicator",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType2",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesDiv_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesDiv_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesDiv_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "div": {
            "description": "Div value",
            "examples": [
              "1.00201"
            ],
            "type": "string",
            "x-go-name": "Div",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesDiv_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesDiv_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesDiv_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetDividends_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "Ticker symbol of instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of symbol",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency in which instrument is traded",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 50
          },
          "exchange_timezone": {
            "description": "Timezone of the exchange",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetDividends_200_response_dividends_inner": {
        "properties": {
          "ex_date": {
            "description": "Stands for the ex date",
            "examples": [
              "2021-08-06"
            ],
            "type": "string",
            "x-go-name": "ExDate",
            "x-order": 10
          },
          "amount": {
            "description": "Stands for the payment amount",
            "examples": [
              0.22
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Amount",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetDividends_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetDividends_200_response_meta"
          },
          "dividends": {
            "description": "List of dividends",
            "items": {
              "$ref": "#/components/schemas/GetDividends_200_response_dividends_inner"
            },
            "type": "array",
            "x-go-name": "Dividends",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesDpo_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "DPO - Detrended Price Oscillator"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              21
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          },
          "centered": {
            "description": "Specifies if there should be a shift to match the current price",
            "examples": [
              false
            ],
            "type": "boolean",
            "x-go-name": "Centered",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesDpo_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesDpo_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesDpo_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2025-04-01"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "dpo": {
            "description": "DPO value",
            "examples": [
              "-7.99619"
            ],
            "type": "string",
            "x-go-name": "Dpo",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesDpo_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesDpo_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesDpo_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesDx_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "DX - Directional Movement Index"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesDx_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesDx_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesDx_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "dx": {
            "description": "dx value",
            "examples": [
              "68.70803"
            ],
            "type": "string",
            "x-go-name": "Dx",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesDx_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesDx_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesDx_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetEarliestTimestamp_200_response": {
        "properties": {
          "datetime": {
            "description": "Earliest datetime, the format depends on interval",
            "examples": [
              "1980-12-12"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 50
          },
          "unix_time": {
            "description": "Datetime converted to UNIX timestamp",
            "examples": [
              345479400
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "UnixTime",
            "x-order": 50
          }
        },
        "type": "object"
      },
      "GetEarnings_200_response_meta": {
        "description": "Metadata about the instrument",
        "properties": {
          "symbol": {
            "description": "Symbol of the instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the company",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency in which the instrument is traded",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange": {
            "description": "Exchange where the instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 50
          },
          "exchange_timezone": {
            "description": "Timezone of the exchange",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetEarnings_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetEarnings_200_response_meta"
          },
          "earnings": {
            "description": "List of earnings data",
            "items": {
              "$ref": "#/components/schemas/EarningsItem"
            },
            "type": "array",
            "x-go-name": "Earnings",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetEarningsCalendar_200_response_earnings_value_inner": {
        "properties": {
          "symbol": {
            "description": "Instrument symbol (ticker)",
            "examples": [
              "BR"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Full name of instrument",
            "examples": [
              "Broadridge Financial Solutions Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency in which instrument is traded by ISO 4217 standard",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NYSE"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNYS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 50
          },
          "country": {
            "description": "Country where exchange is located",
            "examples": [
              "United States"
            ],
            "type": "string",
            "x-go-name": "Country",
            "x-order": 60
          },
          "time": {
            "description": "Can be either of the following values: `Pre Market`, `After Hours`, `Time Not Supplied`",
            "examples": [
              "Time Not Supplied"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 70
          },
          "eps_estimate": {
            "description": "Analyst estimate of the future company earning",
            "examples": [
              1.72
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EpsEstimate",
            "x-order": 80
          },
          "eps_actual": {
            "description": "Actual value of reported earning",
            "examples": [
              1.67
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EpsActual",
            "x-order": 90
          },
          "difference": {
            "description": "Delta between `eps_actual` and `eps_estimate`",
            "examples": [
              -0.05
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Difference",
            "x-order": 100
          },
          "surprise_prc": {
            "description": "Surprise in percentage of the `eps_actual` related to `eps_estimate`",
            "examples": [
              -2.9
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SurprisePrc",
            "x-order": 110
          }
        },
        "type": "object"
      },
      "GetEarningsCalendar_200_response": {
        "properties": {
          "earnings": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/GetEarningsCalendar_200_response_earnings_value_inner"
              },
              "type": "array"
            },
            "description": "Map of dates to earnings data",
            "type": "object",
            "x-example-key": "2020-04-30",
            "x-go-name": "Earnings",
            "x-order": 10
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetEarningsEstimate_200_response_meta": {
        "description": "Meta information about the symbol",
        "properties": {
          "symbol": {
            "description": "Symbol ticker of the instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the instrument",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency in which the instrument is traded",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "Timezone of the exchange",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 40
          },
          "exchange": {
            "description": "Exchange where the instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 50
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNGS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 60
          },
          "type": {
            "description": "Type of the instrument",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetEarningsEstimate_200_response_earnings_estimate_inner": {
        "properties": {
          "date": {
            "description": "Date of the earnings estimate",
            "examples": [
              "2022-09-30"
            ],
            "type": "string",
            "x-go-name": "Date",
            "x-order": 10
          },
          "period": {
            "description": "Period of estimation, can be `current_quarter`, `next_quarter`, `current_year`, or `next_year`",
            "examples": [
              "current_quarter"
            ],
            "type": "string",
            "x-go-name": "Period",
            "x-order": 20
          },
          "number_of_analysts": {
            "description": "Number of analysts that made the estimation",
            "examples": [
              27
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "NumberOfAnalysts",
            "x-order": 30
          },
          "avg_estimate": {
            "description": "Average estimation across analysts",
            "examples": [
              1.26
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AvgEstimate",
            "x-order": 40
          },
          "low_estimate": {
            "description": "Lowest estimation given by an analyst",
            "examples": [
              1.13
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LowEstimate",
            "x-order": 50
          },
          "high_estimate": {
            "description": "Highest estimation given by an analyst",
            "examples": [
              1.35
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "HighEstimate",
            "x-order": 60
          },
          "year_ago_eps": {
            "description": "Average estimation of this period's earnings given a year ago",
            "examples": [
              1.24
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "YearAgoEPS",
            "x-order": 70
          }
        },
        "type": "object"
      },
      "GetEarningsEstimate_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetEarningsEstimate_200_response_meta"
          },
          "earnings_estimate": {
            "description": "List of earnings estimates",
            "items": {
              "$ref": "#/components/schemas/GetEarningsEstimate_200_response_earnings_estimate_inner"
            },
            "type": "array",
            "x-go-name": "EarningsEstimate",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetEdgarFilingsArchive_200_response_meta": {
        "description": "Meta information about the company and listing",
        "properties": {
          "symbol": {
            "description": "Ticker of the company",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "exchange": {
            "description": "Exchange name where the company is listed",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 20
          },
          "mic_code": {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "examples": [
              "XNGS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 30
          },
          "type": {
            "description": "Issue type of the stock",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetEdgarFilingsArchive_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetEdgarFilingsArchive_200_response_meta"
          },
          "values": {
            "description": "List of filings",
            "items": {
              "$ref": "#/components/schemas/EdgarFilingValue"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesEma_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "EMA - Exponential Moving Average"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesEma_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesEma_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesEma_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "ema": {
            "description": "EMA value",
            "examples": [
              "201.38109"
            ],
            "type": "string",
            "x-go-name": "Ema",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesEma_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesEma_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesEma_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetEod_200_response": {
        "properties": {
          "symbol": {
            "description": "Symbol passed",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 20
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 30
          },
          "currency": {
            "description": "Currency in which instrument is denominated",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 40
          },
          "datetime": {
            "description": "Datetime in defined timezone referring to when the bar with specified interval was opened",
            "examples": [
              "2021-09-16"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 50
          },
          "close": {
            "description": "The most recent end of day close price",
            "examples": [
              "148.79"
            ],
            "type": "string",
            "x-go-name": "Close",
            "x-order": 60
          }
        },
        "type": "object"
      },
      "GetEpsRevisions_200_response_eps_revision_inner": {
        "properties": {
          "date": {
            "description": "Date of the EPS estimate",
            "examples": [
              "2022-09-30"
            ],
            "type": "string",
            "x-go-name": "Date",
            "x-order": 10
          },
          "period": {
            "description": "Period of estimation, can be `current_quarter`, `next_quarter`, `current_year`, or `next_year`",
            "examples": [
              "current_quarter"
            ],
            "type": "string",
            "x-go-name": "Period",
            "x-order": 20
          },
          "up_last_week": {
            "description": "Number of up revisions over the last 7 days",
            "examples": [
              1
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "UpLastWeek",
            "x-order": 30
          },
          "up_last_month": {
            "description": "Number of up revisions over the last 30 days",
            "examples": [
              5
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "UpLastMonth",
            "x-order": 40
          },
          "down_last_week": {
            "description": "Number of down revisions over the last 7 days",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "DownLastWeek",
            "x-order": 50
          },
          "down_last_month": {
            "description": "Number of down revisions over the last 30 days",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "DownLastMonth",
            "x-order": 60
          }
        },
        "type": "object"
      },
      "GetEpsRevisions_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetEarningsEstimate_200_response_meta"
          },
          "eps_revision": {
            "description": "EPS revision data",
            "items": {
              "$ref": "#/components/schemas/GetEpsRevisions_200_response_eps_revision_inner"
            },
            "type": "array",
            "x-go-name": "EpsRevision",
            "x-order": 20
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetEpsTrend_200_response_eps_trend_inner": {
        "properties": {
          "date": {
            "description": "Date of the estimation",
            "examples": [
              "2022-09-30"
            ],
            "type": "string",
            "x-go-name": "Date",
            "x-order": 10
          },
          "period": {
            "description": "Period of estimation, can be `current_quarter`, `next_quarter`, `current_year`, or `next_year`",
            "examples": [
              "current_quarter"
            ],
            "type": "string",
            "x-go-name": "Period",
            "x-order": 20
          },
          "current_estimate": {
            "description": "Actual EPS estimation for the period",
            "examples": [
              1.26
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CurrentEstimate",
            "x-order": 30
          },
          "7_days_ago": {
            "description": "EPS estimation value 7 days ago",
            "examples": [
              1.26
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SevenDaysAgo",
            "x-order": 40
          },
          "30_days_ago": {
            "description": "EPS estimation value 30 days ago",
            "examples": [
              1.31
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ThirtyDaysAgo",
            "x-order": 50
          },
          "60_days_ago": {
            "description": "EPS estimation value 60 days ago",
            "examples": [
              1.32
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SixtyDaysAgo",
            "x-order": 60
          },
          "90_days_ago": {
            "description": "EPS estimation value 90 days ago",
            "examples": [
              1.33
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NinetyDaysAgo",
            "x-order": 70
          }
        },
        "type": "object"
      },
      "GetEpsTrend_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetEarningsEstimate_200_response_meta"
          },
          "eps_trend": {
            "description": "EPS trend data",
            "items": {
              "$ref": "#/components/schemas/GetEpsTrend_200_response_eps_trend_inner"
            },
            "type": "array",
            "x-go-name": "EpsTrend",
            "x-order": 20
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetEtf_200_response": {
        "properties": {
          "data": {
            "description": "List of ETFs",
            "items": {
              "$ref": "#/components/schemas/EtfResponseItem"
            },
            "type": "array",
            "x-go-name": "Data"
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status"
          }
        },
        "type": "object"
      },
      "GetETFsFamily_200_response": {
        "properties": {
          "result": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "description": "List of ETFs by country",
            "examples": [
              {
                "India": [
                  "Aberdeen Standard Fund Managers Limited",
                  "Aditya Birla Sun Life AMC Ltd"
                ],
                "United States": [
                  "Aegon Asset Management UK PLC",
                  "Ampega Investment GmbH",
                  "Aviva SpA"
                ]
              }
            ],
            "type": "object",
            "x-go-name": "Result",
            "x-order": 10
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetETFsList_200_response_result": {
        "properties": {
          "count": {
            "description": "Total number of matching funds",
            "examples": [
              1000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Count",
            "x-order": 10
          },
          "list": {
            "description": "List of ETFs",
            "items": {
              "$ref": "#/components/schemas/ETFsListResponseItem"
            },
            "type": "array",
            "x-go-name": "List",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Result",
        "x-order": 10
      },
      "GetETFsList_200_response": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/GetETFsList_200_response_result"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetETFsType_200_response": {
        "properties": {
          "result": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "description": "List of ETFs by type",
            "examples": [
              {
                "Singapore": [
                  "Property - Indirect Asia",
                  "Sector Equity Water"
                ],
                "United States": [
                  "Asia-Pacific ex-Japan Equity",
                  "EUR Flexible Allocation - Global"
                ]
              }
            ],
            "type": "object",
            "x-go-name": "Result",
            "x-order": 10
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetETFsWorld_200_response_etf_summary": {
        "description": "A brief summary of a etf",
        "properties": {
          "symbol": {
            "description": "All available fund types segmented by country",
            "examples": [
              "IVV"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Fund name",
            "examples": [
              "iShares Core S&P 500 ETF"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "fund_family": {
            "description": "Investment company that manages the fund",
            "examples": [
              "iShares"
            ],
            "type": "string",
            "x-go-name": "FundFamily",
            "x-order": 30
          },
          "fund_type": {
            "description": "Type of the fund",
            "examples": [
              "Large Blend"
            ],
            "type": "string",
            "x-go-name": "FundType",
            "x-order": 40
          },
          "currency": {
            "description": "Currency of fund price",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 50
          },
          "share_class_inception_date": {
            "description": "The date from which the fund started operations and the returns are calculated",
            "examples": [
              "2000-11-13"
            ],
            "type": "string",
            "x-go-name": "ShareClassInceptionDate",
            "x-order": 60
          },
          "ytd_return": {
            "description": "Percentage of profit of the fund since the first trading day of the current calendar year",
            "examples": [
              -0.0537
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "YtdReturn",
            "x-order": 70
          },
          "expense_ratio_net": {
            "description": "Percentage of ETF assets steered toward a fund's operating expenses and fund management fees",
            "examples": [
              -0.004
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ExpenseRatioNet",
            "x-order": 80
          },
          "yield": {
            "description": "Income returned to its investors through interest and dividends generated by the fund's investments",
            "examples": [
              0.0133
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Yield",
            "x-order": 90
          },
          "nav": {
            "description": "Net Asset Value: fund value minus liabilities",
            "examples": [
              413.24
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Nav",
            "x-order": 100
          },
          "last_price": {
            "description": "Last price of the fund",
            "examples": [
              413.24
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LastPrice",
            "x-order": 110
          },
          "turnover_rate": {
            "description": "Percentage rate at which ETF replaces its holdings on investment every year",
            "examples": [
              0.04
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TurnoverRate",
            "x-order": 130
          },
          "net_assets": {
            "description": "Total assets of a fund minus its total liabilities",
            "examples": [
              753409982464
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "NetAssets",
            "x-order": 140
          },
          "overview": {
            "description": "Description of the fund",
            "examples": [
              "The investment seeks to track the performance of the Standard & Poor's 500..."
            ],
            "type": "string",
            "x-go-name": "Overview",
            "x-order": 150
          }
        },
        "type": "object",
        "x-go-name": "Summary",
        "x-order": 10
      },
      "GetETFsWorld_200_response_etf_performance_trailing_returns_inner": {
        "properties": {
          "period": {
            "description": "Period of trailing returns",
            "examples": [
              "ytd"
            ],
            "type": "string",
            "x-go-name": "Period",
            "x-order": 10
          },
          "share_class_return": {
            "description": "Fund returns (%) generated over a given period",
            "examples": [
              -0.0751
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ShareClassReturn",
            "x-order": 20
          },
          "category_return": {
            "description": "Same category average returns (%) generated over a given period",
            "examples": [
              0.1484
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CategoryReturn",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetETFsWorld_200_response_etf_performance_annual_total_returns_inner": {
        "properties": {
          "year": {
            "description": "Year of total returns",
            "examples": [
              2021
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Year",
            "x-order": 10
          },
          "share_class_return": {
            "description": "Fund total returns (%) generated over a given year",
            "examples": [
              0.2866
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ShareClassReturn",
            "x-order": 20
          },
          "category_return": {
            "description": "Same category average total returns (%) generated over a given year",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CategoryReturn",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetETFsWorld_200_response_etf_performance": {
        "description": "Detailed performance of a etf",
        "properties": {
          "trailing_returns": {
            "description": "Performance returns of the fund and its category over various trailing time periods",
            "items": {
              "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_performance_trailing_returns_inner"
            },
            "type": "array",
            "x-go-name": "TrailingReturns",
            "x-order": 10
          },
          "annual_total_returns": {
            "description": "Fund and category total returns (%) for each calendar year",
            "items": {
              "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_performance_annual_total_returns_inner"
            },
            "type": "array",
            "x-go-name": "AnnualTotalReturns",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Performance",
        "x-order": 20
      },
      "GetETFsWorld_200_response_etf_risk_volatility_measures_inner": {
        "properties": {
          "period": {
            "description": "Period of a measure",
            "examples": [
              "3_year"
            ],
            "type": "string",
            "x-go-name": "Period",
            "x-order": 10
          },
          "alpha": {
            "description": "Alpha score of a fund",
            "examples": [
              -0.03
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Alpha",
            "x-order": 20
          },
          "alpha_category": {
            "description": "Average alpha score of a fund's category",
            "examples": [
              -0.02
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AlphaCategory",
            "x-order": 30
          },
          "beta": {
            "description": "Beta score of a fund",
            "examples": [
              1
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Beta",
            "x-order": 40
          },
          "beta_category": {
            "description": "Average beta score of a fund's category",
            "examples": [
              0.01
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "BetaCategory",
            "x-order": 50
          },
          "mean_annual_return": {
            "description": "Mean annual return of a fund",
            "examples": [
              1.58
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "MeanAnnualReturn",
            "x-order": 60
          },
          "mean_annual_return_category": {
            "description": "Average mean annual return of a fund's category",
            "examples": [
              0.01
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "MeanAnnualReturnCategory",
            "x-order": 70
          },
          "r_squared": {
            "description": "R-squared metric of a fund",
            "examples": [
              100
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RSquared",
            "x-order": 80
          },
          "r_squared_category": {
            "description": "Average r-squared metric of a fund's category",
            "examples": [
              0.95
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RSquaredCategory",
            "x-order": 90
          },
          "std": {
            "description": "Standard deviation of a fund",
            "examples": [
              18.52
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Std",
            "x-order": 100
          },
          "std_category": {
            "description": "Average standard deviation of a fund's category",
            "examples": [
              0.19
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "StdCategory",
            "x-order": 110
          },
          "sharpe_ratio": {
            "description": "Sharpe ratio of a fund",
            "examples": [
              0.95
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SharpeRatio",
            "x-order": 120
          },
          "sharpe_ratio_category": {
            "description": "Average sharpe ratio of a fund's category",
            "examples": [
              0.01
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SharpeRatioCategory",
            "x-order": 130
          },
          "treynor_ratio": {
            "description": "Treynor ratio of a fund",
            "examples": [
              17.41
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TreynorRatio",
            "x-order": 140
          },
          "treynor_ratio_category": {
            "description": "Average treynor ratio of a fund's category",
            "examples": [
              0.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TreynorRatioCategory",
            "x-order": 150
          }
        },
        "type": "object"
      },
      "GetETFsWorld_200_response_etf_risk_valuation_metrics": {
        "description": "Valuation ratios and metrics of the fund and its category",
        "properties": {
          "price_to_earnings": {
            "description": "Fund price to earnings metric",
            "examples": [
              26.46
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceToEarnings",
            "x-order": 10
          },
          "price_to_book": {
            "description": "Fund price to book metric",
            "examples": [
              4.42
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceToBook",
            "x-order": 30
          },
          "price_to_sales": {
            "description": "Fund price to sales metric",
            "examples": [
              2.96
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceToSales",
            "x-order": 50
          },
          "price_to_cashflow": {
            "description": "Fund price to cashflow metric",
            "examples": [
              17.57
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceToCashflow",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-name": "ValuationMetrics",
        "x-order": 20
      },
      "GetETFsWorld_200_response_etf_risk": {
        "description": "Risk metrics of a etf",
        "properties": {
          "volatility_measures": {
            "description": "Risk and volatility statistics of the fund and its category over different periods",
            "items": {
              "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_risk_volatility_measures_inner"
            },
            "type": "array",
            "x-go-name": "VolatilityMeasures",
            "x-order": 10
          },
          "valuation_metrics": {
            "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_risk_valuation_metrics"
          }
        },
        "type": "object",
        "x-go-name": "Risk",
        "x-order": 30
      },
      "GetETFsWorld_200_response_etf_composition_major_market_sectors_inner": {
        "properties": {
          "sector": {
            "description": "Sector category of a fund exposure",
            "examples": [
              "Technology"
            ],
            "type": "string",
            "x-go-name": "Sector",
            "x-order": 10
          },
          "weight": {
            "description": "Weight (%) of a fund exposure in a sector",
            "examples": [
              0.2424
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Weight",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetETFsWorld_200_response_etf_composition_country_allocation_inner": {
        "properties": {
          "country": {
            "description": "Country name",
            "examples": [
              "United Kingdom"
            ],
            "type": "string",
            "x-go-name": "Country",
            "x-order": 10
          },
          "allocation": {
            "description": "Percentages of a fund's net assets distributed to securities of the country",
            "examples": [
              0.9855
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Allocation",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetETFsWorld_200_response_etf_composition_asset_allocation": {
        "description": "Asset allocation of a fund by different asset classes and their respective weights",
        "properties": {
          "cash": {
            "description": "Percentage of overall portfolio composition in cash",
            "examples": [
              0.0004
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Cash",
            "x-order": 10
          },
          "stocks": {
            "description": "Percentage of overall portfolio composition in stocks",
            "examples": [
              0.9996
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Stocks",
            "x-order": 20
          },
          "preferred_stocks": {
            "description": "Percentage of overall portfolio composition in preferred stocks",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PreferredStocks",
            "x-order": 30
          },
          "convertables": {
            "description": "Percentage of overall portfolio composition in convertable securities",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Convertables",
            "x-order": 40
          },
          "bonds": {
            "description": "Percentage of overall portfolio composition in bond",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Bonds",
            "x-order": 50
          },
          "others": {
            "description": "Percentage of overall portfolio composition in other forms of holding",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Others",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "AssetAllocation",
        "x-order": 30
      },
      "GetETFsWorld_200_response_etf_composition_top_holdings_inner": {
        "properties": {
          "symbol": {
            "description": "Symbol ticker of a holding instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of a holding instrument",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "weight": {
            "description": "Weight (%) of a holding instrument in overall portfolio composition",
            "examples": [
              0.0592
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Weight",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetETFsWorld_200_response_etf_composition_bond_breakdown_average_maturity": {
        "description": "Average credit rating of bond holding of a fund",
        "properties": {
          "fund": {
            "description": "Average maturity of bond holding of a fund",
            "examples": [
              6.65
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Fund",
            "x-order": 10
          },
          "category": {
            "description": "Average maturity of bond holding of funds in the same category",
            "examples": [
              7.81
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Category",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "AverageMaturity",
        "x-order": 10
      },
      "GetETFsWorld_200_response_etf_composition_bond_breakdown_average_duration": {
        "description": "Average duration of bond holding of a fund",
        "properties": {
          "fund": {
            "description": "Average duration of bond holding of a fund",
            "examples": [
              5.72
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Fund",
            "x-order": 10
          },
          "category": {
            "description": "Average duration of bond holding of funds in the same category",
            "examples": [
              5.64
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Category",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "AverageDuration",
        "x-order": 20
      },
      "GetETFsWorld_200_response_etf_composition_bond_breakdown_credit_quality_inner": {
        "properties": {
          "grade": {
            "description": "Rating of bond holding of a fund from AAA to below B",
            "examples": [
              "AAA"
            ],
            "type": "string",
            "x-go-name": "Grade",
            "x-order": 10
          },
          "weight": {
            "description": "Weight of bond holding in fund portfolio",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Weight",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetETFsWorld_200_response_etf_composition_bond_breakdown": {
        "description": "Breakdown of the fund’s portfolio by bond holding characteristics",
        "properties": {
          "average_maturity": {
            "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_composition_bond_breakdown_average_maturity"
          },
          "average_duration": {
            "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_composition_bond_breakdown_average_duration"
          },
          "credit_quality": {
            "description": "Breakdown of the fund’s bond holdings by credit rating and their respective portfolio weights",
            "items": {
              "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_composition_bond_breakdown_credit_quality_inner"
            },
            "type": "array",
            "x-go-name": "CreditQuality",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "BondBreakdown",
        "x-order": 50
      },
      "GetETFsWorld_200_response_etf_composition": {
        "description": "Composition of a etf",
        "properties": {
          "major_market_sectors": {
            "description": "Breakdown of the fund’s portfolio by major industry sectors and their respective weights",
            "items": {
              "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_composition_major_market_sectors_inner"
            },
            "type": "array",
            "x-go-name": "MajorMarketSectors",
            "x-order": 10
          },
          "country_allocation": {
            "description": "Breakdown of the fund’s portfolio by country and their respective weights",
            "items": {
              "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_composition_country_allocation_inner"
            },
            "type": "array",
            "x-go-name": "CountryAllocation",
            "x-order": 20
          },
          "asset_allocation": {
            "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_composition_asset_allocation"
          },
          "top_holdings": {
            "description": "Top holdings of a fund with their respective weights in the overall portfolio composition",
            "items": {
              "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_composition_top_holdings_inner"
            },
            "type": "array",
            "x-go-name": "TopHoldings",
            "x-order": 40
          },
          "bond_breakdown": {
            "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_composition_bond_breakdown"
          }
        },
        "type": "object",
        "x-go-name": "Composition",
        "x-order": 40
      },
      "GetETFsWorld_200_response_etf": {
        "description": "Etf information",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_summary"
          },
          "performance": {
            "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_performance"
          },
          "risk": {
            "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_risk"
          },
          "composition": {
            "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_composition"
          }
        },
        "type": "object",
        "x-go-name": "Etf",
        "x-order": 10
      },
      "GetETFsWorld_200_response": {
        "properties": {
          "etf": {
            "$ref": "#/components/schemas/GetETFsWorld_200_response_etf"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetETFsWorldComposition_200_response_etf_composition": {
        "description": "Composition of a etf",
        "properties": {
          "major_market_sectors": {
            "description": "Breakdown of the fund’s portfolio by major industry sectors and their respective weights",
            "items": {
              "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_composition_major_market_sectors_inner"
            },
            "type": "array",
            "x-go-name": "MajorMarketSectors",
            "x-order": 10
          },
          "country_allocation": {
            "description": "Breakdown of the fund’s portfolio by country and their respective weights",
            "items": {
              "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_composition_country_allocation_inner"
            },
            "type": "array",
            "x-go-name": "CountryAllocation",
            "x-order": 20
          },
          "asset_allocation": {
            "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_composition_asset_allocation"
          },
          "top_holdings": {
            "description": "Top holdings of a fund with their respective weights in the overall portfolio composition",
            "items": {
              "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_composition_top_holdings_inner"
            },
            "type": "array",
            "x-go-name": "TopHoldings",
            "x-order": 40
          },
          "bond_breakdown": {
            "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_composition_bond_breakdown"
          }
        },
        "type": "object",
        "x-go-name": "Composition",
        "x-order": 10
      },
      "GetETFsWorldComposition_200_response_etf": {
        "description": "Etf information",
        "properties": {
          "composition": {
            "$ref": "#/components/schemas/GetETFsWorldComposition_200_response_etf_composition"
          }
        },
        "type": "object",
        "x-go-name": "Etf",
        "x-order": 10
      },
      "GetETFsWorldComposition_200_response": {
        "properties": {
          "etf": {
            "$ref": "#/components/schemas/GetETFsWorldComposition_200_response_etf"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetETFsWorldPerformance_200_response_etf_performance": {
        "description": "Detailed performance of a etf",
        "properties": {
          "trailing_returns": {
            "description": "Performance returns of the fund and its category over various trailing time periods",
            "items": {
              "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_performance_trailing_returns_inner"
            },
            "type": "array",
            "x-go-name": "TrailingReturns",
            "x-order": 10
          },
          "annual_total_returns": {
            "description": "Fund and category total returns (%) for each calendar year",
            "items": {
              "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_performance_annual_total_returns_inner"
            },
            "type": "array",
            "x-go-name": "AnnualTotalReturns",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Performance",
        "x-order": 10
      },
      "GetETFsWorldPerformance_200_response_etf": {
        "description": "Etf information",
        "properties": {
          "performance": {
            "$ref": "#/components/schemas/GetETFsWorldPerformance_200_response_etf_performance"
          }
        },
        "type": "object",
        "x-go-name": "Etf",
        "x-order": 10
      },
      "GetETFsWorldPerformance_200_response": {
        "properties": {
          "etf": {
            "$ref": "#/components/schemas/GetETFsWorldPerformance_200_response_etf"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetETFsWorldRisk_200_response_etf_risk": {
        "description": "Risk metrics of a etf",
        "properties": {
          "volatility_measures": {
            "description": "Risk and volatility statistics of the fund and its category over different periods",
            "items": {
              "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_risk_volatility_measures_inner"
            },
            "type": "array",
            "x-go-name": "VolatilityMeasures",
            "x-order": 10
          },
          "valuation_metrics": {
            "$ref": "#/components/schemas/GetETFsWorld_200_response_etf_risk_valuation_metrics"
          }
        },
        "type": "object",
        "x-go-name": "Risk",
        "x-order": 10
      },
      "GetETFsWorldRisk_200_response_etf": {
        "description": "Etf information",
        "properties": {
          "risk": {
            "$ref": "#/components/schemas/GetETFsWorldRisk_200_response_etf_risk"
          }
        },
        "type": "object",
        "x-go-name": "Etf",
        "x-order": 10
      },
      "GetETFsWorldRisk_200_response": {
        "properties": {
          "etf": {
            "$ref": "#/components/schemas/GetETFsWorldRisk_200_response_etf"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetETFsWorldSummary_200_response_etf_summary": {
        "description": "A brief summary of a ETF",
        "properties": {
          "symbol": {
            "description": "All available fund types segmented by country",
            "examples": [
              "IVV"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Fund name",
            "examples": [
              "iShares Core S&P 500 ETF"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "fund_family": {
            "description": "Investment company that manages the fund",
            "examples": [
              "iShares"
            ],
            "type": "string",
            "x-go-name": "FundFamily",
            "x-order": 30
          },
          "fund_type": {
            "description": "Type of the fund",
            "examples": [
              "Large Blend"
            ],
            "type": "string",
            "x-go-name": "FundType",
            "x-order": 40
          },
          "currency": {
            "description": "Currency of fund price",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 50
          },
          "share_class_inception_date": {
            "description": "The date from which the fund started operations and the returns are calculated",
            "examples": [
              "2000-11-13"
            ],
            "type": "string",
            "x-go-name": "ShareClassInceptionDate",
            "x-order": 60
          },
          "ytd_return": {
            "description": "Percentage of profit of the fund since the first trading day of the current calendar year",
            "examples": [
              -0.0537
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "YtdReturn",
            "x-order": 70
          },
          "expense_ratio_net": {
            "description": "Percentage of ETF assets steered toward a fund's operating expenses and fund management fees",
            "examples": [
              -0.004
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ExpenseRatioNet",
            "x-order": 80
          },
          "yield": {
            "description": "Income returned to its investors through interest and dividends generated by the fund's investments",
            "examples": [
              0.0133
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Yield",
            "x-order": 90
          },
          "nav": {
            "description": "Net Asset Value: fund value minus liabilities",
            "examples": [
              413.24
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Nav",
            "x-order": 100
          },
          "last_price": {
            "description": "Last price of the fund",
            "examples": [
              413.24
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LastPrice",
            "x-order": 110
          },
          "turnover_rate": {
            "description": "Percentage rate at which ETF replaces its holdings on investment every year",
            "examples": [
              0.04
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TurnoverRate",
            "x-order": 130
          },
          "net_assets": {
            "description": "Total assets of a fund minus its total liabilities",
            "examples": [
              753409982464
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "NetAssets",
            "x-order": 140
          },
          "overview": {
            "description": "Description of the fund",
            "examples": [
              "The investment seeks to track the performance of the Standard & Poor's 500..."
            ],
            "type": "string",
            "x-go-name": "Overview",
            "x-order": 150
          }
        },
        "type": "object",
        "x-go-name": "Summary",
        "x-order": 10
      },
      "GetETFsWorldSummary_200_response_etf": {
        "description": "Etf information",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/GetETFsWorldSummary_200_response_etf_summary"
          }
        },
        "type": "object",
        "x-go-name": "Etf",
        "x-order": 10
      },
      "GetETFsWorldSummary_200_response": {
        "properties": {
          "etf": {
            "$ref": "#/components/schemas/GetETFsWorldSummary_200_response_etf"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetExchangeRate_200_response": {
        "properties": {
          "symbol": {
            "description": "Requested currency symbol",
            "examples": [
              "USD/JPY"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "rate": {
            "description": "Real-time exchange rate for the corresponding symbol",
            "examples": [
              105.12
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Rate",
            "x-order": 20
          },
          "timestamp": {
            "description": "Unix timestamp of the rate",
            "examples": [
              1602714051
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Timestamp",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetExchangeSchedule_200_response": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ExchangeScheduleResponseItem"
            },
            "type": "array",
            "x-go-name": "Data"
          }
        },
        "type": "object"
      },
      "GetExchanges_200_response": {
        "properties": {
          "data": {
            "description": "List of exchanges",
            "items": {
              "$ref": "#/components/schemas/ExchangesResponseItem"
            },
            "type": "array",
            "x-go-name": "Data"
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status"
          }
        },
        "type": "object"
      },
      "GetTimeSeriesExp_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "EXP - Exponential"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesExp_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesExp_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesExp_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "exp": {
            "description": "Exp value",
            "examples": [
              "2.0649375034375067e+87"
            ],
            "type": "string",
            "x-go-name": "Exp",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesExp_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesExp_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesExp_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesFloor_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "FLOOR - Vector FLOOR"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesFloor_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesFloor_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesFloor_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "floor": {
            "description": "Floor value",
            "examples": [
              "201.0"
            ],
            "type": "string",
            "x-go-name": "Floor",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesFloor_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesFloor_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesFloor_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetForexPairs_200_response": {
        "properties": {
          "data": {
            "description": "List of forex pairs",
            "items": {
              "$ref": "#/components/schemas/ForexResponseItem"
            },
            "type": "array",
            "x-go-name": "Data"
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status"
          }
        },
        "type": "object"
      },
      "GetFundHolders_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetDirectHolders_200_response_meta"
          },
          "fund_holders": {
            "description": "List of fund holders for the financial instrument",
            "items": {
              "$ref": "#/components/schemas/HolderItem"
            },
            "type": "array",
            "x-go-name": "FundHolders",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetFunds_200_response_result": {
        "properties": {
          "count": {
            "description": "Total number of matching instruments",
            "examples": [
              84799
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Count"
          },
          "list": {
            "items": {
              "$ref": "#/components/schemas/FundResponseItem"
            },
            "type": "array",
            "x-go-name": "Data"
          }
        },
        "type": "object",
        "x-go-name": "Result"
      },
      "GetFunds_200_response": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/GetFunds_200_response_result"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status"
          }
        },
        "type": "object"
      },
      "GetGrowthEstimates_200_response_growth_estimates": {
        "description": "Growth estimates data",
        "properties": {
          "current_quarter": {
            "description": "Projected growth of the current quarter in percentage (%)",
            "examples": [
              0.016
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CurrentQuarter",
            "x-order": 10
          },
          "next_quarter": {
            "description": "Projected growth of the next quarter in percentage (%)",
            "examples": [
              0.01
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NextQuarter",
            "x-order": 20
          },
          "current_year": {
            "description": "Projected growth of the current year in percentage (%)",
            "examples": [
              0.087
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CurrentYear",
            "x-order": 30
          },
          "next_year": {
            "description": "Projected growth of the next year in percentage (%)",
            "examples": [
              0.055999998
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NextYear",
            "x-order": 40
          },
          "next_5_years_pa": {
            "description": "Projected growth during the next 5 years in percentage (%) per annum",
            "examples": [
              0.094799995
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Next5YearsPA",
            "x-order": 50
          },
          "past_5_years_pa": {
            "description": "Actual growth over the last 5 years in percentage (%) per annum",
            "examples": [
              0.23867
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Past5YearsPA",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "GrowthEstimates",
        "x-order": 20
      },
      "GetGrowthEstimates_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetEarningsEstimate_200_response_meta"
          },
          "growth_estimates": {
            "$ref": "#/components/schemas/GetGrowthEstimates_200_response_growth_estimates"
          },
          "status": {
            "description": "Status of the request",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHeikinashiCandles_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "HEIKINASHICANDLES - Heikin-Ashi Candles"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesHeikinashiCandles_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesHeikinashiCandles_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesHeikinashiCandles_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "heikinhighs": {
            "description": "Heikin-Ashi highs value",
            "examples": [
              "201.25599"
            ],
            "type": "string",
            "x-go-name": "HeikinHighs",
            "x-order": 20
          },
          "heikinopens": {
            "description": "Heikin-Ashi opens value",
            "examples": [
              "200.9825"
            ],
            "type": "string",
            "x-go-name": "HeikinOpens",
            "x-order": 30
          },
          "heikincloses": {
            "description": "Heikin-Ashi closes value",
            "examples": [
              "201.02449"
            ],
            "type": "string",
            "x-go-name": "HeikinCloses",
            "x-order": 40
          },
          "heikinlows": {
            "description": "Heikin-Ashi lows value",
            "examples": [
              "200.85199"
            ],
            "type": "string",
            "x-go-name": "HeikinLows",
            "x-order": 50
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHeikinashiCandles_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesHeikinashiCandles_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesHeikinashiCandles_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHlc3_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "HLC3 - High, Low, Close Average Values"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesHlc3_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesHlc3_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesHlc3_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "hlc3": {
            "description": "hlc3 value",
            "examples": [
              "201.05266"
            ],
            "type": "string",
            "x-go-name": "Hlc3",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHlc3_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesHlc3_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesHlc3_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHtDcPeriod_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "HT_DCPERIOD - Hilbert Transform Dominant Cycle Period"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesHtDcPeriod_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesHtDcPeriod_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesHtDcPeriod_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "ht_dcperiod": {
            "description": "ht_dcperiod value",
            "examples": [
              "28.12565"
            ],
            "type": "string",
            "x-go-name": "HtDcPeriod",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHtDcPeriod_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesHtDcPeriod_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesHtDcPeriod_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHtDcPhase_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "HT_DCPHASE - Hilbert Transform Dominant Cycle Phase"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesHtDcPhase_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesHtDcPhase_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesHtDcPhase_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "ht_dcphase": {
            "description": "HT_DCPHASE value",
            "examples": [
              "-38.50975"
            ],
            "type": "string",
            "x-go-name": "HtDcPhase",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHtDcPhase_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesHtDcPhase_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesHtDcPhase_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHtPhasor_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "HT_PHASOR - Hilbert Transform Phasor Components"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesHtPhasor_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesHtPhasor_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesHtPhasor_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "in_phase": {
            "description": "In_phase value",
            "examples": [
              "-0.56826"
            ],
            "type": "string",
            "x-go-name": "InPhase",
            "x-order": 20
          },
          "quadrature": {
            "description": "Quadrature value",
            "examples": [
              "-0.43318"
            ],
            "type": "string",
            "x-go-name": "Quadrature",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHtPhasor_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesHtPhasor_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesHtPhasor_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHtSine_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "HT_SINE - Hilbert Transform SineWave"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesHtSine_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesHtSine_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesHtSine_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "ht_sine": {
            "description": "ht_sine value",
            "examples": [
              "-0.62265"
            ],
            "type": "string",
            "x-go-name": "HtSine",
            "x-order": 20
          },
          "ht_leadsine": {
            "description": "ht_leadsine value",
            "examples": [
              "0.11303"
            ],
            "type": "string",
            "x-go-name": "HtLeadSine",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHtSine_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesHtSine_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesHtSine_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHtTrendline_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "HT_TRENDLINE - Hilbert Transform Instantaneous Trendline"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesHtTrendline_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesHtTrendline_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesHtTrendline_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "ht_trendline": {
            "description": "HT_TRENDLINE value",
            "examples": [
              "202.26597"
            ],
            "type": "string",
            "x-go-name": "HtTrendline",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHtTrendline_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesHtTrendline_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesHtTrendline_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHtTrendMode_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "HT_TRENDMODE - Hilbert Transform Trend vs Cycle Mode"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesHtTrendMode_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesHtTrendMode_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesHtTrendMode_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "ht_trendmode": {
            "description": "ht_trendmode value",
            "examples": [
              "0"
            ],
            "type": "string",
            "x-go-name": "HtTrendMode",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesHtTrendMode_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesHtTrendMode_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesHtTrendMode_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesIchimoku_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "ICHIMOKU - Ichimoku Kinkō Hyō"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "conversion_line_period": {
            "description": "The time period used for generating the conversation line",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "ConversionLinePeriod",
            "x-order": 20
          },
          "base_line_period": {
            "description": "The time period used for generating the base line",
            "examples": [
              26
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "BaseLinePeriod",
            "x-order": 30
          },
          "leading_span_b_period": {
            "description": "The time period used for generating the leading span B line",
            "examples": [
              52
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "LeadingSpanBPeriod",
            "x-order": 40
          },
          "lagging_span_period": {
            "description": "The time period used for generating the lagging span line",
            "examples": [
              26
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "LaggingSpanPeriod",
            "x-order": 50
          },
          "include_ahead_span_period": {
            "description": "Indicates whether to include ahead span period",
            "examples": [
              true
            ],
            "type": "boolean",
            "x-go-name": "IncludeAheadSpanPeriod",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesIchimoku_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesIchimoku_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesIchimoku_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "tenkan_sen": {
            "description": "Tenkan-sen value",
            "examples": [
              "200.33"
            ],
            "type": "string",
            "x-go-name": "TenkanSen",
            "x-order": 20
          },
          "kijun_sen": {
            "description": "Kijun-sen value",
            "examples": [
              "201.42"
            ],
            "type": "string",
            "x-go-name": "KijunSen",
            "x-order": 30
          },
          "senkou_span_a": {
            "description": "Senkou span A value",
            "examples": [
              "201.49"
            ],
            "type": "string",
            "x-go-name": "SenkouSpanA",
            "x-order": 40
          },
          "senkou_span_b": {
            "description": "Senkou span B value",
            "examples": [
              "200.35501"
            ],
            "type": "string",
            "x-go-name": "SenkouSpanB",
            "x-order": 50
          },
          "chikou_span": {
            "description": "Chikou span value",
            "examples": [
              "199.95499"
            ],
            "type": "string",
            "x-go-name": "ChikouSpan",
            "x-order": 60
          }
        },
        "type": "object"
      },
      "GetTimeSeriesIchimoku_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesIchimoku_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesIchimoku_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetIncomeStatement_200_response_meta": {
        "description": "Meta information about the instrument",
        "properties": {
          "symbol": {
            "description": "Symbol ticker of the instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the company",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency of the instrument according to the ISO 4217 standard",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange": {
            "description": "Exchange where the instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 50
          },
          "exchange_timezone": {
            "description": "Exchange timezone",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "period": {
            "description": "Period of the income statement (Annual or Quarterly)",
            "examples": [
              "Quarterly"
            ],
            "type": "string",
            "x-go-name": "Period",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetIncomeStatement_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetIncomeStatement_200_response_meta"
          },
          "income_statement": {
            "description": "Income statement data",
            "items": {
              "$ref": "#/components/schemas/IncomeStatementBlock"
            },
            "type": "array",
            "x-go-name": "IncomeStatement",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetIncomeStatementConsolidated_200_response": {
        "properties": {
          "income_statement": {
            "description": "Income statement data",
            "items": {
              "$ref": "#/components/schemas/IncomeStatementItem"
            },
            "type": "array",
            "x-go-name": "IncomeStatement",
            "x-order": 10
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetInsiderTransactions_200_response_meta": {
        "description": "Metadata about the instrument",
        "properties": {
          "symbol": {
            "description": "Ticker symbol of instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the company",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency of the instrument according to the ISO 4217 standard",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 50
          },
          "exchange_timezone": {
            "description": "Timezone of the exchange",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetInsiderTransactions_200_response_insider_transactions_inner": {
        "properties": {
          "full_name": {
            "description": "Full name of an individual, including first name, middle name, last name, and suffix",
            "examples": [
              "ADAMS KATHERINE L"
            ],
            "type": "string",
            "x-go-name": "FullName",
            "x-order": 10
          },
          "position": {
            "description": "Job position of insider",
            "examples": [
              "General Counsel"
            ],
            "type": "string",
            "x-go-name": "Position",
            "x-order": 20
          },
          "date_reported": {
            "description": "Date the transaction was reported",
            "examples": [
              "2021-05-03"
            ],
            "type": "string",
            "x-go-name": "DateReported",
            "x-order": 30
          },
          "is_direct": {
            "description": "`true` if direct, `false` if indirect",
            "examples": [
              true
            ],
            "type": "boolean",
            "x-go-name": "IsDirect",
            "x-order": 40
          },
          "shares": {
            "description": "As per report the number of shares acquired or disposed of the transaction",
            "examples": [
              17000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Shares",
            "x-order": 50
          },
          "value": {
            "description": "Represents the value of transaction, calculated as price multiplied by the volume",
            "examples": [
              2257631
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Value",
            "x-order": 60
          },
          "description": {
            "description": "Exact price or price range of the transaction if available",
            "examples": [
              "Sale at price 132.57 - 133.93 per share."
            ],
            "type": "string",
            "x-go-name": "Description",
            "x-order": 70
          }
        },
        "type": "object"
      },
      "GetInsiderTransactions_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetInsiderTransactions_200_response_meta"
          },
          "insider_transactions": {
            "description": "List of insider transactions",
            "items": {
              "$ref": "#/components/schemas/GetInsiderTransactions_200_response_insider_transactions_inner"
            },
            "type": "array",
            "x-go-name": "InsiderTransactions",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetInstitutionalHolders_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetDirectHolders_200_response_meta"
          },
          "institutional_holders": {
            "description": "List of institutional holders for the financial instrument",
            "items": {
              "$ref": "#/components/schemas/HolderItem"
            },
            "type": "array",
            "x-go-name": "InstitutionalHolders",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetInstrumentType_200_response": {
        "properties": {
          "result": {
            "description": "List of instrument types available at Twelve Data API.",
            "examples": [
              [
                "Agricultural Product",
                "American Depositary Receipt",
                "Bond",
                "Bond Fund",
                "Closed-end Fund",
                "Common Stock",
                "Depositary Receipt",
                "Digital Currency",
                "Energy Resource",
                "ETF",
                "Exchange-Traded Note",
                "Global Depositary Receipt",
                "Index",
                "Industrial Metal",
                "Limited Partnership",
                "Livestock",
                "Mutual Fund",
                "Physical Currency",
                "Precious Metal",
                "Preferred Stock",
                "REIT",
                "Right",
                "Structured Product",
                "Trust",
                "Unit",
                "Warrant"
              ]
            ],
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "Result"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status"
          }
        },
        "type": "object"
      },
      "GetIntervals_200_response": {
        "properties": {
          "data": {
            "description": "List of available intervals",
            "examples": [
              [
                "1min",
                "5min",
                "15min",
                "30min",
                "45min",
                "1h",
                "2h",
                "4h",
                "8h",
                "1day",
                "1week",
                "1month"
              ]
            ],
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "Data"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status"
          }
        },
        "type": "object"
      },
      "GetIpoCalendar_200_response_value_inner": {
        "properties": {
          "symbol": {
            "description": "Ticker of the company",
            "examples": [
              "DWACU"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the company",
            "examples": [
              "Digital World Acquisition Corp."
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "exchange": {
            "description": "Exchange name where the company is listed",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 30
          },
          "mic_code": {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MICCode",
            "x-order": 40
          },
          "price_range_low": {
            "description": "The lower bound of stock price range if available",
            "examples": [
              10
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceRangeLow",
            "x-order": 50
          },
          "price_range_high": {
            "description": "The upper bound of stock price range if available",
            "examples": [
              10
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceRangeHigh",
            "x-order": 60
          },
          "offer_price": {
            "description": "Initial offer price if available",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OfferPrice",
            "x-order": 70
          },
          "currency": {
            "description": "Currency of the stock",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 80
          },
          "shares": {
            "description": "Number of shares, if available",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Shares",
            "x-order": 90
          }
        },
        "type": "object"
      },
      "GetTimeSeriesKama_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "KAMA - Kaufman's Adaptive Moving Average"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesKama_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesKama_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesKama_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 10
          },
          "kama": {
            "description": "Kama value",
            "examples": [
              "201.06741"
            ],
            "type": "string",
            "x-go-name": "Kama",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesKama_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesKama_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesKama_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Values",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesKeltner_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "KELTNER - Keltner Channels"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              20
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          },
          "atr_time_period": {
            "description": "The time period used for calculating the Average True Range",
            "examples": [
              10
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "ATRTimePeriod",
            "x-order": 30
          },
          "multiplier": {
            "description": "The factor used to adjust the indicator's sensitivity",
            "examples": [
              2
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Multiplier",
            "x-order": 40
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 50
          },
          "ma_type": {
            "description": "The type of moving average used",
            "examples": [
              "SMA"
            ],
            "type": "string",
            "x-go-name": "MAType",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesKeltner_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesKeltner_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesKeltner_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "upper_line": {
            "description": "Upper line value",
            "examples": [
              "202.25298"
            ],
            "type": "string",
            "x-go-name": "KeltnerUpper",
            "x-order": 20
          },
          "middle_line": {
            "description": "Middle line value",
            "examples": [
              "201.80985"
            ],
            "type": "string",
            "x-go-name": "KeltnerMiddle",
            "x-order": 30
          },
          "lower_line": {
            "description": "Lower line value",
            "examples": [
              "201.36672"
            ],
            "type": "string",
            "x-go-name": "KeltnerLower",
            "x-order": 40
          }
        },
        "type": "object"
      },
      "GetTimeSeriesKeltner_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesKeltner_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesKeltner_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetKeyExecutives_200_response_meta": {
        "description": "Meta information about the instrument",
        "properties": {
          "symbol": {
            "description": "Ticker symbol of instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the company",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency code in which the instrument is denominated",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 50
          },
          "exchange_timezone": {
            "description": "Timezone of the exchange",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetKeyExecutives_200_response_key_executives_inner": {
        "properties": {
          "name": {
            "description": "Full name of an executive, including first name, middle name, last name, and suffix",
            "examples": [
              "Mr. Timothy D. Cook"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "title": {
            "description": "Refers to job title",
            "examples": [
              "CEO & Director"
            ],
            "type": "string",
            "x-go-name": "Title",
            "x-order": 20
          },
          "age": {
            "description": "Current age of an executive if available",
            "examples": [
              59
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Age",
            "x-order": 30
          },
          "year_born": {
            "description": "Year of birth of an executive if available",
            "examples": [
              1961
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "YearBorn",
            "x-order": 40
          },
          "pay": {
            "description": "Total salary of an executive if available",
            "examples": [
              14769259
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Pay",
            "x-order": 50
          }
        },
        "type": "object"
      },
      "GetKeyExecutives_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetKeyExecutives_200_response_meta"
          },
          "key_executives": {
            "description": "List of key executives",
            "items": {
              "$ref": "#/components/schemas/GetKeyExecutives_200_response_key_executives_inner"
            },
            "type": "array",
            "x-go-name": "KeyExecutives",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesKst_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "KST - Know Sure Thing"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "roc_period_1": {
            "description": "The time period for the first Rate of Change calculation",
            "examples": [
              10
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "RocPeriod1",
            "x-order": 20
          },
          "roc_period_2": {
            "description": "The time period for the second Rate of Change calculation",
            "examples": [
              15
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "RocPeriod2",
            "x-order": 30
          },
          "roc_period_3": {
            "description": "The time period for the third Rate of Change calculation",
            "examples": [
              20
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "RocPeriod3",
            "x-order": 40
          },
          "roc_period_4": {
            "description": "The time period for the forth Rate of Change calculation",
            "examples": [
              30
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "RocPeriod4",
            "x-order": 50
          },
          "sma_period_1": {
            "description": "The time period for the first Simple Moving Average",
            "examples": [
              10
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SmaPeriod1",
            "x-order": 60
          },
          "sma_period_2": {
            "description": "The time period for the second Simple Moving Average",
            "examples": [
              10
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SmaPeriod2",
            "x-order": 70
          },
          "sma_period_3": {
            "description": "The time period for the third Simple Moving Average",
            "examples": [
              10
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SmaPeriod3",
            "x-order": 80
          },
          "sma_period_4": {
            "description": "The time period for the forth Simple Moving Average",
            "examples": [
              15
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SmaPeriod4",
            "x-order": 90
          },
          "signal_period": {
            "description": "The time period used for generating the signal line",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SignalPeriod",
            "x-order": 100
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesKst_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesKst_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesKst_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "kst": {
            "description": "KST value",
            "examples": [
              "-4.58644"
            ],
            "type": "string",
            "x-go-name": "Kst",
            "x-order": 20
          },
          "kst_signal": {
            "description": "KST signal value",
            "examples": [
              "-2.05236"
            ],
            "type": "string",
            "x-go-name": "KstSignal",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesKst_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesKst_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesKst_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetLastChanges_200_response_pagination": {
        "description": "Pagination information",
        "properties": {
          "current_page": {
            "description": "Current page number",
            "examples": [
              1
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "CurrentPage",
            "x-order": 10
          },
          "per_page": {
            "description": "Records per page",
            "examples": [
              30
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "PerPage",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Pagination",
        "x-order": 10
      },
      "GetLastChanges_200_response": {
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/GetLastChanges_200_response_pagination"
          },
          "data": {
            "description": "Data contains the list of last changes",
            "items": {
              "$ref": "#/components/schemas/LastChangeResponseItem"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesLinearReg_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "LINEARREG - Linear Regression"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesLinearReg_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesLinearReg_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesLinearReg_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "linearreg": {
            "description": "linearreg value",
            "examples": [
              "200.79327"
            ],
            "type": "string",
            "x-go-name": "LinearReg",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesLinearReg_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesLinearReg_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesLinearReg_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesLinearRegAngle_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "LINEARREGANGLE - Linear Regression Angle"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesLinearRegAngle_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesLinearRegAngle_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesLinearRegAngle_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "linearregangle": {
            "description": "Linear regression angle value",
            "examples": [
              "-8.79357"
            ],
            "type": "string",
            "x-go-name": "LinearRegAngle",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesLinearRegAngle_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesLinearRegAngle_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesLinearRegAngle_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesLinearRegIntercept_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "LINEARREGINTERCEPT - Linear Regression Intercept"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesLinearRegIntercept_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesLinearRegIntercept_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesLinearRegIntercept_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "linearregintercept": {
            "description": "Linear Regression Intercept value",
            "examples": [
              "202.03082"
            ],
            "type": "string",
            "x-go-name": "LinearRegIntercept",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesLinearRegIntercept_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesLinearRegIntercept_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesLinearRegIntercept_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesLinearRegSlope_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "LINEARREGSLOPE - Linear Regression Slope"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesLinearRegSlope_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesLinearRegSlope_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesLinearRegSlope_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "linearregslope": {
            "description": "linearregslope value",
            "examples": [
              "-0.15469"
            ],
            "type": "string",
            "x-go-name": "LinearRegSlope",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesLinearRegSlope_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesLinearRegSlope_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesLinearRegSlope_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesLn_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "LN - Natural Logarithm to the base of constant e"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesLn_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesLn_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesLn_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "ln": {
            "description": "Natural logarithm value",
            "examples": [
              "5.30355"
            ],
            "type": "string",
            "x-go-name": "Ln",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesLn_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesLn_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesLn_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesLog10_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "LOG10 - Logarithm to base 10"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesLog10_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesLog10_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesLog10_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "log10": {
            "description": "Log10 value",
            "examples": [
              "2.3033"
            ],
            "type": "string",
            "x-go-name": "Log10",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesLog10_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesLog10_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesLog10_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetLogo_200_response_meta": {
        "description": "Meta information about the instrument",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "exchange": {
            "description": "The exchange where the instrument is traded (for `crypto` only)",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetLogo_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetLogo_200_response_meta"
          },
          "url": {
            "description": "Link to download the logo (for stocks only)",
            "examples": [
              "https://api.twelvedata.com/logo/apple.com"
            ],
            "type": "string",
            "x-go-name": "URL",
            "x-order": 20
          },
          "logo_base": {
            "description": "Link to download the base currency logo (for `forex` and `crypto` only)",
            "examples": [
              "https://logo.twelvedata.com/forex/eur.png"
            ],
            "type": "string",
            "x-go-name": "LogoBase",
            "x-order": 30
          },
          "logo_quote": {
            "description": "Link to download the quote currency logo (for `forex` and `crypto` only)",
            "examples": [
              "https://logo.twelvedata.com/forex/usd.png"
            ],
            "type": "string",
            "x-go-name": "LogoQuote",
            "x-order": 40
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMa_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MA - Moving Average"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          },
          "ma_type": {
            "description": "The type of moving average used",
            "examples": [
              "SMA"
            ],
            "type": "string",
            "x-go-name": "MAType",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMa_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMa_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMa_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "ma": {
            "description": "MA value",
            "examples": [
              "201.41205"
            ],
            "type": "string",
            "x-go-name": "Ma",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMa_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMa_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMa_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMacd_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MACD - Moving Average Convergence Divergence"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "fast_period": {
            "description": "Fast period value",
            "examples": [
              12
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "FastPeriod",
            "x-order": 30
          },
          "slow_period": {
            "description": "Slow period value",
            "examples": [
              26
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SlowPeriod",
            "x-order": 40
          },
          "signal_period": {
            "description": "Signal period value",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SignalPeriod",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMacd_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMacd_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMacd_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "macd": {
            "description": "MACD value",
            "examples": [
              "-0.3998"
            ],
            "type": "string",
            "x-go-name": "Macd",
            "x-order": 20
          },
          "macd_signal": {
            "description": "MACD signal line value",
            "examples": [
              "-0.25279"
            ],
            "type": "string",
            "x-go-name": "MacdSignal",
            "x-order": 30
          },
          "macd_hist": {
            "description": "MACD histogram value",
            "examples": [
              "-0.147"
            ],
            "type": "string",
            "x-go-name": "MacdHist",
            "x-order": 40
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMacd_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMacd_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMacd_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMacdSlope_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MACD_SLOPE - Moving Average Convergence Divergence Regression Slope"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "fast_period": {
            "description": "The shorter time period for calculation",
            "examples": [
              12
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "FastPeriod",
            "x-order": 30
          },
          "slow_period": {
            "description": "The longer time period for calculation",
            "examples": [
              26
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SlowPeriod",
            "x-order": 40
          },
          "signal_period": {
            "description": "The time period used for generating the signal line",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SignalPeriod",
            "x-order": 50
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMacdSlope_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMacdSlope_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMacdSlope_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "macd_slope": {
            "description": "MACD slope value",
            "examples": [
              "0.13358"
            ],
            "type": "string",
            "x-go-name": "MacdSlope",
            "x-order": 20
          },
          "macd_signal_slope": {
            "description": "MACD signal slope value",
            "examples": [
              "0.05345"
            ],
            "type": "string",
            "x-go-name": "MacdSignalSlope",
            "x-order": 30
          },
          "macd_hist_slope": {
            "description": "MACD histogram slope value",
            "examples": [
              "0.08013"
            ],
            "type": "string",
            "x-go-name": "MacdHistSlope",
            "x-order": 40
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMacdSlope_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMacdSlope_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMacdSlope_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMacdExt_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MACDEXT - Moving Average Convergence Divergence Extended"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 5
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 10
          },
          "fast_period": {
            "description": "The shorter time period for calculation",
            "examples": [
              12
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "FastPeriod",
            "x-order": 20
          },
          "fast_ma_type": {
            "description": "The type of fast moving average used in the calculation",
            "examples": [
              "SMA"
            ],
            "type": "string",
            "x-go-name": "FastMAType",
            "x-order": 30
          },
          "slow_period": {
            "description": "The longer time period for calculation",
            "examples": [
              26
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SlowPeriod",
            "x-order": 40
          },
          "slow_ma_type": {
            "description": "The type of slow moving average used in the calculation",
            "examples": [
              "SMA"
            ],
            "type": "string",
            "x-go-name": "SlowMAType",
            "x-order": 50
          },
          "signal_period": {
            "description": "The time period used for generating the signal line",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SignalPeriod",
            "x-order": 60
          },
          "signal_ma_type": {
            "description": "The type of moving average used for generating the signal line",
            "examples": [
              "SMA"
            ],
            "type": "string",
            "x-go-name": "SignalMAType",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMacdExt_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMacdExt_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMacdExt_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "macd": {
            "description": "MACD value",
            "examples": [
              "-0.54508"
            ],
            "type": "string",
            "x-go-name": "Macd",
            "x-order": 20
          },
          "macd_signal": {
            "description": "MACD signal line value",
            "examples": [
              "-0.25615"
            ],
            "type": "string",
            "x-go-name": "MacdSignal",
            "x-order": 30
          },
          "macd_hist": {
            "description": "MACD histogram value",
            "examples": [
              "-0.28894"
            ],
            "type": "string",
            "x-go-name": "MacdHist",
            "x-order": 40
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMacdExt_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMacdExt_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMacdExt_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMama_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MAMA - MESA Adaptive Moving Average"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "fast_limit": {
            "description": "The limit for the fast moving average",
            "examples": [
              0.5
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FastLimit",
            "x-order": 30
          },
          "slow_limit": {
            "description": "The limit for the slow moving average",
            "examples": [
              0.05
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SlowLimit",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMama_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMama_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMama_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "mama": {
            "description": "MAMA value",
            "examples": [
              "201.38887"
            ],
            "type": "string",
            "x-go-name": "Mama",
            "x-order": 20
          },
          "fama": {
            "description": "FAMA value",
            "examples": [
              "202.05517"
            ],
            "type": "string",
            "x-go-name": "Fama",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMama_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMama_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMama_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetMarketCap_200_response_meta": {
        "description": "Meta information about the company",
        "properties": {
          "symbol": {
            "description": "Ticker of the company",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the company",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency in which instrument is traded by ISO 4217 standard",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange": {
            "description": "Exchange name where the company is listed",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          },
          "mic_code": {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 50
          },
          "exchange_timezone": {
            "description": "Exchange timezone",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetMarketCap_200_response_market_cap_inner": {
        "properties": {
          "date": {
            "description": "Market capitalization date",
            "examples": [
              "2021-08-06"
            ],
            "type": "string",
            "x-go-name": "Date",
            "x-order": 10
          },
          "value": {
            "description": "Market capitalization value",
            "examples": [
              10000000000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Value",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetMarketCap_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetMarketCap_200_response_meta"
          },
          "market_cap": {
            "description": "Market capitalization values",
            "items": {
              "$ref": "#/components/schemas/GetMarketCap_200_response_market_cap_inner"
            },
            "type": "array",
            "x-go-name": "MarketCap",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMax_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MAX - Highest value over period"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMax_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMax_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMax_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "max": {
            "description": "Max value",
            "examples": [
              "202.05"
            ],
            "type": "string",
            "x-go-name": "Max",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMax_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMax_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMax_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMaxIndex_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MAXINDEX - Index of highest value over period"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMaxIndex_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMaxIndex_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMaxIndex_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "maxidx": {
            "description": "maxidx value",
            "examples": [
              "491"
            ],
            "type": "string",
            "x-go-name": "MaxIndex",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMaxIndex_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMaxIndex_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMaxIndex_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMcGinleyDynamic_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MCGINLEY_DYNAMIC - McGinley Dynamic"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMcGinleyDynamic_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMcGinleyDynamic_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMcGinleyDynamic_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "mcginley_dynamic": {
            "description": "McGinley Dynamic value",
            "examples": [
              "201.93983"
            ],
            "type": "string",
            "x-go-name": "McGinleyDynamic",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMcGinleyDynamic_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMcGinleyDynamic_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMcGinleyDynamic_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMedPrice_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MEDPRICE - Median Price"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMedPrice_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMedPrice_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMedPrice_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "medprice": {
            "description": "Medprice value",
            "examples": [
              "201.05399"
            ],
            "type": "string",
            "x-go-name": "MedPrice",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMedPrice_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMedPrice_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMedPrice_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMfi_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MFI - Money Flow Index"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMfi_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMfi_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMfi_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "mfi": {
            "description": "MFI value",
            "examples": [
              "22.68525"
            ],
            "type": "string",
            "x-go-name": "Mfi",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMfi_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMfi_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMfi_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMidPoint_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MIDPOINT - MidPoint over period"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMidPoint_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMidPoint_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMidPoint_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "midpoint": {
            "description": "Midpoint value",
            "examples": [
              "201.4925"
            ],
            "type": "string",
            "x-go-name": "MidPoint",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMidPoint_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMidPoint_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMidPoint_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMidPrice_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MIDPRICE - Midpoint Price over period"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMidPrice_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMidPrice_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMidPrice_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "midprice": {
            "description": "Midprice value",
            "examples": [
              "201.535"
            ],
            "type": "string",
            "x-go-name": "MidPrice",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMidPrice_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMidPrice_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMidPrice_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMin_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MIN - Lowest value over period"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMin_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMin_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMin_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "min": {
            "description": "Min value",
            "examples": [
              "200.935"
            ],
            "type": "string",
            "x-go-name": "Min",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMin_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMin_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMin_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMinIndex_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MININDEX - Index of lowest value over period"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMinIndex_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMinIndex_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMinIndex_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "minidx": {
            "description": "Index of lowest value over period",
            "examples": [
              "498"
            ],
            "type": "string",
            "x-go-name": "MinIndex",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMinIndex_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMinIndex_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMinIndex_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMinMax_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MINMAX - Lowest and highest values over period"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMinMax_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMinMax_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMinMax_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "min": {
            "description": "Min value",
            "examples": [
              "200.935"
            ],
            "type": "string",
            "x-go-name": "Min",
            "x-order": 20
          },
          "max": {
            "description": "Max value",
            "examples": [
              "202.05"
            ],
            "type": "string",
            "x-go-name": "Max",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMinMax_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMinMax_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMinMax_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMinMaxIndex_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MINMAXINDEX - Indexes of lowest and highest values over period"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMinMaxIndex_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMinMaxIndex_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMinMaxIndex_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "minidx": {
            "description": "Index of the lowest value over the specified period",
            "examples": [
              "498"
            ],
            "type": "string",
            "x-go-name": "MinIndex",
            "x-order": 20
          },
          "maxidx": {
            "description": "Index of the highest value over the specified period",
            "examples": [
              "491"
            ],
            "type": "string",
            "x-go-name": "MaxIndex",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMinMaxIndex_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMinMaxIndex_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMinMaxIndex_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMinusDI_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MINUS_DI - Minus Directional Indicator"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMinusDI_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMinusDI_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMinusDI_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "minus_di": {
            "description": "Minus_di value",
            "examples": [
              "46.60579"
            ],
            "type": "string",
            "x-go-name": "MinusDI",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMinusDI_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMinusDI_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMinusDI_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMinusDM_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MINUS_DM - Minus Directional Movement"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMinusDM_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMinusDM_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMinusDM_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "minus_dm": {
            "description": "Minus Directional Movement value",
            "examples": [
              "0.96291"
            ],
            "type": "string",
            "x-go-name": "MinusDM",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMinusDM_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMinusDM_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMinusDM_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMom_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MOM - Momentum"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMom_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMom_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMom_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "mom": {
            "description": "Mom value",
            "examples": [
              "-1.14"
            ],
            "type": "string",
            "x-go-name": "Mom",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMom_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMom_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMom_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMult_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "MULT - Arithmetic Multiply"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type_1": {
            "description": "Specifies the first price data type",
            "examples": [
              "open"
            ],
            "type": "string",
            "x-go-name": "SeriesType1",
            "x-order": 20
          },
          "series_type_2": {
            "description": "Specifies the second price data type",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType2",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesMult_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesMult_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesMult_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "mult": {
            "description": "Mult value",
            "examples": [
              "40422.66609"
            ],
            "type": "string",
            "x-go-name": "Mult",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesMult_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesMult_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesMult_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetMutualFundsFamily_200_response": {
        "properties": {
          "result": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "description": "List of fund families by country",
            "examples": [
              {
                "India": [
                  "Aberdeen Standard Fund Managers Limited",
                  "Aditya Birla Sun Life AMC Ltd"
                ],
                "United States": [
                  "Aegon Asset Management UK PLC",
                  "Ampega Investment GmbH",
                  "Aviva SpA"
                ]
              }
            ],
            "type": "object",
            "x-go-name": "Result",
            "x-order": 10
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetMutualFundsList_200_response_result": {
        "description": "Response result",
        "properties": {
          "count": {
            "description": "Total number of matching funds",
            "examples": [
              1000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Count",
            "x-order": 10
          },
          "list": {
            "description": "List of mutual funds",
            "items": {
              "$ref": "#/components/schemas/MutualFundsListResponseListItem"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Result"
      },
      "GetMutualFundsList_200_response": {
        "properties": {
          "result": {
            "$ref": "#/components/schemas/GetMutualFundsList_200_response_result"
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status"
          }
        },
        "type": "object"
      },
      "GetMutualFundsType_200_response": {
        "properties": {
          "result": {
            "additionalProperties": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "description": "List of fund types by country",
            "examples": [
              {
                "Singapore": [
                  "Property - Indirect Asia",
                  "Sector Equity Water",
                  "SGD Bond",
                  "Singapore Equity",
                  "Taiwan Large-Cap Equity"
                ],
                "United States": [
                  "Asia-Pacific ex-Japan Equity",
                  "EUR Flexible Allocation - Global",
                  "Euro Short Bond PP",
                  "Large Blend",
                  "Other Allocation"
                ]
              }
            ],
            "type": "object",
            "x-go-name": "Result",
            "x-order": 10
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorld_200_response_mutual_fund_summary_people_inner": {
        "properties": {
          "name": {
            "description": "Manager name",
            "examples": [
              "John Doe"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "tenure_since": {
            "description": "Manager tenuring date",
            "examples": [
              "2018-01-01"
            ],
            "type": "string",
            "x-go-name": "TenureSince",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorld_200_response_mutual_fund_summary": {
        "description": "A brief summary of a mutual fund",
        "properties": {
          "symbol": {
            "description": "All available fund types segmented by country",
            "examples": [
              "0P0001LCQ3"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Fund name",
            "examples": [
              "JNL Small Cap Index Fund (I)"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "fund_family": {
            "description": "Investment company that manages the fund",
            "examples": [
              "Jackson National"
            ],
            "type": "string",
            "x-go-name": "FundFamily",
            "x-order": 30
          },
          "fund_type": {
            "description": "Type of the fund",
            "examples": [
              "Small Blend"
            ],
            "type": "string",
            "x-go-name": "FundType",
            "x-order": 40
          },
          "currency": {
            "description": "Currency of fund price",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 50
          },
          "share_class_inception_date": {
            "description": "The date from which the fund started operations and the returns are calculated",
            "examples": [
              "2021-04-26"
            ],
            "type": "string",
            "x-go-name": "ShareClassInceptionDate",
            "x-order": 60
          },
          "ytd_return": {
            "description": "Percentage of profit of the fund since the first trading day of the current calendar year",
            "examples": [
              -0.02986
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "YtdReturn",
            "x-order": 70
          },
          "expense_ratio_net": {
            "description": "Percentage of mutual fund assets steered toward a fund's operating expenses and fund management fees",
            "examples": [
              0.001
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ExpenseRatioNet",
            "x-order": 80
          },
          "yield": {
            "description": "Income returned to its investors through interest and dividends generated by the fund's investments",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Yield",
            "x-order": 90
          },
          "nav": {
            "description": "Net Asset Value: fund value minus liabilities",
            "examples": [
              10.09
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Nav",
            "x-order": 100
          },
          "min_investment": {
            "description": "Investment minimum",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "MinInvestment",
            "x-order": 110
          },
          "turnover_rate": {
            "description": "Percentage rate at which mutual fund replaces its holdings on investment every year",
            "examples": [
              0.32
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TurnoverRate",
            "x-order": 120
          },
          "net_assets": {
            "description": "Total assets of a fund minus its total liabilities",
            "examples": [
              2400762112
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "NetAssets",
            "x-order": 130
          },
          "overview": {
            "description": "Description of the fund",
            "examples": [
              "The fund invests, normally, at least 80% of its assets in the stocks..."
            ],
            "type": "string",
            "x-go-name": "Overview",
            "x-order": 140
          },
          "people": {
            "description": "Information about the fund’s managers",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_summary_people_inner"
            },
            "type": "array",
            "x-go-name": "People",
            "x-order": 150
          }
        },
        "type": "object",
        "x-go-name": "Summary",
        "x-order": 10
      },
      "GetMutualFundsWorld_200_response_mutual_fund_performance_trailing_returns_inner": {
        "properties": {
          "period": {
            "description": "Period of trailing returns",
            "examples": [
              "ytd"
            ],
            "type": "string",
            "x-go-name": "Period",
            "x-order": 10
          },
          "share_class_return": {
            "description": "Fund returns (%) generated over a given period",
            "examples": [
              -0.02986
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ShareClassReturn",
            "x-order": 20
          },
          "category_return": {
            "description": "Same category average returns (%) generated over a given period",
            "examples": [
              0.2019
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CategoryReturn",
            "x-order": 30
          },
          "rank_in_category": {
            "description": "Rank of a fund in category by total returns",
            "examples": [
              76
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "RankInCategory",
            "x-order": 40
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorld_200_response_mutual_fund_performance_annual_total_returns_inner": {
        "properties": {
          "year": {
            "description": "Year of total returns",
            "examples": [
              2024
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Year",
            "x-order": 10
          },
          "share_class_return": {
            "description": "Fund total returns (%) generated over a given year",
            "examples": [
              0.08546
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ShareClassReturn",
            "x-order": 20
          },
          "category_return": {
            "description": "Same category average total returns (%) generated over a given year",
            "examples": [
              0.1119
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CategoryReturn",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorld_200_response_mutual_fund_performance_quarterly_total_returns_inner": {
        "properties": {
          "year": {
            "description": "Year of a fund quarter return",
            "examples": [
              2024
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Year",
            "x-order": 10
          },
          "q1": {
            "description": "Total return (%) of a fund in the first quarter",
            "examples": [
              0.02358
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Q1",
            "x-order": 20
          },
          "q2": {
            "description": "Total return (%) of a fund in the second quarter",
            "examples": [
              -0.03071
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Q2",
            "x-order": 30
          },
          "q3": {
            "description": "Total return (%) of a fund in the third quarter",
            "examples": [
              0.10099
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Q3",
            "x-order": 40
          },
          "q4": {
            "description": "Total return (%) of a fund in the fourth quarter",
            "examples": [
              -0.00629
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Q4",
            "x-order": 50
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorld_200_response_mutual_fund_performance_load_adjusted_return_inner": {
        "properties": {
          "period": {
            "description": "Period of a load adjusted return",
            "examples": [
              "1_year"
            ],
            "type": "string",
            "x-go-name": "Period",
            "x-order": 10
          },
          "return": {
            "description": "Actual return (%) an investor sees after accounting for fees and sales charges are deducted from a mutual fund's performance",
            "examples": [
              0.06139
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Return",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorld_200_response_mutual_fund_performance": {
        "description": "Detailed performance of a mutual fund",
        "properties": {
          "trailing_returns": {
            "description": "Trailing returns of the fund",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_performance_trailing_returns_inner"
            },
            "type": "array",
            "x-go-name": "TrailingReturns",
            "x-order": 10
          },
          "annual_total_returns": {
            "description": "Annual total returns of the fund",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_performance_annual_total_returns_inner"
            },
            "type": "array",
            "x-go-name": "AnnualTotalReturns",
            "x-order": 20
          },
          "quarterly_total_returns": {
            "description": "Quarterly total returns of the fund",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_performance_quarterly_total_returns_inner"
            },
            "type": "array",
            "x-go-name": "QuarterlyTotalReturns",
            "x-order": 30
          },
          "load_adjusted_return": {
            "description": "Load adjusted return of the fund",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_performance_load_adjusted_return_inner"
            },
            "type": "array",
            "x-go-name": "LoadAdjustedReturn",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Performance",
        "x-order": 20
      },
      "GetMutualFundsWorld_200_response_mutual_fund_risk_volatility_measures_inner": {
        "properties": {
          "period": {
            "description": "Period of a measure",
            "examples": [
              "3_year"
            ],
            "type": "string",
            "x-go-name": "Period",
            "x-order": 10
          },
          "alpha": {
            "description": "Alpha score of a fund",
            "examples": [
              -9.12
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Alpha",
            "x-order": 20
          },
          "alpha_category": {
            "description": "Average alpha score of a fund's category",
            "examples": [
              -0.0939
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AlphaCategory",
            "x-order": 30
          },
          "beta": {
            "description": "Beta score of a fund",
            "examples": [
              1
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Beta",
            "x-order": 40
          },
          "beta_category": {
            "description": "Average beta score of a fund's category",
            "examples": [
              0.0126
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "BetaCategory",
            "x-order": 50
          },
          "mean_annual_return": {
            "description": "Mean annual return of a fund",
            "examples": [
              0.45
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "MeanAnnualReturn",
            "x-order": 60
          },
          "mean_annual_return_category": {
            "description": "Average mean annual return of a fund's category",
            "examples": [
              0.0117
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "MeanAnnualReturnCategory",
            "x-order": 70
          },
          "r_squared": {
            "description": "R-squared metric of a fund",
            "examples": [
              69
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RSquared",
            "x-order": 80
          },
          "r_squared_category": {
            "description": "Average r-squared metric of a fund's category",
            "examples": [
              0.8309
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RSquaredCategory",
            "x-order": 90
          },
          "std": {
            "description": "Standard deviation of a fund",
            "examples": [
              23.15
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Std",
            "x-order": 100
          },
          "std_category": {
            "description": "Average standard deviation of a fund's category",
            "examples": [
              0.2554
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "StdCategory",
            "x-order": 110
          },
          "sharpe_ratio": {
            "description": "Sharpe ratio of a fund",
            "examples": [
              0.04
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SharpeRatio",
            "x-order": 120
          },
          "sharpe_ratio_category": {
            "description": "Average sharpe ratio of a fund's category",
            "examples": [
              0.005
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SharpeRatioCategory",
            "x-order": 130
          },
          "treynor_ratio": {
            "description": "Treynor ratio of a fund",
            "examples": [
              -1.41
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TreynorRatio",
            "x-order": 140
          },
          "treynor_ratio_category": {
            "description": "Average treynor ratio of a fund's category",
            "examples": [
              0.0806
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TreynorRatioCategory",
            "x-order": 150
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorld_200_response_mutual_fund_risk_valuation_metrics": {
        "description": "Valuation ratios and metrics of the fund and its category",
        "properties": {
          "price_to_earnings": {
            "description": "Fund price to earnings metric",
            "examples": [
              0.05695
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceToEarnings",
            "x-order": 10
          },
          "price_to_earnings_category": {
            "description": "Average price to earnings metric of funds in the same category",
            "examples": [
              20.63
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceToEarningsCategory",
            "x-order": 20
          },
          "price_to_book": {
            "description": "Fund price to book metric",
            "examples": [
              0.55626
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceToBook",
            "x-order": 30
          },
          "price_to_book_category": {
            "description": "Average price to book metric of funds in the same category",
            "examples": [
              2.87
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceToBookCategory",
            "x-order": 40
          },
          "price_to_sales": {
            "description": "Fund price to sales metric",
            "examples": [
              0.97803
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceToSales",
            "x-order": 50
          },
          "price_to_sales_category": {
            "description": "Average price to sales metric of funds in the same category",
            "examples": [
              1.34
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceToSalesCategory",
            "x-order": 60
          },
          "price_to_cashflow": {
            "description": "Fund price to cashflow metric",
            "examples": [
              0.10564
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceToCashflow",
            "x-order": 70
          },
          "price_to_cashflow_category": {
            "description": "Average price to cashflow metric of funds in the same category",
            "examples": [
              11.81
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceToCashflowCategory",
            "x-order": 80
          },
          "median_market_capitalization": {
            "description": "Median market capitalization of a fund",
            "examples": [
              2965
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "MedianMarketCapitalization",
            "x-order": 90
          },
          "median_market_capitalization_category": {
            "description": "Median market capitalization of funds in the same category",
            "examples": [
              4925
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "MedianMarketCapitalizationCategory",
            "x-order": 100
          },
          "3_year_earnings_growth": {
            "description": "Earnings growth over the last three years",
            "examples": [
              16.32
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ThreeYearEarningsGrowth",
            "x-order": 110
          },
          "3_year_earnings_growths_category": {
            "description": "Earnings growth over the last three years of funds in the same category",
            "examples": [
              10.55
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ThreeYearEarningsGrowthCategory",
            "x-order": 120
          }
        },
        "type": "object",
        "x-go-name": "ValuationMetrics",
        "x-order": 20
      },
      "GetMutualFundsWorld_200_response_mutual_fund_risk": {
        "description": "Risk metrics of a mutual fund",
        "properties": {
          "volatility_measures": {
            "description": "Volatility statistics of the fund",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_risk_volatility_measures_inner"
            },
            "type": "array",
            "x-go-name": "VolatilityMeasures",
            "x-order": 10
          },
          "valuation_metrics": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_risk_valuation_metrics"
          }
        },
        "type": "object",
        "x-go-name": "Risk",
        "x-order": 30
      },
      "GetMutualFundsWorld_200_response_mutual_fund_ratings": {
        "description": "Ratings of a mutual fund",
        "properties": {
          "performance_rating": {
            "description": "Performance rating from 0 to 5",
            "examples": [
              2
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "PerformanceRating",
            "x-order": 10
          },
          "risk_rating": {
            "description": "Risk rating from 0 to 5",
            "examples": [
              4
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "RiskRating",
            "x-order": 20
          },
          "return_rating": {
            "description": "Return rating from 0 to 5",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "ReturnRating",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Ratings",
        "x-order": 40
      },
      "GetMutualFundsWorld_200_response_mutual_fund_composition_major_market_sectors_inner": {
        "properties": {
          "sector": {
            "description": "Sector category of a fund exposure",
            "examples": [
              "Industrials"
            ],
            "type": "string",
            "x-go-name": "Sector",
            "x-order": 10
          },
          "weight": {
            "description": "Weight (%) of a fund exposure in a sector",
            "examples": [
              0.1742
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Weight",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorld_200_response_mutual_fund_composition_asset_allocation": {
        "description": "Asset allocation of the fund by different asset classes and their respective weights",
        "properties": {
          "cash": {
            "description": "Percentage of overall portfolio composition in cash",
            "examples": [
              0.0043
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Cash",
            "x-order": 10
          },
          "stocks": {
            "description": "Percentage of overall portfolio composition in stocks",
            "examples": [
              0.9956
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Stocks",
            "x-order": 20
          },
          "preferred_stocks": {
            "description": "Percentage of overall portfolio composition in preferred stocks",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PreferredStocks",
            "x-order": 30
          },
          "convertables": {
            "description": "Percentage of overall portfolio composition in convertable securities",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Convertables",
            "x-order": 40
          },
          "bonds": {
            "description": "Percentage of overall portfolio composition in bond",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Bonds",
            "x-order": 50
          },
          "others": {
            "description": "Percentage of overall portfolio composition in other forms of holding",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Others",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "AssetAllocation",
        "x-order": 20
      },
      "GetMutualFundsWorld_200_response_mutual_fund_composition_top_holdings_inner": {
        "properties": {
          "symbol": {
            "description": "Symbol ticker of a holding instrument",
            "examples": [
              "BBWI"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of a holding instrument",
            "examples": [
              "Bath & Body Works Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "weight": {
            "description": "Weight (%) of a holding instrument in overall portfolio composition",
            "examples": [
              0.00624
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Weight",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorld_200_response_mutual_fund_composition_bond_breakdown_average_maturity": {
        "description": "Average maturity of bond holdings for the fund and its category",
        "properties": {
          "fund": {
            "description": "Average maturity of bond holding of a fund",
            "examples": [
              "null"
            ],
            "type": "object",
            "x-go-name": "Fund",
            "x-order": 10
          },
          "category": {
            "description": "Average maturity of bond holding of funds in the same category",
            "examples": [
              1.97
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Category",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "AverageMaturity",
        "x-order": 10
      },
      "GetMutualFundsWorld_200_response_mutual_fund_composition_bond_breakdown_average_duration": {
        "description": "Average duration of bond holdings for the fund and its category",
        "properties": {
          "fund": {
            "description": "Average duration of bond holding of a fund",
            "examples": [
              "null"
            ],
            "type": "object",
            "x-go-name": "Fund",
            "x-order": 10
          },
          "category": {
            "description": "Average duration of bond holding of funds in the same category",
            "examples": [
              1.64
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Category",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "AverageDuration",
        "x-order": 20
      },
      "GetMutualFundsWorld_200_response_mutual_fund_composition_bond_breakdown_credit_quality_inner": {
        "properties": {
          "grade": {
            "description": "Rating of bond holding of a fund from AAA to below B",
            "examples": [
              "U.S. Government"
            ],
            "type": "string",
            "x-go-name": "Grade",
            "x-order": 10
          },
          "weight": {
            "description": "Weight of bond holding in fund portfolio",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Weight",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorld_200_response_mutual_fund_composition_bond_breakdown": {
        "description": "Breakdown of the fund’s bond holdings by maturity, duration, and credit quality",
        "properties": {
          "average_maturity": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_composition_bond_breakdown_average_maturity"
          },
          "average_duration": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_composition_bond_breakdown_average_duration"
          },
          "credit_quality": {
            "description": "Breakdown of the fund’s bond holdings by credit rating and their respective portfolio weights",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_composition_bond_breakdown_credit_quality_inner"
            },
            "type": "array",
            "x-go-name": "CreditQuality",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "BondBreakdown",
        "x-order": 30
      },
      "GetMutualFundsWorld_200_response_mutual_fund_composition": {
        "description": "Composition of a mutual fund",
        "properties": {
          "major_market_sectors": {
            "description": "Breakdown of the fund’s portfolio by major industry sectors and their respective weights",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_composition_major_market_sectors_inner"
            },
            "type": "array",
            "x-go-name": "MajorMarketSectors",
            "x-order": 10
          },
          "asset_allocation": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_composition_asset_allocation"
          },
          "top_holdings": {
            "description": "Top holdings of the fund with their respective weights in the overall portfolio composition",
            "items": {
              "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_composition_top_holdings_inner"
            },
            "type": "array",
            "x-go-name": "TopHoldings",
            "x-order": 20
          },
          "bond_breakdown": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_composition_bond_breakdown"
          }
        },
        "type": "object",
        "x-go-name": "Composition",
        "x-order": 50
      },
      "GetMutualFundsWorld_200_response_mutual_fund_purchase_info_expenses": {
        "description": "Costs associated with investing in the mutual fund, including gross and net expense ratios",
        "properties": {
          "expense_ratio_gross": {
            "description": "Cost of investing in a mutual fund",
            "examples": [
              0.0022
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ExpenseRatioGross",
            "x-order": 10
          },
          "expense_ratio_net": {
            "description": "Percentage of mutual fund assets steered toward a fund's operating expenses and fund management fees",
            "examples": [
              0.001
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ExpenseRatioNet",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Expenses",
        "x-order": 10
      },
      "GetMutualFundsWorld_200_response_mutual_fund_purchase_info_minimums": {
        "description": "Minimum investment amounts required to purchase or add to the mutual fund, including IRA minimums",
        "properties": {
          "initial_investment": {
            "description": "Investment minimum",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "InitialInvestment",
            "x-order": 10
          },
          "additional_investment": {
            "description": "Minimum amount of additional investment",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "AdditionalInvestment",
            "x-order": 20
          },
          "initial_ira_investment": {
            "description": "Investment minimum for IRA",
            "examples": [
              "null"
            ],
            "type": "object",
            "x-go-name": "InitialIraInvestment",
            "x-order": 30
          },
          "additional_ira_investment": {
            "description": "Minimum amount of additional investment for IRA",
            "examples": [
              "null"
            ],
            "type": "object",
            "x-go-name": "AdditionalIraInvestment",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Minimums",
        "x-order": 20
      },
      "GetMutualFundsWorld_200_response_mutual_fund_purchase_info_pricing": {
        "description": "Pricing information for the mutual fund",
        "properties": {
          "nav": {
            "description": "Net Asset Value: fund value minus liabilities",
            "examples": [
              10.09
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Nav",
            "x-order": 10
          },
          "12_month_low": {
            "description": "Lowest price of the fund over the last year",
            "examples": [
              9.630000114441
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TwelveMonthLow",
            "x-order": 20
          },
          "12_month_high": {
            "description": "Highest price of the fund over the last year",
            "examples": [
              12.10000038147
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TwelveMonthHigh",
            "x-order": 30
          },
          "last_month": {
            "description": "Fund price at the end of the last month",
            "examples": [
              11.050000190735
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LastMonth",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Pricing",
        "x-order": 30
      },
      "GetMutualFundsWorld_200_response_mutual_fund_purchase_info": {
        "description": "Purchase information of a mutual fund",
        "properties": {
          "expenses": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_purchase_info_expenses"
          },
          "minimums": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_purchase_info_minimums"
          },
          "pricing": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_purchase_info_pricing"
          },
          "brokerages": {
            "description": "List of brokerages where mutual fund can be purchased",
            "examples": [
              []
            ],
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "Brokerages",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "PurchaseInfo",
        "x-order": 60
      },
      "GetMutualFundsWorld_200_response_mutual_fund_sustainability_corporate_esg_pillars": {
        "description": "Corporate ESG pillars",
        "properties": {
          "environmental": {
            "description": "ESG environmental score",
            "examples": [
              3.73
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Environmental",
            "x-order": 10
          },
          "social": {
            "description": "ESG social score",
            "examples": [
              10.44
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Social",
            "x-order": 20
          },
          "governance": {
            "description": "ESG governance score",
            "examples": [
              7.86
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Governance",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "CorporateEsgPillars",
        "x-order": 20
      },
      "GetMutualFundsWorld_200_response_mutual_fund_sustainability": {
        "description": "Sustainability information of a mutual fund",
        "properties": {
          "score": {
            "description": "Sustainability score: asset-weighted average of normalized company-level ESG Scores for the covered holdings in the portfolio from `0` to `100`",
            "examples": [
              22
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Score",
            "x-order": 10
          },
          "corporate_esg_pillars": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_sustainability_corporate_esg_pillars"
          },
          "sustainable_investment": {
            "description": "Indication that the fund discloses in their prospectus that they employ socially responsible or ESG principles in their investment selection processes",
            "examples": [
              false
            ],
            "type": "boolean",
            "x-go-name": "SustainableInvestment",
            "x-order": 30
          },
          "corporate_aum": {
            "description": "Percentage of AUM used to calculate sustainability score",
            "examples": [
              0.99486
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CorporateAum",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Sustainability",
        "x-order": 70
      },
      "GetMutualFundsWorld_200_response_mutual_fund": {
        "description": "Mutual fund information",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_summary"
          },
          "performance": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_performance"
          },
          "risk": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_risk"
          },
          "ratings": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_ratings"
          },
          "composition": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_composition"
          },
          "purchase_info": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_purchase_info"
          },
          "sustainability": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund_sustainability"
          }
        },
        "type": "object",
        "x-go-name": "MutualFund",
        "x-order": 10
      },
      "GetMutualFundsWorld_200_response": {
        "properties": {
          "mutual_fund": {
            "$ref": "#/components/schemas/GetMutualFundsWorld_200_response_mutual_fund"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorldComposition_200_response_mutual_fund": {
        "description": "Mutual fund information",
        "properties": {
          "composition": {
            "$ref": "#/components/schemas/ResponseMutualFundWorldComposition"
          }
        },
        "type": "object",
        "x-go-name": "MutualFund",
        "x-order": 10
      },
      "GetMutualFundsWorldComposition_200_response": {
        "properties": {
          "mutual_fund": {
            "$ref": "#/components/schemas/GetMutualFundsWorldComposition_200_response_mutual_fund"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorldPerformance_200_response_mutual_fund": {
        "description": "Mutual fund information",
        "properties": {
          "performance": {
            "$ref": "#/components/schemas/ResponseMutualFundWorldPerformance"
          }
        },
        "type": "object",
        "x-go-name": "MutualFund",
        "x-order": 10
      },
      "GetMutualFundsWorldPerformance_200_response": {
        "properties": {
          "mutual_fund": {
            "$ref": "#/components/schemas/GetMutualFundsWorldPerformance_200_response_mutual_fund"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorldPurchaseInfo_200_response_mutual_fund": {
        "description": "Mutual fund information",
        "properties": {
          "purchase_info": {
            "$ref": "#/components/schemas/ResponseMutualFundWorldPurchaseInfo"
          }
        },
        "type": "object",
        "x-go-name": "MutualFund",
        "x-order": 10
      },
      "GetMutualFundsWorldPurchaseInfo_200_response": {
        "properties": {
          "mutual_fund": {
            "$ref": "#/components/schemas/GetMutualFundsWorldPurchaseInfo_200_response_mutual_fund"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorldRatings_200_response_mutual_fund": {
        "description": "Mutual fund information",
        "properties": {
          "ratings": {
            "$ref": "#/components/schemas/ResponseMutualFundWorldRatings"
          }
        },
        "type": "object",
        "x-go-name": "MutualFund",
        "x-order": 10
      },
      "GetMutualFundsWorldRatings_200_response": {
        "properties": {
          "mutual_fund": {
            "$ref": "#/components/schemas/GetMutualFundsWorldRatings_200_response_mutual_fund"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorldRisk_200_response_mutual_fund": {
        "description": "Mutual fund information",
        "properties": {
          "risk": {
            "$ref": "#/components/schemas/ResponseMutualFundWorldRisk"
          }
        },
        "type": "object",
        "x-go-name": "MutualFund",
        "x-order": 10
      },
      "GetMutualFundsWorldRisk_200_response": {
        "properties": {
          "mutual_fund": {
            "$ref": "#/components/schemas/GetMutualFundsWorldRisk_200_response_mutual_fund"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorldSummary_200_response_mutual_fund": {
        "description": "Mutual fund information",
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/ResponseMutualFundWorldSummary"
          }
        },
        "type": "object",
        "x-go-name": "MutualFund",
        "x-order": 10
      },
      "GetMutualFundsWorldSummary_200_response": {
        "properties": {
          "mutual_fund": {
            "$ref": "#/components/schemas/GetMutualFundsWorldSummary_200_response_mutual_fund"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetMutualFundsWorldSustainability_200_response_mutual_fund": {
        "description": "Mutual fund information",
        "properties": {
          "sustainability": {
            "$ref": "#/components/schemas/ResponseMutualFundWorldSustainability"
          }
        },
        "type": "object",
        "x-go-name": "Sustainability",
        "x-order": 10
      },
      "GetMutualFundsWorldSustainability_200_response": {
        "properties": {
          "mutual_fund": {
            "$ref": "#/components/schemas/GetMutualFundsWorldSustainability_200_response_mutual_fund"
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesNatr_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "NATR - Normalized Average True Range"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesNatr_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesNatr_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesNatr_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "natr": {
            "description": "natr value",
            "examples": [
              "0.09862"
            ],
            "type": "string",
            "x-go-name": "Natr",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesNatr_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesNatr_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesNatr_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesObv_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "OBV - On Balance Volume"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesObv_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesObv_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesObv_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "obv": {
            "description": "obv value",
            "examples": [
              "540374.0"
            ],
            "type": "string",
            "x-go-name": "Obv",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesObv_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesObv_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesObv_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesPercent_B_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "PERCENT_B - %B Indicator"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              20
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          },
          "sd": {
            "description": "The standard deviation applied in the calculation",
            "examples": [
              2
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "StandardDeviation",
            "x-order": 40
          },
          "ma_type": {
            "description": "The type of moving average used",
            "examples": [
              "SMA"
            ],
            "type": "string",
            "x-go-name": "MAType",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesPercent_B_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesPercent_B_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesPercent_B_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "percent_b": {
            "description": "Percent_b value",
            "examples": [
              "0.11981"
            ],
            "type": "string",
            "x-go-name": "Percent_B",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesPercent_B_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesPercent_B_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesPercent_B_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesPivotPointsHL_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "PIVOT_POINTS_HL - Pivot Points (High/Low)"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              10
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesPivotPointsHL_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesPivotPointsHL_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesPivotPointsHL_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "pivot_point_h": {
            "description": "`1` if it is a high pivot point, otherwise `0`",
            "examples": [
              1
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "PivotPointH",
            "x-order": 20
          },
          "pivot_point_l": {
            "description": "`1` if it is a low pivot point, otherwise `0`",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "PivotPointL",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesPivotPointsHL_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesPivotPointsHL_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesPivotPointsHL_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesPlusDI_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "PLUS_DI - Plus Directional Indicator"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesPlusDI_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesPlusDI_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesPlusDI_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "plus_di": {
            "description": "plus_di value",
            "examples": [
              "7.69578"
            ],
            "type": "string",
            "x-go-name": "PlusDI",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesPlusDI_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesPlusDI_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesPlusDI_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesPlusDM_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "PLUS_DM - Plus Directional Movement"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesPlusDM_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesPlusDM_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesPlusDM_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "plus_dm": {
            "description": "plus_dm value",
            "examples": [
              "0.159"
            ],
            "type": "string",
            "x-go-name": "PlusDM",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesPlusDM_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesPlusDM_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesPlusDM_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesPpo_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "PPO - Percentage Price Oscillator"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 5
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 10
          },
          "fast_period": {
            "description": "The shorter time period for calculation",
            "examples": [
              12
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "FastPeriod",
            "x-order": 20
          },
          "slow_period": {
            "description": "The longer time period for calculation",
            "examples": [
              26
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SlowPeriod",
            "x-order": 30
          },
          "ma_type": {
            "description": "The type of moving average used",
            "examples": [
              "SMA"
            ],
            "type": "string",
            "x-go-name": "MAType",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesPpo_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesPpo_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesPpo_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "ppo": {
            "description": "PPO value",
            "examples": [
              "-0.2696"
            ],
            "type": "string",
            "x-go-name": "Ppo",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesPpo_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesPpo_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesPpo_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetPrice_200_response": {
        "properties": {
          "price": {
            "description": "Real-time or the latest available price",
            "examples": [
              "200.99001"
            ],
            "type": "string",
            "x-go-name": "Price"
          }
        },
        "type": "object"
      },
      "GetPriceTarget_200_response_meta": {
        "description": "Meta information about the security",
        "properties": {
          "symbol": {
            "description": "Symbol ticker of the instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the instrument",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency in which the instrument is traded",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "Timezone of the exchange",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 40
          },
          "exchange": {
            "description": "Exchange where the instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 50
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNGS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 60
          },
          "type": {
            "description": "Type of the instrument",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetPriceTarget_200_response_price_target": {
        "description": "Price target information",
        "properties": {
          "high": {
            "description": "Highest price target given by an analyst",
            "examples": [
              220
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "High",
            "x-order": 10
          },
          "median": {
            "description": "Median price target given across analysts",
            "examples": [
              185
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Median",
            "x-order": 20
          },
          "low": {
            "description": "Lowest price target given by an analyst",
            "examples": [
              136
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Low",
            "x-order": 30
          },
          "average": {
            "description": "Average price target given across analysts",
            "examples": [
              184.01
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Average",
            "x-order": 40
          },
          "current": {
            "description": "Current price from of a security",
            "examples": [
              169.5672
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Current",
            "x-order": 50
          },
          "currency": {
            "description": "Currency in which the price targets values are quoted",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "PriceTarget",
        "x-order": 20
      },
      "GetPriceTarget_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetPriceTarget_200_response_meta"
          },
          "price_target": {
            "$ref": "#/components/schemas/GetPriceTarget_200_response_price_target"
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetProfile_200_response": {
        "properties": {
          "symbol": {
            "description": "Ticker of the company",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the company",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "exchange": {
            "description": "Exchange name where the company is listed",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 30
          },
          "mic_code": {
            "description": "Market Identifier Code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 40
          },
          "sector": {
            "description": "Sector at which the company operates",
            "examples": [
              "Technology"
            ],
            "type": "string",
            "x-go-name": "Sector",
            "x-order": 50
          },
          "industry": {
            "description": "Industry at which company operates",
            "examples": [
              "Consumer Electronics"
            ],
            "type": "string",
            "x-go-name": "Industry",
            "x-order": 60
          },
          "employees": {
            "description": "Number of employees in the company",
            "examples": [
              147000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Employees",
            "x-order": 70
          },
          "website": {
            "description": "Website of the company",
            "examples": [
              "http://www.apple.com"
            ],
            "type": "string",
            "x-go-name": "Website",
            "x-order": 80
          },
          "description": {
            "description": "Description of the company activities",
            "examples": [
              "Apple Inc. designs, manufactures, and markets smartphones, personal computers, tablets, wearables, and..."
            ],
            "type": "string",
            "x-go-name": "Description",
            "x-order": 90
          },
          "type": {
            "description": "Issue type of the stock",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 100
          },
          "CEO": {
            "description": "Name of the CEO of the company",
            "examples": [
              "Mr. Timothy D. Cook"
            ],
            "type": "string",
            "x-order": 110
          },
          "address": {
            "description": "Street address of the company if presented",
            "examples": [
              "One Apple Park Way"
            ],
            "type": "string",
            "x-go-name": "Address",
            "x-order": 120
          },
          "address2": {
            "description": "Secondary address of the company if presented",
            "examples": [
              "Cupertino, CA 95014"
            ],
            "type": "string",
            "x-go-name": "Address2",
            "x-order": 130
          },
          "city": {
            "description": "City of the company if presented",
            "examples": [
              "Cupertino"
            ],
            "type": "string",
            "x-go-name": "City",
            "x-order": 140
          },
          "zip": {
            "description": "ZIP code of the company if presented",
            "examples": [
              "95014"
            ],
            "type": "string",
            "x-go-name": "Zip",
            "x-order": 150
          },
          "state": {
            "description": "State of the company if presented",
            "examples": [
              "CA"
            ],
            "type": "string",
            "x-go-name": "State",
            "x-order": 160
          },
          "country": {
            "description": "Country of the company if presented",
            "examples": [
              "US"
            ],
            "type": "string",
            "x-go-name": "Country",
            "x-order": 170
          },
          "phone": {
            "description": "Phone number of the company if presented",
            "examples": [
              "408-996-1010"
            ],
            "type": "string",
            "x-go-name": "Phone",
            "x-order": 180
          }
        },
        "type": "object"
      },
      "GetQuote_200_response_fifty_two_week": {
        "description": "Collection of 52-week metrics",
        "properties": {
          "low": {
            "description": "52-week low price",
            "examples": [
              "103.10000"
            ],
            "type": "string",
            "x-go-name": "Low",
            "x-order": 10
          },
          "high": {
            "description": "52-week high price",
            "examples": [
              "157.25999"
            ],
            "type": "string",
            "x-go-name": "High",
            "x-order": 20
          },
          "low_change": {
            "description": "Current price - 52-week low",
            "examples": [
              "45.75001"
            ],
            "type": "string",
            "x-go-name": "LowChange",
            "x-order": 30
          },
          "high_change": {
            "description": "Current price - 52-week high",
            "examples": [
              "-8.40999"
            ],
            "type": "string",
            "x-go-name": "HighChange",
            "x-order": 40
          },
          "low_change_percent": {
            "description": "Percentage change from 52-week low",
            "examples": [
              "44.37440"
            ],
            "type": "string",
            "x-go-name": "LowChangePercent",
            "x-order": 50
          },
          "high_change_percent": {
            "description": "Percentage change from 52-week high",
            "examples": [
              "-5.34782"
            ],
            "type": "string",
            "x-go-name": "HighChangePercent",
            "x-order": 60
          },
          "range": {
            "description": "Range between 52-week low and high",
            "examples": [
              "103.099998 - 157.259995"
            ],
            "type": "string",
            "x-go-name": "Range",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-name": "FiftyTwoWeek",
        "x-order": 220
      },
      "GetQuote_200_response": {
        "properties": {
          "symbol": {
            "description": "Symbol passed",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the instrument",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 30
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 40
          },
          "currency": {
            "description": "Currency in which the equity is denominated",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 50
          },
          "datetime": {
            "description": "Datetime in defined timezone referring to when the bar with specified interval was opened",
            "examples": [
              "2021-09-16"
            ],
            "type": "string",
            "x-go-name": "Datetime",
            "x-order": 60
          },
          "timestamp": {
            "description": "Unix timestamp representing the opening candle of the specified interval",
            "examples": [
              1631772000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Timestamp",
            "x-order": 70
          },
          "last_quote_at": {
            "description": "Unix timestamp of last minute candle",
            "examples": [
              1631772000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "LastQuoteAt",
            "x-order": 80
          },
          "open": {
            "description": "Price at the opening of current bar",
            "examples": [
              "148.44000"
            ],
            "type": "string",
            "x-go-name": "Open",
            "x-order": 90
          },
          "high": {
            "description": "Highest price which occurred during the current bar",
            "examples": [
              "148.96840"
            ],
            "type": "string",
            "x-go-name": "High",
            "x-order": 100
          },
          "low": {
            "description": "Lowest price which occurred during the current bar",
            "examples": [
              "147.22099"
            ],
            "type": "string",
            "x-go-name": "Low",
            "x-order": 110
          },
          "close": {
            "description": "Close price at the end of the bar",
            "examples": [
              "148.85001"
            ],
            "type": "string",
            "x-go-name": "Close",
            "x-order": 120
          },
          "volume": {
            "description": "Trading volume during the bar",
            "examples": [
              "67903927"
            ],
            "type": "string",
            "x-go-name": "Volume",
            "x-order": 130
          },
          "previous_close": {
            "description": "Close price at the end of the previous bar",
            "examples": [
              "149.09000"
            ],
            "type": "string",
            "x-go-name": "PreviousClose",
            "x-order": 140
          },
          "change": {
            "description": "Close - previous_close",
            "examples": [
              "-0.23999"
            ],
            "type": "string",
            "x-go-name": "Change",
            "x-order": 150
          },
          "percent_change": {
            "description": "(Close - previous_close) / previous_close * 100",
            "examples": [
              "-0.16097"
            ],
            "type": "string",
            "x-go-name": "PercentChange",
            "x-order": 160
          },
          "average_volume": {
            "description": "Average volume of the specified period",
            "examples": [
              "83571571"
            ],
            "type": "string",
            "x-go-name": "AverageVolume",
            "x-order": 170
          },
          "rolling_1day_change": {
            "description": "Percent change in price between the current and the backward one, where period is 1 day, available for crypto",
            "examples": [
              "123.123"
            ],
            "type": "string",
            "x-go-name": "RollingOneDayChange",
            "x-order": 180
          },
          "rolling_7day_change": {
            "description": "Percent change in price between the current and the backward one, where period is 7 days, available for crypto",
            "examples": [
              "123.123"
            ],
            "type": "string",
            "x-go-name": "RollingSevenDayChange",
            "x-order": 190
          },
          "rolling_period_change": {
            "description": "Percent change in price between the current and the backward one, where period specified in request param rolling_period, available for crypto",
            "examples": [
              "123.123"
            ],
            "type": "string",
            "x-go-name": "RollingPeriodChange",
            "x-order": 200
          },
          "is_market_open": {
            "description": "True if market is open; false if closed",
            "examples": [
              false
            ],
            "type": "boolean",
            "x-go-name": "IsMarketOpen",
            "x-order": 210
          },
          "fifty_two_week": {
            "$ref": "#/components/schemas/GetQuote_200_response_fifty_two_week"
          },
          "extended_change": {
            "description": "Diff between the regular close price and the latest extended price",
            "examples": [
              "0.09"
            ],
            "type": "string",
            "x-go-name": "ExtendedChange",
            "x-order": 230
          },
          "extended_percent_change": {
            "description": "Percent change in price between the regular close price and the latest extended price",
            "examples": [
              "0.05"
            ],
            "type": "string",
            "x-go-name": "ExtendedPercentChange",
            "x-order": 240
          },
          "extended_price": {
            "description": "Latest extended price",
            "examples": [
              "125.22"
            ],
            "type": "string",
            "x-go-name": "ExtendedPrice",
            "x-order": 250
          },
          "extended_timestamp": {
            "description": "Unix timestamp of the last extended price",
            "examples": [
              "1649845281"
            ],
            "type": "string",
            "x-go-name": "ExtendedTimestamp",
            "x-order": 260
          }
        },
        "type": "object"
      },
      "GetRecommendations_200_response_meta": {
        "description": "Metadata about the symbol",
        "properties": {
          "symbol": {
            "description": "Symbol ticker of the instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the instrument",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency in which the instrument is traded",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "Timezone of the exchange",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 40
          },
          "exchange": {
            "description": "Exchange where the instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 50
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNGS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 60
          },
          "type": {
            "description": "Type of the instrument",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetRecommendations_200_response_trends_current_month": {
        "description": "Current month recommendations",
        "properties": {
          "strong_buy": {
            "description": "Number of analysts that give a strong buy recommendation",
            "examples": [
              13
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "StrongBuy",
            "x-order": 10
          },
          "buy": {
            "description": "Number of analysts that give a buy recommendation",
            "examples": [
              20
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Buy",
            "x-order": 20
          },
          "hold": {
            "description": "Number of analysts that give a hold recommendation",
            "examples": [
              8
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Hold",
            "x-order": 30
          },
          "sell": {
            "description": "Number of analysts that give a sell recommendation",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Sell",
            "x-order": 40
          },
          "strong_sell": {
            "description": "Number of analysts that give a strong sell recommendation",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "StrongSell",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-name": "CurrentMonth",
        "x-order": 10
      },
      "GetRecommendations_200_response_trends_previous_month": {
        "description": "Previous month recommendations",
        "properties": {
          "strong_buy": {
            "description": "Number of analysts that give a strong buy recommendation",
            "examples": [
              13
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "StrongBuy",
            "x-order": 10
          },
          "buy": {
            "description": "Number of analysts that give a buy recommendation",
            "examples": [
              20
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Buy",
            "x-order": 20
          },
          "hold": {
            "description": "Number of analysts that give a hold recommendation",
            "examples": [
              8
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Hold",
            "x-order": 30
          },
          "sell": {
            "description": "Number of analysts that give a sell recommendation",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Sell",
            "x-order": 40
          },
          "strong_sell": {
            "description": "Number of analysts that give a strong sell recommendation",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "StrongSell",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-name": "PreviousMonth",
        "x-order": 20
      },
      "GetRecommendations_200_response_trends_2_months_ago": {
        "description": "Two months ago recommendations",
        "properties": {
          "strong_buy": {
            "description": "Number of analysts that give a strong buy recommendation",
            "examples": [
              13
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "StrongBuy",
            "x-order": 10
          },
          "buy": {
            "description": "Number of analysts that give a buy recommendation",
            "examples": [
              20
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Buy",
            "x-order": 20
          },
          "hold": {
            "description": "Number of analysts that give a hold recommendation",
            "examples": [
              8
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Hold",
            "x-order": 30
          },
          "sell": {
            "description": "Number of analysts that give a sell recommendation",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Sell",
            "x-order": 40
          },
          "strong_sell": {
            "description": "Number of analysts that give a strong sell recommendation",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "StrongSell",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-name": "TwoMonthsAgo",
        "x-order": 30
      },
      "GetRecommendations_200_response_trends_3_months_ago": {
        "description": "Three months ago recommendations",
        "properties": {
          "strong_buy": {
            "description": "Number of analysts that give a strong buy recommendation",
            "examples": [
              13
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "StrongBuy",
            "x-order": 10
          },
          "buy": {
            "description": "Number of analysts that give a buy recommendation",
            "examples": [
              20
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Buy",
            "x-order": 20
          },
          "hold": {
            "description": "Number of analysts that give a hold recommendation",
            "examples": [
              8
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Hold",
            "x-order": 30
          },
          "sell": {
            "description": "Number of analysts that give a sell recommendation",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Sell",
            "x-order": 40
          },
          "strong_sell": {
            "description": "Number of analysts that give a strong sell recommendation",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "StrongSell",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-name": "ThreeMonthsAgo",
        "x-order": 40
      },
      "GetRecommendations_200_response_trends": {
        "description": "Analyst recommendations trends",
        "properties": {
          "current_month": {
            "$ref": "#/components/schemas/GetRecommendations_200_response_trends_current_month"
          },
          "previous_month": {
            "$ref": "#/components/schemas/GetRecommendations_200_response_trends_previous_month"
          },
          "2_months_ago": {
            "$ref": "#/components/schemas/GetRecommendations_200_response_trends_2_months_ago"
          },
          "3_months_ago": {
            "$ref": "#/components/schemas/GetRecommendations_200_response_trends_3_months_ago"
          }
        },
        "type": "object",
        "x-go-name": "Trends",
        "x-order": 20
      },
      "GetRecommendations_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetRecommendations_200_response_meta"
          },
          "trends": {
            "$ref": "#/components/schemas/GetRecommendations_200_response_trends"
          },
          "rating": {
            "description": "Rating from 0 to 10 represents overall analysts' recommendation. 0 to 2 - strong sell, 2 to 4 - sell, 4 to 6 - hold, 6 to 8 - buy, 8 to 10 - strong buy.",
            "examples": [
              8.2
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Rating",
            "x-order": 30
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 40
          }
        },
        "type": "object"
      },
      "GetRevenueEstimate_200_response_revenue_estimate_inner": {
        "properties": {
          "date": {
            "description": "Date of the estimate",
            "examples": [
              "2022-09-30"
            ],
            "type": "string",
            "x-go-name": "Date",
            "x-order": 10
          },
          "period": {
            "description": "Period of estimation, can be `current_quarter`, `next_quarter`, `current_year`, or `next_year`",
            "examples": [
              "current_quarter"
            ],
            "type": "string",
            "x-go-name": "Period",
            "x-order": 20
          },
          "number_of_analysts": {
            "description": "Number of analysts that made the estimation",
            "examples": [
              24
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "NumberOfAnalysts",
            "x-order": 30
          },
          "avg_estimate": {
            "description": "Average estimation across analysts",
            "examples": [
              88631500000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AvgEstimate",
            "x-order": 40
          },
          "low_estimate": {
            "description": "Lowest estimation given by an analyst",
            "examples": [
              85144300000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LowEstimate",
            "x-order": 50
          },
          "high_estimate": {
            "description": "Highest estimation given by an analyst",
            "examples": [
              92794900000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "HighEstimate",
            "x-order": 60
          },
          "year_ago_sales": {
            "description": "Total revenue received a year ago relative to period",
            "examples": [
              83360000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "YearAgoSales",
            "x-order": 70
          },
          "sales_growth": {
            "description": "Estimated sales growth of the period in relation to year-ago sales in prc (%)",
            "examples": [
              0.06
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SalesGrowth",
            "x-order": 80
          }
        },
        "type": "object"
      },
      "GetRevenueEstimate_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetEarningsEstimate_200_response_meta"
          },
          "revenue_estimate": {
            "description": "Revenue estimate data",
            "items": {
              "$ref": "#/components/schemas/GetRevenueEstimate_200_response_revenue_estimate_inner"
            },
            "type": "array",
            "x-go-name": "RevenueEstimate",
            "x-order": 20
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesRoc_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "ROC - Rate of change"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "The time period used for calculation",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesRoc_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesRoc_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesRoc_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "roc": {
            "description": "roc value",
            "examples": [
              "-0.56383"
            ],
            "type": "string",
            "x-go-name": "Roc",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesRoc_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesRoc_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesRoc_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesRocp_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "ROCP - Rate of change percentage"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesRocp_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesRocp_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesRocp_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "rocp": {
            "description": "ROCP value",
            "examples": [
              "-0.00564"
            ],
            "type": "string",
            "x-go-name": "Rocp",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesRocp_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesRocp_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesRocp_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesRocr_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "ROCR - Rate of change ratio"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "Number of periods to average over",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesRocr_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesRocr_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesRocr_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "rocr": {
            "description": "ROCR value",
            "examples": [
              "0.99436"
            ],
            "type": "string",
            "x-go-name": "Rocr",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesRocr_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesRocr_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesRocr_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesRocr100_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "ROCR100 - Rate of change ratio 100 scale"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesRocr100_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesRocr100_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesRocr100_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "rocr100": {
            "description": "rocr100 value",
            "examples": [
              "99.43617"
            ],
            "type": "string",
            "x-go-name": "Rocr100",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesRocr100_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesRocr100_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesRocr100_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesRsi_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "RSI - Relative Strength Index"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesRsi_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesRsi_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesRsi_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "rsi": {
            "description": "RSI value",
            "examples": [
              "16.57887"
            ],
            "type": "string",
            "x-go-name": "Rsi",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesRsi_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesRsi_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesRsi_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesRvol_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "RVOL - Relative Volume Indicator"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesRvol_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesRvol_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesRvol_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "rvol": {
            "description": "RVOL value",
            "examples": [
              "2.9054"
            ],
            "type": "string",
            "x-go-name": "Rvol",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesRvol_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesRvol_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesRvol_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetSourceSanctionedEntities_200_response": {
        "properties": {
          "sanctions": {
            "description": "List of sanctioned entities",
            "items": {
              "$ref": "#/components/schemas/ResponseSanctionedEntitiy"
            },
            "type": "array",
            "x-go-name": "Sanctions",
            "x-order": 10
          },
          "count": {
            "description": "Total number of sanctioned entities",
            "examples": [
              143
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Count",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSar_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "SAR - Parabolic SAR"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "acceleration": {
            "description": "The acceleration factor used in the indicator calculation",
            "examples": [
              0.02
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Acceleration",
            "x-order": 20
          },
          "maximum": {
            "description": "The maximum value considered for the indicator calculation",
            "examples": [
              0.2
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Maximum",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesSar_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesSar_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesSar_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "sar": {
            "description": "SAR value",
            "examples": [
              "201.54365"
            ],
            "type": "string",
            "x-go-name": "Sar",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSar_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesSar_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesSar_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSarExt_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "SAREXT - Parabolic SAR Extended"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "start_value": {
            "description": "The initial value for the indicator calculation",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "StartValue",
            "x-order": 20
          },
          "offset_on_reverse": {
            "description": "The adjustment applied when the indicator's direction changes",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OffsetOnReverse",
            "x-order": 30
          },
          "acceleration_limit_long": {
            "description": "The maximum acceleration value for long positions",
            "examples": [
              0.02
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccelerationLimitLong",
            "x-order": 40
          },
          "acceleration_long": {
            "description": "The acceleration value for long positions",
            "examples": [
              0.02
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccelerationLong",
            "x-order": 50
          },
          "acceleration_max_long": {
            "description": "The highest allowed acceleration for long positions",
            "examples": [
              0.2
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccelerationMaxLong",
            "x-order": 60
          },
          "acceleration_limit_short": {
            "description": "The maximum acceleration value for short positions",
            "examples": [
              0.02
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccelerationLimitShort",
            "x-order": 70
          },
          "acceleration_short": {
            "description": "The acceleration value for short positions",
            "examples": [
              0.02
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccelerationShort",
            "x-order": 80
          },
          "acceleration_max_short": {
            "description": "The highest allowed acceleration for short positions",
            "examples": [
              0.2
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccelerationMaxShort",
            "x-order": 90
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesSarExt_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesSarExt_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesSarExt_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2025-04-02"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "sarext": {
            "description": "SAREXT value",
            "examples": [
              "214.059460"
            ],
            "type": "string",
            "x-go-name": "SarExt",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSarExt_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesSarExt_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesSarExt_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSma_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "SMA - Simple Moving Average"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesSma_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesSma_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesSma_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "sma": {
            "description": "SMA value",
            "examples": [
              "201.41205"
            ],
            "type": "string",
            "x-go-name": "Sma",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSma_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesSma_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesSma_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetSplits_200_response_meta": {
        "description": "Metadata about the instrument",
        "properties": {
          "symbol": {
            "description": "Ticker symbol of instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the instrument",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency in which the instrument is denominated",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 50
          },
          "exchange_timezone": {
            "description": "Timezone of the exchange",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "Meta"
      },
      "GetSplits_200_response_splits_inner": {
        "properties": {
          "date": {
            "description": "Stands for the split date",
            "examples": [
              "2020-08-31"
            ],
            "type": "string",
            "x-go-name": "Date",
            "x-order": 10
          },
          "description": {
            "description": "Specification of the split event",
            "examples": [
              "4-for-1 split"
            ],
            "type": "string",
            "x-go-name": "Description",
            "x-order": 20
          },
          "ratio": {
            "description": "The ratio by which the number of a company's outstanding shares of stock are increased following a stock split. For example, a `4-for-1 split` results in four times as many outstanding shares, with each share selling at one forth of its pre-split price",
            "examples": [
              0.25
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Ratio",
            "x-order": 30
          },
          "from_factor": {
            "description": "From factor of the split",
            "examples": [
              4
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FromFactor",
            "x-order": 40
          },
          "to_factor": {
            "description": "To factor of the split",
            "examples": [
              1
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ToFactor",
            "x-order": 50
          }
        },
        "type": "object"
      },
      "GetSplits_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetSplits_200_response_meta"
          },
          "splits": {
            "description": "List of stock splits",
            "items": {
              "$ref": "#/components/schemas/GetSplits_200_response_splits_inner"
            },
            "type": "array",
            "x-go-name": "Splits"
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSqrt_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "SQRT - Square Root"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesSqrt_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesSqrt_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesSqrt_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "sqrt": {
            "description": "SQRT value",
            "examples": [
              "14.17921"
            ],
            "type": "string",
            "x-go-name": "Sqrt",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSqrt_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesSqrt_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesSqrt_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetStatistics_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "Symbol ticker of instrument",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "Name of the company",
            "examples": [
              "Apple Inc"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "currency": {
            "description": "Currency of the instrument",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange": {
            "description": "Exchange where instrument is traded",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 40
          },
          "mic_code": {
            "description": "Market identifier code (MIC) under ISO 10383 standard",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 50
          },
          "exchange_timezone": {
            "description": "Timezone of the exchange",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetStatistics_200_response_statistics_valuations_metrics": {
        "description": "Valuation metrics of the company",
        "properties": {
          "market_capitalization": {
            "description": "Refers to the market value of the company's outstanding shares",
            "examples": [
              2546807865344
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "MarketCapitalization",
            "x-order": 10
          },
          "enterprise_value": {
            "description": "Refers to enterprise value (EV) of the company, often used as a more comprehensive alternative to market capitalization",
            "examples": [
              2620597731328
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EnterpriseValue",
            "x-order": 20
          },
          "trailing_pe": {
            "description": "Refers to the trailing price-to-earnings (P/E). It is calculated by taking the current stock price and dividing it by the trailing earnings per share (EPS) for the past 12 months",
            "examples": [
              30.162493
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TrailingPe",
            "x-order": 30
          },
          "forward_pe": {
            "description": "Refers to the forward price-to-earnings ratio. It is calculated by dividing the current share price by the estimated future earnings per share",
            "examples": [
              26.982489
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ForwardPe",
            "x-order": 40
          },
          "peg_ratio": {
            "description": "The price/earnings to growth (PEG) ratio is a price-to-earnings ratio divided by the growth rate of the earnings",
            "examples": [
              1.4
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PegRatio",
            "x-order": 50
          },
          "price_to_sales_ttm": {
            "description": "The price-to-sales (P/S) ratio is a valuation ratio that compares the market capitalization to its revenues over the last 12 months",
            "examples": [
              7.336227
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceToSalesTtm",
            "x-order": 60
          },
          "price_to_book_mrq": {
            "description": "The price-to-book (P/B) ratio is equal to the current share price divided by the book value of all shares (BVPS) over the last quarter",
            "examples": [
              39.68831
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PriceToBookMrq",
            "x-order": 70
          },
          "enterprise_to_revenue": {
            "description": "The enterprise value-to-revenue multiple (EV/R) is a measure that compares enterprise value to revenue",
            "examples": [
              7.549
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EnterpriseToRevenue",
            "x-order": 80
          },
          "enterprise_to_ebitda": {
            "description": "The enterprise value-to-ebitda multiple (EV/EBITDA) is a measure that compares enterprise value to EBITDA",
            "examples": [
              23.623
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EnterpriseToEbitda",
            "x-order": 90
          }
        },
        "type": "object",
        "x-go-name": "ValuationsMetrics",
        "x-order": 10
      },
      "GetStatistics_200_response_statistics_financials_income_statement": {
        "description": "Income statement information",
        "properties": {
          "revenue_ttm": {
            "description": "Refers to total revenue over the last 12 months",
            "examples": [
              347155005440
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RevenueTtm",
            "x-order": 10
          },
          "revenue_per_share_ttm": {
            "description": "Refers to revenue per share over the last 12 months",
            "examples": [
              20.61
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RevenuePerShareTtm",
            "x-order": 20
          },
          "quarterly_revenue_growth": {
            "description": "Refers to quarterly revenue growth year over year",
            "examples": [
              0.364
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "QuarterlyRevenueGrowth",
            "x-order": 30
          },
          "gross_profit_ttm": {
            "description": "Refers to gross profit over the last 12 months",
            "examples": [
              104956000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "GrossProfitTtm",
            "x-order": 40
          },
          "ebitda": {
            "description": "Refers to EBITDA (earnings before interest, taxes, depreciation, and amortization) measure; EBITDA is not calculated for banks",
            "examples": [
              110934999040
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Ebitda",
            "x-order": 50
          },
          "net_income_to_common_ttm": {
            "description": "Refers to net income applicable to common shares over the last 12 months",
            "examples": [
              86801997824
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetIncomeToCommonTtm",
            "x-order": 60
          },
          "diluted_eps_ttm": {
            "description": "Refers to diluted EPS measure over the last 12 months",
            "examples": [
              5.108
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DilutedEpsTtm",
            "x-order": 70
          },
          "quarterly_earnings_growth_yoy": {
            "description": "Refers to quarterly earnings growth year over year",
            "examples": [
              0.932
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "QuarterlyEarningsGrowthYoy",
            "x-order": 80
          }
        },
        "type": "object",
        "x-go-name": "IncomeStatement",
        "x-order": 70
      },
      "GetStatistics_200_response_statistics_financials_balance_sheet": {
        "description": "Balance sheet information",
        "properties": {
          "total_cash_mrq": {
            "description": "Refers to total cash measure for the most recent quarter",
            "examples": [
              61696000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalCashMrq",
            "x-order": 20
          },
          "total_cash_per_share_mrq": {
            "description": "Refers to total cash per share measure for the most recent quarter",
            "examples": [
              3.732
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalCashPerShareMrq",
            "x-order": 30
          },
          "total_debt_mrq": {
            "description": "Refers to total debt measure for the most recent quarter",
            "examples": [
              135491002368
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalDebtMrq",
            "x-order": 40
          },
          "total_debt_to_equity_mrq": {
            "description": "Refers to total debt to equity measure for the most recent quarter",
            "examples": [
              210.782
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalDebtToEquityMrq",
            "x-order": 50
          },
          "current_ratio_mrq": {
            "description": "Refers to current ratio (total assets / total liabilities) ratio for the most recent quarter",
            "examples": [
              1.062
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CurrentRatioMrq",
            "x-order": 60
          },
          "book_value_per_share_mrq": {
            "description": "Refers to book value per share (BVPS) ratio for the most recent quarter",
            "examples": [
              3.882
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "BookValuePerShareMrq",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-name": "BalanceSheet",
        "x-order": 80
      },
      "GetStatistics_200_response_statistics_financials_cash_flow": {
        "description": "Cash flow information",
        "properties": {
          "operating_cash_flow_ttm": {
            "description": "Refers to operating cash flow measure over the last 12 months",
            "examples": [
              104414003200
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OperatingCashFlowTtm",
            "x-order": 10
          },
          "levered_free_cash_flow_ttm": {
            "description": "Refers to levered free cash flow measure over the last 12 months",
            "examples": [
              80625876992
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LeveredFreeCashFlowTtm",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "CashFlow",
        "x-order": 90
      },
      "GetStatistics_200_response_statistics_financials": {
        "description": "Financial information of the company",
        "properties": {
          "fiscal_year_ends": {
            "description": "Refers to the completion of the last 12-month accounting period",
            "examples": [
              "2020-09-26"
            ],
            "type": "string",
            "x-go-name": "FiscalYearEnds",
            "x-order": 10
          },
          "most_recent_quarter": {
            "description": "The most recent quarter (MRQ) refers to the fiscal quarter that most recently ended",
            "examples": [
              "2021-06-26"
            ],
            "type": "string",
            "x-go-name": "MostRecentQuarter",
            "x-order": 20
          },
          "gross_margin": {
            "description": "The portion of a company's revenue left over after direct costs are subtracted",
            "examples": [
              46.57807
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "GrossMargin",
            "x-order": 25
          },
          "profit_margin": {
            "description": "Refers to gross profit margin. Calculated by dividing net income by sales revenue",
            "examples": [
              0.25004
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ProfitMargin",
            "x-order": 30
          },
          "operating_margin": {
            "description": "Operating margin is calculated by dividing operating income by net sales",
            "examples": [
              0.28788
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OperatingMargin",
            "x-order": 40
          },
          "return_on_assets_ttm": {
            "description": "Return on assets (ROA) is calculated by dividing net income by total assets",
            "examples": [
              0.19302
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ReturnOnAssetsTtm",
            "x-order": 50
          },
          "return_on_equity_ttm": {
            "description": "Return on equity (ROE) is calculated by dividing net income by average shareholders' equity",
            "examples": [
              1.27125
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ReturnOnEquityTtm",
            "x-order": 60
          },
          "income_statement": {
            "$ref": "#/components/schemas/GetStatistics_200_response_statistics_financials_income_statement"
          },
          "balance_sheet": {
            "$ref": "#/components/schemas/GetStatistics_200_response_statistics_financials_balance_sheet"
          },
          "cash_flow": {
            "$ref": "#/components/schemas/GetStatistics_200_response_statistics_financials_cash_flow"
          }
        },
        "type": "object",
        "x-go-name": "Financials",
        "x-order": 20
      },
      "GetStatistics_200_response_statistics_stock_statistics": {
        "description": "Stock statistics of the company",
        "properties": {
          "shares_outstanding": {
            "description": "Refers for the shares outstanding currently held by all its shareholders",
            "examples": [
              16530199552
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SharesOutstanding",
            "x-order": 10
          },
          "float_shares": {
            "description": "Refers to floating stock is the number of public shares a company has available for trading on the open market",
            "examples": [
              16513305231
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FloatShares",
            "x-order": 20
          },
          "avg_10_volume": {
            "description": "Refers to the average 10 days volume",
            "examples": [
              72804757
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Avg10Volume",
            "x-order": 30
          },
          "avg_90_volume": {
            "description": "Refers to the average 90 days volume",
            "examples": [
              77013078
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Avg90Volume",
            "x-order": 40
          },
          "shares_short": {
            "description": "Refers to the number of shares that have been shorted",
            "examples": [
              93105968
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SharesShort",
            "x-order": 50
          },
          "short_ratio": {
            "description": "Refers to short ratio measure",
            "examples": [
              1.19
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ShortRatio",
            "x-order": 60
          },
          "short_percent_of_shares_outstanding": {
            "description": "Refers to the number of shorted shares divided by the number of shares outstanding",
            "examples": [
              0.0056
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ShortPercentOfSharesOutstanding",
            "x-order": 70
          },
          "percent_held_by_insiders": {
            "description": "Refers to the percentage of shares held by the company insiders",
            "examples": [
              0.00071000005
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PercentHeldByInsiders",
            "x-order": 80
          },
          "percent_held_by_institutions": {
            "description": "Refers to the percentage of shares held by the institutions",
            "examples": [
              0.58474
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PercentHeldByInstitutions",
            "x-order": 90
          }
        },
        "type": "object",
        "x-go-name": "StockStatistics",
        "x-order": 30
      },
      "GetStatistics_200_response_statistics_stock_price_summary": {
        "description": "Stock price summary of the company",
        "properties": {
          "fifty_two_week_low": {
            "description": "Refers to the lowest price at which stock traded during a year",
            "examples": [
              103.1
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FiftyTwoWeekLow",
            "x-order": 10
          },
          "fifty_two_week_high": {
            "description": "Refers to the highest price at which stock traded during a year",
            "examples": [
              157.26
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FiftyTwoWeekHigh",
            "x-order": 20
          },
          "fifty_two_week_change": {
            "description": "Refers to the change between lowest and highest prices during a year",
            "examples": [
              0.375625
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FiftyTwoWeekChange",
            "x-order": 30
          },
          "beta": {
            "description": "Refers to beta measure relative to the primary benchmark (index) of the country",
            "examples": [
              1.201965
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Beta",
            "x-order": 40
          },
          "day_50_ma": {
            "description": "Refers to the 50-day simple moving average",
            "examples": [
              148.96686
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Day50Ma",
            "x-order": 50
          },
          "day_200_ma": {
            "description": "Refers to the 200-day simple moving average",
            "examples": [
              134.42506
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Day200Ma",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "StockPriceSummary",
        "x-order": 40
      },
      "GetStatistics_200_response_statistics_dividends_and_splits": {
        "description": "Dividends and splits information of the company",
        "properties": {
          "forward_annual_dividend_rate": {
            "description": "Refers to the forward dividend yield estimation in the currency of instrument",
            "examples": [
              0.88
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ForwardAnnualDividendRate",
            "x-order": 10
          },
          "forward_annual_dividend_yield": {
            "description": "Refers to the forward dividend yield percentage relative to stock price",
            "examples": [
              0.0057
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ForwardAnnualDividendYield",
            "x-order": 20
          },
          "trailing_annual_dividend_rate": {
            "description": "Refers to the trailing dividend yield rate in the currency of instrument over the last 12 months",
            "examples": [
              0.835
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TrailingAnnualDividendRate",
            "x-order": 30
          },
          "trailing_annual_dividend_yield": {
            "description": "Refers to the trailing dividend yield percentage relative to stock price",
            "examples": [
              0.0053832764
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TrailingAnnualDividendYield",
            "x-order": 40
          },
          "5_year_average_dividend_yield": {
            "description": "Refers to the average 5 years dividend yield",
            "examples": [
              1.27
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FiveYearAverageDividendYield",
            "x-order": 50
          },
          "payout_ratio": {
            "description": "Refers to payout ratio, showing the proportion of earnings a company pays its shareholders in the form of dividends",
            "examples": [
              0.16309999
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PayoutRatio",
            "x-order": 60
          },
          "dividend_frequency": {
            "description": "Refers to how often a stock or fund pays dividends",
            "examples": [
              "Quarterly"
            ],
            "type": "string",
            "x-go-name": "DividendFrequency",
            "x-order": 65
          },
          "dividend_date": {
            "description": "Refers to the last dividend payout date",
            "examples": [
              "2021-08-12"
            ],
            "type": "string",
            "x-go-name": "DividendDate",
            "x-order": 70
          },
          "ex_dividend_date": {
            "description": "Refers to the last ex-dividend payout date",
            "examples": [
              "2021-08-06"
            ],
            "type": "string",
            "x-go-name": "ExDividendDate",
            "x-order": 80
          },
          "last_split_factor": {
            "description": "Specification of the last split event",
            "examples": [
              "4-for-1 split"
            ],
            "type": "string",
            "x-go-name": "LastSplitFactor",
            "x-order": 90
          },
          "last_split_date": {
            "description": "Refers for the last split date",
            "examples": [
              "2020-08-31"
            ],
            "type": "string",
            "x-go-name": "LastSplitDate",
            "x-order": 100
          }
        },
        "type": "object",
        "x-go-name": "DividendsAndSplits",
        "x-order": 50
      },
      "GetStatistics_200_response_statistics": {
        "description": "Statistics of the company",
        "properties": {
          "valuations_metrics": {
            "$ref": "#/components/schemas/GetStatistics_200_response_statistics_valuations_metrics"
          },
          "financials": {
            "$ref": "#/components/schemas/GetStatistics_200_response_statistics_financials"
          },
          "stock_statistics": {
            "$ref": "#/components/schemas/GetStatistics_200_response_statistics_stock_statistics"
          },
          "stock_price_summary": {
            "$ref": "#/components/schemas/GetStatistics_200_response_statistics_stock_price_summary"
          },
          "dividends_and_splits": {
            "$ref": "#/components/schemas/GetStatistics_200_response_statistics_dividends_and_splits"
          }
        },
        "type": "object",
        "x-go-name": "Statistics",
        "x-order": 20
      },
      "GetStatistics_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetStatistics_200_response_meta"
          },
          "statistics": {
            "$ref": "#/components/schemas/GetStatistics_200_response_statistics"
          }
        },
        "type": "object"
      },
      "GetTimeSeriesStdDev_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "STDDEV - Standard Deviation"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          },
          "sd": {
            "description": "The standard deviation applied in the calculation",
            "examples": [
              2
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "StandardDeviation",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesStdDev_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesStdDev_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesStdDev_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "stddev": {
            "description": "Standard Deviation value",
            "examples": [
              "0.86613"
            ],
            "type": "string",
            "x-go-name": "StdDev",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesStdDev_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesStdDev_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesStdDev_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesStoch_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "STOCH - Stochastic Oscillator"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 5
          },
          "fast_k_period": {
            "description": "The time period for the fast %K line in the Stochastic Oscillator",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "FastKPeriod",
            "x-order": 10
          },
          "slow_k_period": {
            "description": "The time period for the slow %K line in the Stochastic Oscillator",
            "examples": [
              1
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SlowKPeriod",
            "x-order": 20
          },
          "slow_d_period": {
            "description": "The time period for the slow %D line in the Stochastic Oscillator",
            "examples": [
              3
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SlowDPeriod",
            "x-order": 30
          },
          "slow_kma_type": {
            "description": "The type of slow %K Moving Average used",
            "examples": [
              "SMA"
            ],
            "type": "string",
            "x-go-name": "SlowKMAType",
            "x-order": 40
          },
          "slow_dma_type": {
            "description": "The type of slow Displaced Moving Average used",
            "examples": [
              "SMA"
            ],
            "type": "string",
            "x-go-name": "SlowDMAType",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesStoch_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesStoch_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesStoch_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "slow_k": {
            "description": "slow_k value",
            "examples": [
              "11.35168"
            ],
            "type": "string",
            "x-go-name": "SlowK",
            "x-order": 20
          },
          "slow_d": {
            "description": "slow_d value",
            "examples": [
              "7.5293"
            ],
            "type": "string",
            "x-go-name": "SlowD",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesStoch_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesStoch_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesStoch_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesStochF_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "STOCHF - Stochastic Fast"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "fast_k_period": {
            "description": "The fast_k period used for calculation in the indicator",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "FastKPeriod",
            "x-order": 20
          },
          "fast_d_period": {
            "description": "The fast_d period used for calculation in the indicator",
            "examples": [
              3
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "FastDPeriod",
            "x-order": 30
          },
          "fast_dma_type": {
            "description": "The type of fast Displaced Moving Average used",
            "examples": [
              "SMA"
            ],
            "type": "string",
            "x-go-name": "FastDMAType",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesStochF_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesStochF_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesStochF_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "fast_k": {
            "description": "fast_k value",
            "examples": [
              "11.35168"
            ],
            "type": "string",
            "x-go-name": "FastK",
            "x-order": 20
          },
          "fast_d": {
            "description": "fast_d value",
            "examples": [
              "7.5293"
            ],
            "type": "string",
            "x-go-name": "FastD",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesStochF_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesStochF_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesStochF_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesStochRsi_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "STOCHRSI - Stochastic RSI"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "rsi_length": {
            "description": "Length of period for calculating the RSI component",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          },
          "stoch_length": {
            "description": "Period length for computing the stochastic oscillator of the RSI",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "FastKPeriod",
            "x-order": 40
          },
          "k_period": {
            "description": "Period for smoothing the %K line",
            "examples": [
              3
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SlowKPeriod",
            "x-order": 50
          },
          "d_period": {
            "description": "Period for smoothing the %D line, which is a moving average of %K",
            "examples": [
              3
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SlowDPeriod",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesStochRsi_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesStochRsi_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesStochRsi_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "k": {
            "description": "K value",
            "examples": [
              "100.0"
            ],
            "type": "string",
            "x-go-name": "K",
            "x-order": 20
          },
          "d": {
            "description": "D value",
            "examples": [
              "33.33333"
            ],
            "type": "string",
            "x-go-name": "D",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesStochRsi_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesStochRsi_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesStochRsi_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetStocks_200_response": {
        "properties": {
          "data": {
            "description": "List of stock instruments",
            "items": {
              "$ref": "#/components/schemas/StocksResponseItem"
            },
            "type": "array",
            "x-go-name": "Data"
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status"
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSub_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "SUB - Arithmetic Subtraction"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type_1": {
            "description": "First price data type on which technical indicator is calculated",
            "examples": [
              "open"
            ],
            "type": "string",
            "x-go-name": "SeriesType1",
            "x-order": 20
          },
          "series_type_2": {
            "description": "Second price data type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType2",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesSub_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesSub_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesSub_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "sub": {
            "description": "SUB value",
            "examples": [
              "0.404"
            ],
            "type": "string",
            "x-go-name": "Sub",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSub_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesSub_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesSub_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSum_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "SUM - Vector Summation"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesSum_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesSum_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesSum_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "sum": {
            "description": "Sum value",
            "examples": [
              "1812.70842"
            ],
            "type": "string",
            "x-go-name": "Sum",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSum_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesSum_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesSum_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSuperTrend_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "SUPERTREND - SuperTrend Indicator"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "period": {
            "description": "The period used for calculation in the indicator",
            "examples": [
              10
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Period",
            "x-order": 20
          },
          "multiplier": {
            "description": "The factor used to adjust the indicator's sensitivity",
            "examples": [
              3
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Multiplier",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesSuperTrend_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesSuperTrend_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesSuperTrend_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "supertrend": {
            "description": "SuperTrend value",
            "examples": [
              "201.56432"
            ],
            "type": "string",
            "x-go-name": "SuperTrend",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSuperTrend_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesSuperTrend_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesSuperTrend_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSuperTrendHeikinAshiCandles_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "SUPERTREND_HEIKINASHICANDLES - SuperTrendHeikinAshiCandles Indicator"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "period": {
            "description": "The period used for calculation in the indicator",
            "examples": [
              10
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Period",
            "x-order": 20
          },
          "multiplier": {
            "description": "The multiplier used for calculation in the indicator",
            "examples": [
              3
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Multiplier",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesSuperTrendHeikinAshiCandles_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesSuperTrendHeikinAshiCandles_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesSuperTrendHeikinAshiCandles_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 5
          },
          "supertrend": {
            "description": "SuperTrend value",
            "examples": [
              "201.66713"
            ],
            "type": "string",
            "x-go-name": "SuperTrend",
            "x-order": 10
          },
          "heikinhighs": {
            "description": "Heikin-Ashi high values",
            "examples": [
              "201.25599"
            ],
            "type": "string",
            "x-go-name": "HeikinHigh",
            "x-order": 20
          },
          "heikinopens": {
            "description": "Heikin-Ashi open values",
            "examples": [
              "200.9825"
            ],
            "type": "string",
            "x-go-name": "HeikinOpen",
            "x-order": 30
          },
          "heikincloses": {
            "description": "Heikin-Ashi close values",
            "examples": [
              "201.02449"
            ],
            "type": "string",
            "x-go-name": "HeikinClose",
            "x-order": 40
          },
          "heikinlows": {
            "description": "Heikin-Ashi low values",
            "examples": [
              "200.85199"
            ],
            "type": "string",
            "x-go-name": "HeikinLow",
            "x-order": 50
          }
        },
        "type": "object"
      },
      "GetTimeSeriesSuperTrendHeikinAshiCandles_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesSuperTrendHeikinAshiCandles_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesSuperTrendHeikinAshiCandles_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetSymbolSearch_200_response": {
        "properties": {
          "data": {
            "description": "List of symbols matching the search criteria",
            "items": {
              "$ref": "#/components/schemas/SymbolSearchResponseItem"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 10
          },
          "status": {
            "description": "Status of the response",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesT3ma_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "T3MA - Triple Exponential Moving Average"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          },
          "v_factor": {
            "description": "The factor used to adjust the indicator's volatility",
            "examples": [
              0.7
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "VFactor",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesT3ma_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesT3ma_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesT3ma_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "t3ma": {
            "description": "T3MA value",
            "examples": [
              "201.56277"
            ],
            "type": "string",
            "x-go-name": "T3ma",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesT3ma_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesT3ma_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesT3ma_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTaxInfo_200_response_meta": {
        "description": "Metadata about the requested instrument",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested",
            "examples": [
              "ALM"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "name": {
            "description": "The instrument name",
            "examples": [
              "Almirall SA"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 20
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded",
            "examples": [
              "BME"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 30
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded",
            "examples": [
              "XMAD"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 40
          },
          "country": {
            "description": "The instrument country name",
            "examples": [
              "Spain"
            ],
            "type": "string",
            "x-go-name": "Country",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTaxInfo_200_response_data": {
        "description": "Tax information data containing the tax indicator for the requested instrument",
        "properties": {
          "tax_indicator": {
            "description": "The instrument tax indicator, can be `null`, `us_1446f`, `spanish_ftt`, `uk_stamp_duty`, `hk_stamp_duty`, `french_ftt` or `italian_ftt`",
            "examples": [
              "spanish_ftt"
            ],
            "type": "string",
            "x-go-name": "TaxIndicator",
            "x-order": 10
          }
        },
        "type": "object",
        "x-go-name": "Data",
        "x-order": 20
      },
      "GetTaxInfo_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTaxInfo_200_response_meta"
          },
          "data": {
            "$ref": "#/components/schemas/GetTaxInfo_200_response_data"
          },
          "status": {
            "description": "The status of the request, e.g., `ok`, `error`",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTechnicalIndicators_200_response_data_value_inner": {
        "properties": {
          "enable": {
            "description": "If the indicator is tested, approved and is recommended for use returns <code>true</code>, otherwise returns <code>false</code>",
            "examples": [
              true
            ],
            "type": "boolean",
            "x-go-name": "Enable",
            "x-order": 10
          },
          "full_name": {
            "description": "Full indicator name",
            "examples": [
              "Moving Average Convergence Divergence"
            ],
            "type": "string",
            "x-go-name": "FullName",
            "x-order": 20
          },
          "description": {
            "description": "Brief description of the indicator",
            "examples": [
              "Moving Average Convergence Divergence(MACD) is ..."
            ],
            "type": "string",
            "x-go-name": "Description",
            "x-order": 30
          },
          "type": {
            "description": "Group to which indicator belongs to",
            "examples": [
              "Momentum Indicators"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 40
          },
          "overlay": {
            "description": "If indicator should be plotted over price bars returns <code>true</code>, otherwise returns <code>false</code>",
            "examples": [
              false
            ],
            "type": "boolean",
            "x-go-name": "Overlay",
            "x-order": 50
          },
          "output_values": {
            "$ref": "#/components/schemas/TechnicalIndicatorsResponseMacdOutputValues"
          },
          "parameters": {
            "$ref": "#/components/schemas/TechnicalIndicatorsResponseMacdParameters"
          },
          "tinting": {
            "$ref": "#/components/schemas/TechnicalIndicatorsResponseMacdTinting"
          }
        },
        "type": "object"
      },
      "GetTechnicalIndicators_200_response": {
        "properties": {
          "data": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/GetTechnicalIndicators_200_response_data_value_inner"
              },
              "type": "array"
            },
            "description": "Map of technical indicators available at Twelve Data API",
            "type": "object",
            "x-example-key": "macd",
            "x-go-name": "Data",
            "x-order": 10
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status"
          }
        },
        "type": "object"
      },
      "GetTimeSeriesTema_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "TEMA - Triple Exponential Moving Average"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesTema_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesTema_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesTema_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "tema": {
            "description": "TEMA value",
            "examples": [
              "200.83136"
            ],
            "type": "string",
            "x-go-name": "Tema",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesTema_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesTema_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesTema_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeries_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeries_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeries_200_response_meta"
          },
          "values": {
            "description": "List of time series data points",
            "items": {
              "$ref": "#/components/schemas/TimeSeriesItem"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesCross_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/CrossMeta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/TimeSeriesCrossItem"
            },
            "type": "array",
            "x-go-name": "Values"
          }
        },
        "type": "object"
      },
      "GetTimeSeriesTRange_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "TRANGE - True Range"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesTRange_200_response_meta": {
        "description": "json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesTRange_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesTRange_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "trange": {
            "description": "trange value",
            "examples": [
              "0.404"
            ],
            "type": "string",
            "x-go-name": "TRange",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesTRange_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesTRange_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesTRange_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesTrima_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "TRIMA - Triangular Moving Average"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesTrima_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesTrima_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesTrima_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "trima": {
            "description": "TRIMA value",
            "examples": [
              "201.36415"
            ],
            "type": "string",
            "x-go-name": "Trima",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesTrima_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesTrima_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesTrima_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesTsf_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "TSF - Time Series Forecast"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesTsf_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesTsf_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesTsf_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "tsf": {
            "description": "TSF value",
            "examples": [
              "200.63858"
            ],
            "type": "string",
            "x-go-name": "Tsf",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesTsf_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesTsf_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesTsf_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesTypPrice_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "TYPPRICE - Typical Price"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesTypPrice_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesTypPrice_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesTypPrice_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "typprice": {
            "description": "typprice value",
            "examples": [
              "201.05266"
            ],
            "type": "string",
            "x-go-name": "TypPrice",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesTypPrice_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesTypPrice_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesTypPrice_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesUltOsc_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "ULTOSC - Ultimate Oscillator"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period_1": {
            "description": "The first time period used for calculation in the indicator",
            "examples": [
              7
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod1",
            "x-order": 20
          },
          "time_period_2": {
            "description": "The second time period used for calculation in the indicator",
            "examples": [
              14
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod2",
            "x-order": 30
          },
          "time_period_3": {
            "description": "The third time period used for calculation in the indicator",
            "examples": [
              28
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod3",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesUltOsc_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesUltOsc_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesUltOsc_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "ultosc": {
            "description": "Ultimate Oscillator value",
            "examples": [
              "25.17927"
            ],
            "type": "string",
            "x-go-name": "UltOsc",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesUltOsc_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesUltOsc_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesUltOsc_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesVar_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "VAR - Variance"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesVar_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesVar_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesVar_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "var": {
            "description": "VAR value",
            "examples": [
              "0.18755"
            ],
            "type": "string",
            "x-go-name": "Var",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesVar_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesVar_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesVar_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesVwap_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "VWAP - Volume Weighted Average Price"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "sd_time_period": {
            "description": "Standard deviation time period",
            "format": "int64",
            "type": "integer",
            "x-go-name": "SDTimePeriod",
            "x-order": 20
          },
          "sd": {
            "description": "Standard deviation value",
            "format": "double",
            "type": "number",
            "x-go-name": "StandardDeviation",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesVwap_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesVwap_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesVwap_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "vwap_lower": {
            "description": "VWAP lower value",
            "examples": [
              201.05266
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "VWAPLower",
            "x-order": 20
          },
          "vwap": {
            "description": "VWAP value",
            "examples": [
              201.05266
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "VWAP",
            "x-order": 30
          },
          "vwap_upper": {
            "description": "VWAP upper value",
            "examples": [
              201.05266
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "VWAPUpper",
            "x-order": 40
          }
        },
        "type": "object"
      },
      "GetTimeSeriesVwap_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesVwap_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesVwap_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesWclPrice_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "WCLPRICE - Weighted Close Price"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesWclPrice_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesWclPrice_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesWclPrice_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "wclprice": {
            "description": "wclprice value",
            "examples": [
              201.052
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "WclPrice",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesWclPrice_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesWclPrice_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesWclPrice_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesWillR_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "WILLR - Williams %R"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesWillR_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesWillR_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesWillR_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "willr": {
            "description": "Williams %R value",
            "examples": [
              "-84.8916"
            ],
            "type": "string",
            "x-go-name": "WillR",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesWillR_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesWillR_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesWillR_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetTimeSeriesWma_200_response_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "WMA - Weighted Moving Average"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          },
          "time_period": {
            "description": "The time period used for calculation in the indicator",
            "examples": [
              9
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "TimePeriod",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "GetTimeSeriesWma_200_response_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/GetTimeSeriesWma_200_response_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "GetTimeSeriesWma_200_response_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2019-08-09 15:59:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "wma": {
            "description": "WMA value",
            "examples": [
              "201.20579"
            ],
            "type": "string",
            "x-go-name": "Wma",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "GetTimeSeriesWma_200_response": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/GetTimeSeriesWma_200_response_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/GetTimeSeriesWma_200_response_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "AssetsInfo_current_assets_receivables": {
        "description": "Receivables information",
        "properties": {
          "total_receivables": {
            "description": "Total receivables",
            "examples": [
              60985000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalReceivables",
            "x-order": 10
          },
          "accounts_receivable": {
            "description": "Accounts receivable",
            "examples": [
              29508000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccountsReceivable",
            "x-order": 20
          },
          "gross_accounts_receivable": {
            "description": "Gross accounts receivable",
            "examples": [
              29508000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "GrossAccountsReceivable",
            "x-order": 30
          },
          "allowance_for_doubtful_accounts_receivable": {
            "description": "Allowance for doubtful accounts receivable",
            "examples": [
              29508000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AllowanceForDoubtfulAccountsReceivable",
            "x-order": 40
          },
          "receivables_adjustments_allowances": {
            "description": "Receivables adjustments allowances",
            "examples": [
              29508000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ReceivablesAdjustmentsAllowances",
            "x-order": 50
          },
          "other_receivables": {
            "description": "Other receivables",
            "examples": [
              31477000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherReceivables",
            "x-order": 60
          },
          "due_from_related_parties_current": {
            "description": "Due from related parties current",
            "examples": [
              31477000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DueFromRelatedPartiesCurrent",
            "x-order": 70
          },
          "taxes_receivable": {
            "description": "Taxes receivable",
            "examples": [
              31477000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TaxesReceivable",
            "x-order": 80
          },
          "accrued_interest_receivable": {
            "description": "Accrued interest receivable",
            "examples": [
              31477000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccruedInterestReceivable",
            "x-order": 90
          },
          "notes_receivable": {
            "description": "Notes receivable",
            "examples": [
              31477000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NotesReceivable",
            "x-order": 100
          },
          "loans_receivable": {
            "description": "Loans receivable",
            "examples": [
              31477000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LoansReceivable",
            "x-order": 110
          }
        },
        "type": "object",
        "x-go-name": "Receivables",
        "x-order": 80
      },
      "AssetsInfo_current_assets_inventory": {
        "description": "Inventory information",
        "properties": {
          "total_inventory": {
            "description": "Total inventory",
            "examples": [
              6331000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalInventory",
            "x-order": 10
          },
          "inventories_adjustments_allowances": {
            "description": "Inventories adjustments allowances",
            "examples": [
              6331000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InventoriesAdjustmentsAllowances",
            "x-order": 20
          },
          "other_inventories": {
            "description": "Other inventories",
            "examples": [
              6331000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherInventories",
            "x-order": 30
          },
          "finished_goods": {
            "description": "Finished goods",
            "examples": [
              6331000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FinishedGoods",
            "x-order": 40
          },
          "work_in_process": {
            "description": "Work in process",
            "examples": [
              6331000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "WorkInProcess",
            "x-order": 50
          },
          "raw_materials": {
            "description": "Raw materials",
            "examples": [
              6331000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RawMaterials",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "Inventory",
        "x-order": 90
      },
      "AssetsInfo_current_assets": {
        "description": "Current assets information",
        "properties": {
          "total_current_assets": {
            "description": "Total current assets",
            "examples": [
              143566000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalCurrentAssets",
            "x-order": 10
          },
          "cash_cash_equivalents_and_short_term_investments": {
            "description": "Cash cash equivalents and short term investments",
            "examples": [
              61555000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CashCashEquivalentsAndShortTermInvestments",
            "x-order": 20
          },
          "cash_and_cash_equivalents": {
            "description": "Cash and cash equivalents",
            "examples": [
              29965000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CashAndCashEquivalents",
            "x-order": 30
          },
          "cash_equivalents": {
            "description": "Cash equivalents",
            "examples": [
              1606000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CashEquivalents",
            "x-order": 40
          },
          "cash_financial": {
            "description": "Cash financial",
            "examples": [
              28359000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CashFinancial",
            "x-order": 50
          },
          "other_short_term_investments": {
            "description": "Other short term investments",
            "examples": [
              31590000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherShortTermInvestments",
            "x-order": 60
          },
          "restricted_cash": {
            "description": "Restricted cash",
            "examples": [
              31590000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RestrictedCash",
            "x-order": 70
          },
          "receivables": {
            "$ref": "#/components/schemas/AssetsInfo_current_assets_receivables"
          },
          "inventory": {
            "$ref": "#/components/schemas/AssetsInfo_current_assets_inventory"
          },
          "prepaid_assets": {
            "description": "Prepaid assets",
            "examples": [
              14695000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PrepaidAssets",
            "x-order": 100
          },
          "current_deferred_assets": {
            "description": "Current deferred assets",
            "examples": [
              14695000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CurrentDeferredAssets",
            "x-order": 110
          },
          "current_deferred_taxes_assets": {
            "description": "Current deferred taxes assets",
            "examples": [
              14695000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CurrentDeferredTaxesAssets",
            "x-order": 120
          },
          "assets_held_for_sale_current": {
            "description": "Assets held for sale current",
            "examples": [
              14695000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AssetsHeldForSaleCurrent",
            "x-order": 130
          },
          "hedging_assets_current": {
            "description": "Hedging assets current",
            "examples": [
              14695000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "HedgingAssetsCurrent",
            "x-order": 140
          },
          "other_current_assets": {
            "description": "Other current assets",
            "examples": [
              14695000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherCurrentAssets",
            "x-order": 150
          }
        },
        "type": "object",
        "x-go-name": "CurrentAssets",
        "x-order": 20
      },
      "AssetsInfo_non_current_assets_goodwill_and_other_intangible_assets": {
        "description": "Goodwill and other intangible assets information",
        "properties": {
          "goodwill": {
            "description": "Goodwill",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Goodwill",
            "x-order": 10
          },
          "other_intangible_assets": {
            "description": "Other intangible assets",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherIntangibleAssets",
            "x-order": 20
          },
          "total_goodwill_and_intangible_assets": {
            "description": "Total goodwill and intangible assets",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalGoodwillAndIntangibleAssets",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "GoodwillAndOtherIntangibleAssets",
        "x-order": 160
      },
      "AssetsInfo_non_current_assets": {
        "description": "Non-current assets information",
        "properties": {
          "total_non_current_assets": {
            "description": "Total non current assets",
            "examples": [
              209017000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalNonCurrentAssets",
            "x-order": 10
          },
          "financial_assets": {
            "description": "Financial assets",
            "examples": [
              209017000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FinancialAssets",
            "x-order": 20
          },
          "investments_and_advances": {
            "description": "Investments and advances",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InvestmentsAndAdvances",
            "x-order": 30
          },
          "other_investments": {
            "description": "Other investments",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherInvestments",
            "x-order": 40
          },
          "investment_in_financial_assets": {
            "description": "Investment in financial assets",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InvestmentInFinancialAssets",
            "x-order": 50
          },
          "held_to_maturity_securities": {
            "description": "Held to maturity securities",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "HeldToMaturitySecurities",
            "x-order": 60
          },
          "available_for_sale_securities": {
            "description": "Available for sale securities",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AvailableForSaleSecurities",
            "x-order": 70
          },
          "financial_assets_designated_as_fair_value_through_profit_or_loss_total": {
            "description": "Financial assets designated as fair value through profit or loss total",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FinancialAssetsDesignatedAsFairValueThroughProfitOrLossTotal",
            "x-order": 80
          },
          "trading_securities": {
            "description": "Trading securities",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TradingSecurities",
            "x-order": 90
          },
          "long_term_equity_investment": {
            "description": "Long term equity investment",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LongTermEquityInvestment",
            "x-order": 100
          },
          "investments_in_joint_ventures_at_cost": {
            "description": "Investments in joint ventures at cost",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InvestmentsInJointVenturesAtCost",
            "x-order": 110
          },
          "investments_in_other_ventures_under_equity_method": {
            "description": "Investments in other ventures under equity method",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InvestmentsInOtherVenturesUnderEquityMethod",
            "x-order": 120
          },
          "investments_in_associates_at_cost": {
            "description": "Investments in associates at cost",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InvestmentsInAssociatesAtCost",
            "x-order": 130
          },
          "investments_in_subsidiaries_at_cost": {
            "description": "Investments in subsidiaries at cost",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InvestmentsInSubsidiariesAtCost",
            "x-order": 140
          },
          "investment_properties": {
            "description": "Investment properties",
            "examples": [
              100544000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InvestmentProperties",
            "x-order": 150
          },
          "goodwill_and_other_intangible_assets": {
            "$ref": "#/components/schemas/AssetsInfo_non_current_assets_goodwill_and_other_intangible_assets"
          },
          "net_ppe": {
            "description": "Net ppe",
            "examples": [
              54376000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetPpe",
            "x-order": 170
          },
          "gross_ppe": {
            "description": "Gross ppe",
            "examples": [
              125260000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "GrossPpe",
            "x-order": 180
          },
          "accumulated_depreciation": {
            "description": "Accumulated depreciation",
            "examples": [
              -70884000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccumulatedDepreciation",
            "x-order": 190
          },
          "leases": {
            "description": "Leases",
            "examples": [
              12839000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Leases",
            "x-order": 200
          },
          "construction_in_progress": {
            "description": "Construction in progress",
            "examples": [
              12839000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ConstructionInProgress",
            "x-order": 210
          },
          "other_properties": {
            "description": "Other properties",
            "examples": [
              10661000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherProperties",
            "x-order": 220
          },
          "machinery_furniture_equipment": {
            "description": "Machinery furniture equipment",
            "examples": [
              78314000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "MachineryFurnitureEquipment",
            "x-order": 230
          },
          "buildings_and_improvements": {
            "description": "Buildings and improvements",
            "examples": [
              12839000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "BuildingsAndImprovements",
            "x-order": 240
          },
          "land_and_improvements": {
            "description": "Land and improvements",
            "examples": [
              23446000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LandAndImprovements",
            "x-order": 250
          },
          "properties": {
            "description": "Properties",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Properties",
            "x-order": 260
          },
          "non_current_accounts_receivable": {
            "description": "Non current accounts receivable",
            "examples": [
              12839000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NonCurrentAccountsReceivable",
            "x-order": 270
          },
          "non_current_note_receivables": {
            "description": "Non current note receivables",
            "examples": [
              12839000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NonCurrentNoteReceivables",
            "x-order": 280
          },
          "due_from_related_parties_non_current": {
            "description": "Due from related parties non current",
            "examples": [
              12839000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DueFromRelatedPartiesNonCurrent",
            "x-order": 290
          },
          "non_current_prepaid_assets": {
            "description": "Non current prepaid assets",
            "examples": [
              12839000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NonCurrentPrepaidAssets",
            "x-order": 300
          },
          "non_current_deferred_assets": {
            "description": "Non current deferred assets",
            "examples": [
              17852000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NonCurrentDeferredAssets",
            "x-order": 310
          },
          "non_current_deferred_taxes_assets": {
            "description": "Non current deferred taxes assets",
            "examples": [
              17852000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NonCurrentDeferredTaxesAssets",
            "x-order": 320
          },
          "defined_pension_benefit": {
            "description": "Defined pension benefit",
            "examples": [
              12839000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DefinedPensionBenefit",
            "x-order": 330
          },
          "other_non_current_assets": {
            "description": "Other non current assets",
            "examples": [
              36245000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherNonCurrentAssets",
            "x-order": 340
          }
        },
        "type": "object",
        "x-go-name": "NonCurrentAssets",
        "x-order": 30
      },
      "AssetsInfo_liabilities_current_liabilities_payables_and_accrued_expenses": {
        "description": "Payables and accrued expenses information",
        "properties": {
          "total_payables_and_accrued_expenses": {
            "description": "Total payables and accrued expenses",
            "examples": [
              71430000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalPayablesAndAccruedExpenses",
            "x-order": 10
          },
          "accounts_payable": {
            "description": "Accounts payable",
            "examples": [
              62611000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccountsPayable",
            "x-order": 20
          },
          "current_accrued_expenses": {
            "description": "Current accrued expenses",
            "examples": [
              9822000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CurrentAccruedExpenses",
            "x-order": 30
          },
          "interest_payable": {
            "description": "Interest payable",
            "examples": [
              9822000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InterestPayable",
            "x-order": 40
          },
          "payables": {
            "description": "Payables",
            "examples": [
              71430000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Payables",
            "x-order": 50
          },
          "other_payable": {
            "description": "Other payable",
            "examples": [
              9822000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherPayable",
            "x-order": 60
          },
          "due_to_related_parties_current": {
            "description": "Due to related parties current",
            "examples": [
              9822000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DueToRelatedPartiesCurrent",
            "x-order": 70
          },
          "dividends_payable": {
            "description": "Dividends payable",
            "examples": [
              9822000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DividendsPayable",
            "x-order": 80
          },
          "total_tax_payable": {
            "description": "Total tax payable",
            "examples": [
              8819000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalTaxPayable",
            "x-order": 90
          },
          "income_tax_payable": {
            "description": "Income tax payable",
            "examples": [
              8819000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "IncomeTaxPayable",
            "x-order": 100
          }
        },
        "type": "object",
        "x-go-name": "PayablesAndAccruedExpenses",
        "x-order": 100
      },
      "AssetsInfo_liabilities_current_liabilities": {
        "description": "Current liabilities information",
        "properties": {
          "total_current_liabilities": {
            "description": "Total current liabilities",
            "examples": [
              145308000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalCurrentLiabilities",
            "x-order": 10
          },
          "current_debt_and_capital_lease_obligation": {
            "description": "Current debt and capital lease obligation",
            "examples": [
              17382000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CurrentDebtAndCapitalLeaseObligation",
            "x-order": 20
          },
          "current_debt": {
            "description": "Current debt",
            "examples": [
              15807000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CurrentDebt",
            "x-order": 30
          },
          "current_capital_lease_obligation": {
            "description": "Current capital lease obligation",
            "examples": [
              1575000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CurrentCapitalLeaseObligation",
            "x-order": 40
          },
          "other_current_borrowings": {
            "description": "Other current borrowings",
            "examples": [
              9822000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherCurrentBorrowings",
            "x-order": 50
          },
          "line_of_credit": {
            "description": "Line of credit",
            "examples": [
              9822000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LineOfCredit",
            "x-order": 60
          },
          "commercial_paper": {
            "description": "Commercial paper",
            "examples": [
              5985000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CommercialPaper",
            "x-order": 70
          },
          "current_notes_payable": {
            "description": "Current notes payable",
            "examples": [
              9822000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CurrentNotesPayable",
            "x-order": 80
          },
          "current_provisions": {
            "description": "Current provisions",
            "examples": [
              9822000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CurrentProvisions",
            "x-order": 90
          },
          "payables_and_accrued_expenses": {
            "$ref": "#/components/schemas/AssetsInfo_liabilities_current_liabilities_payables_and_accrued_expenses"
          },
          "pension_and_other_post_retirement_benefit_plans_current": {
            "description": "Pension and other post retirement benefit plans current",
            "examples": [
              8061000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PensionAndOtherPostRetirementBenefitPlansCurrent",
            "x-order": 110
          },
          "employee_benefits": {
            "description": "Employee benefits",
            "examples": [
              8061000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EmployeeBenefits",
            "x-order": 120
          },
          "current_deferred_liabilities": {
            "description": "Current deferred liabilities",
            "examples": [
              8061000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CurrentDeferredLiabilities",
            "x-order": 130
          },
          "current_deferred_revenue": {
            "description": "Current deferred revenue",
            "examples": [
              8061000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CurrentDeferredRevenue",
            "x-order": 140
          },
          "current_deferred_taxes_liabilities": {
            "description": "Current deferred taxes liabilities",
            "examples": [
              8061000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CurrentDeferredTaxesLiabilities",
            "x-order": 150
          },
          "other_current_liabilities": {
            "description": "Other current liabilities",
            "examples": [
              48435000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherCurrentLiabilities",
            "x-order": 160
          },
          "liabilities_held_for_sale_non_current": {
            "description": "Liabilities held for sale non current",
            "examples": [
              48435000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LiabilitiesHeldForSaleNonCurrent",
            "x-order": 170
          }
        },
        "type": "object",
        "x-go-name": "CurrentLiabilities",
        "x-order": 20
      },
      "AssetsInfo_liabilities_non_current_liabilities_long_term_debt_and_capital_lease_obligation": {
        "description": "Long term debt and capital lease obligation information",
        "properties": {
          "total_long_term_debt_and_capital_lease_obligation": {
            "description": "Total long term debt and capital lease obligation",
            "examples": [
              106548000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalLongTermDebtAndCapitalLeaseObligation",
            "x-order": 10
          },
          "long_term_debt": {
            "description": "Long term debt",
            "examples": [
              95281000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LongTermDebt",
            "x-order": 20
          },
          "long_term_capital_lease_obligation": {
            "description": "Long term capital lease obligation",
            "examples": [
              11267000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LongTermCapitalLeaseObligation",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "LongTermDebtAndCapitalLeaseObligation",
        "x-order": 20
      },
      "AssetsInfo_liabilities_non_current_liabilities": {
        "description": "Non-current liabilities information",
        "properties": {
          "total_non_current_liabilities_net_minority_interest": {
            "description": "Total non current liabilities net minority interest",
            "examples": [
              145129000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalNonCurrentLiabilitiesNetMinorityInterest",
            "x-order": 10
          },
          "long_term_debt_and_capital_lease_obligation": {
            "$ref": "#/components/schemas/AssetsInfo_liabilities_non_current_liabilities_long_term_debt_and_capital_lease_obligation"
          },
          "long_term_provisions": {
            "description": "Long term provisions",
            "examples": [
              15457000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LongTermProvisions",
            "x-order": 30
          },
          "non_current_pension_and_other_postretirement_benefit_plans": {
            "description": "Non current pension and other postretirement benefit plans",
            "examples": [
              15457000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NonCurrentPensionAndOtherPostretirementBenefitPlans",
            "x-order": 40
          },
          "non_current_accrued_expenses": {
            "description": "Non current accrued expenses",
            "examples": [
              15457000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NonCurrentAccruedExpenses",
            "x-order": 50
          },
          "due_to_related_parties_non_current": {
            "description": "Due to related parties non current",
            "examples": [
              15457000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DueToRelatedPartiesNonCurrent",
            "x-order": 60
          },
          "trade_and_other_payables_non_current": {
            "description": "Trade and other payables non current",
            "examples": [
              15457000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TradeAndOtherPayablesNonCurrent",
            "x-order": 70
          },
          "non_current_deferred_liabilities": {
            "description": "Non current deferred liabilities",
            "examples": [
              15457000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NonCurrentDeferredLiabilities",
            "x-order": 80
          },
          "non_current_deferred_revenue": {
            "description": "Non current deferred revenue",
            "examples": [
              15457000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NonCurrentDeferredRevenue",
            "x-order": 90
          },
          "non_current_deferred_taxes_liabilities": {
            "description": "Non current deferred taxes liabilities",
            "examples": [
              15457000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NonCurrentDeferredTaxesLiabilities",
            "x-order": 100
          },
          "other_non_current_liabilities": {
            "description": "Other non current liabilities",
            "examples": [
              23124000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherNonCurrentLiabilities",
            "x-order": 110
          },
          "preferred_securities_outside_stock_equity": {
            "description": "Preferred securities outside stock equity",
            "examples": [
              15457000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PreferredSecuritiesOutsideStockEquity",
            "x-order": 120
          },
          "derivative_product_liabilities": {
            "description": "Derivative product liabilities",
            "examples": [
              15457000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DerivativeProductLiabilities",
            "x-order": 130
          },
          "capital_lease_obligations": {
            "description": "Capital lease obligations",
            "examples": [
              12842000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CapitalLeaseObligations",
            "x-order": 140
          },
          "restricted_common_stock": {
            "description": "Restricted common stock",
            "examples": [
              12842000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RestrictedCommonStock",
            "x-order": 150
          }
        },
        "type": "object",
        "x-go-name": "NonCurrentLiabilities",
        "x-order": 30
      },
      "AssetsInfo_liabilities": {
        "description": "Liabilities information",
        "properties": {
          "total_liabilities_net_minority_interest": {
            "description": "Total liabilities net minority interest",
            "examples": [
              290437000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalLiabilitiesNetMinorityInterest",
            "x-order": 10
          },
          "current_liabilities": {
            "$ref": "#/components/schemas/AssetsInfo_liabilities_current_liabilities"
          },
          "non_current_liabilities": {
            "$ref": "#/components/schemas/AssetsInfo_liabilities_non_current_liabilities"
          },
          "equity": {
            "$ref": "#/components/schemas/EquityInfo"
          }
        },
        "type": "object",
        "x-go-name": "Liabilities",
        "x-order": 40
      },
      "CashFlowData_cash_flow_from_operating_activities": {
        "description": "Cash flow from operating activities",
        "properties": {
          "net_income_from_continuing_operations": {
            "description": "Net income from continuing operations",
            "examples": [
              96995000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetIncomeFromContinuingOperations",
            "x-order": 10
          },
          "operating_cash_flow": {
            "description": "Operating cash flow",
            "examples": [
              110543000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OperatingCashFlow",
            "x-order": 20
          },
          "cash_flow_from_continuing_operating_activities": {
            "description": "Cash flow from continuing operating activities",
            "examples": [
              110543000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CashFlowFromContinuingOperatingActivities",
            "x-order": 30
          },
          "cash_from_discontinued_operating_activities": {
            "description": "Cash from discontinued operating activities",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CashFromDiscontinuedOperatingActivities",
            "x-order": 40
          },
          "cash_flow_from_discontinued_operation": {
            "description": "Cash flow from discontinued operation",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CashFlowFromDiscontinuedOperation",
            "x-order": 50
          },
          "free_cash_flow": {
            "description": "Free cash flow",
            "examples": [
              99584000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FreeCashFlow",
            "x-order": 60
          },
          "cash_flows_from_used_in_operating_activities_direct": {
            "description": "Cash flows from used in operating activities direct",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CashFlowsFromUsedInOperatingActivitiesDirect",
            "x-order": 70
          },
          "taxes_refund_paid": {
            "description": "Taxes refund paid",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TaxesRefundPaid",
            "x-order": 80
          },
          "taxes_refund_paid_direct": {
            "description": "Taxes refund paid direct",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TaxesRefundPaidDirect",
            "x-order": 90
          },
          "interest_received": {
            "description": "Interest received",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InterestReceived",
            "x-order": 100
          },
          "interest_received_direct": {
            "description": "Interest received direct",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InterestReceivedDirect",
            "x-order": 110
          },
          "interest_paid": {
            "description": "Interest paid",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InterestPaid",
            "x-order": 120
          },
          "interest_paid_direct": {
            "description": "Interest paid direct",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InterestPaidDirect",
            "x-order": 130
          },
          "dividend_received": {
            "description": "Dividend received",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DividendReceived",
            "x-order": 140
          },
          "dividend_received_direct": {
            "description": "Dividend received direct",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DividendReceivedDirect",
            "x-order": 150
          },
          "dividend_paid": {
            "description": "Dividend paid",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DividendPaid",
            "x-order": 160
          },
          "dividend_paid_direct": {
            "description": "Dividend paid direct",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DividendPaidDirect",
            "x-order": 170
          },
          "change_in_working_capital": {
            "description": "Change in working capital",
            "examples": [
              -6577000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangeInWorkingCapital",
            "x-order": 180
          },
          "change_in_other_working_capital": {
            "description": "Change in other working capital",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangeInOtherWorkingCapital",
            "x-order": 190
          },
          "change_in_receivables": {
            "description": "Change in receivables",
            "examples": [
              -417000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangeInReceivables",
            "x-order": 200
          },
          "changes_in_account_receivables": {
            "description": "Changes in account receivables",
            "examples": [
              -1688000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangesInAccountReceivables",
            "x-order": 210
          },
          "change_in_payables_and_accrued_expense": {
            "description": "Change in payables and accrued expense",
            "examples": [
              -1889000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangeInPayablesAndAccruedExpense",
            "x-order": 220
          },
          "change_in_accrued_expense": {
            "description": "Change in accrued expense",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangeInAccruedExpense",
            "x-order": 230
          },
          "change_in_payable": {
            "description": "Change in payable",
            "examples": [
              -1889000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangeInPayable",
            "x-order": 240
          },
          "change_in_dividend_payable": {
            "description": "Change in dividend payable",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangeInDividendPayable",
            "x-order": 250
          },
          "change_in_account_payable": {
            "description": "Change in account payable",
            "examples": [
              -1889000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangeInAccountPayable",
            "x-order": 260
          },
          "change_in_tax_payable": {
            "description": "Change in tax payable",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangeInTaxPayable",
            "x-order": 270
          },
          "change_in_income_tax_payable": {
            "description": "Change in income tax payable",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangeInIncomeTaxPayable",
            "x-order": 280
          },
          "change_in_interest_payable": {
            "description": "Change in interest payable",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangeInInterestPayable",
            "x-order": 290
          },
          "change_in_other_current_liabilities": {
            "description": "Change in other current liabilities",
            "examples": [
              3031000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangeInOtherCurrentLiabilities",
            "x-order": 300
          },
          "change_in_other_current_assets": {
            "description": "Change in other current assets",
            "examples": [
              -5684000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangeInOtherCurrentAssets",
            "x-order": 310
          },
          "change_in_inventory": {
            "description": "Change in inventory",
            "examples": [
              -1618000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangeInInventory",
            "x-order": 320
          },
          "change_in_prepaid_assets": {
            "description": "Change in prepaid assets",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangeInPrepaidAssets",
            "x-order": 330
          },
          "other_non_cash_items": {
            "description": "Other non cash items",
            "examples": [
              -2227000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherNonCashItems",
            "x-order": 340
          },
          "excess_tax_benefit_from_stock_based_compensation": {
            "description": "Excess tax benefit from stock based compensation",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ExcessTaxBenefitFromStockBasedCompensation",
            "x-order": 350
          },
          "stock_based_compensation": {
            "description": "Stock based compensation",
            "examples": [
              10833000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "StockBasedCompensation",
            "x-order": 360
          },
          "unrealized_gain_loss_on_investment_securities": {
            "description": "Unrealized gain loss on investment securities",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "UnrealizedGainLossOnInvestmentSecurities",
            "x-order": 370
          },
          "provision_and_write_off_of_assets": {
            "description": "Provision and write off of assets",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ProvisionAndWriteOffOfAssets",
            "x-order": 380
          },
          "asset_impairment_charge": {
            "description": "Asset impairment charge",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AssetImpairmentCharge",
            "x-order": 390
          },
          "amortization_of_securities": {
            "description": "Amortization of securities",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AmortizationOfSecurities",
            "x-order": 400
          },
          "deferred_tax": {
            "description": "Deferred tax",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DeferredTax",
            "x-order": 410
          },
          "deferred_income_tax": {
            "description": "Deferred income tax",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DeferredIncomeTax",
            "x-order": 420
          },
          "depreciation_amortization_depletion": {
            "description": "Depreciation amortization depletion",
            "examples": [
              11519000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DepreciationAmortizationDepletion",
            "x-order": 430
          },
          "depletion": {
            "description": "Depletion",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Depletion",
            "x-order": 440
          },
          "depreciation_and_amortization": {
            "description": "Depreciation and amortization",
            "examples": [
              11519000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DepreciationAndAmortization",
            "x-order": 450
          },
          "amortization_cash_flow": {
            "description": "Amortization cash flow",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AmortizationCashFlow",
            "x-order": 460
          },
          "amortization_of_intangibles": {
            "description": "Amortization of intangibles",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AmortizationOfIntangibles",
            "x-order": 470
          },
          "depreciation": {
            "description": "Depreciation",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Depreciation",
            "x-order": 480
          },
          "operating_gains_losses": {
            "description": "Operating gains losses",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OperatingGainsLosses",
            "x-order": 490
          },
          "pension_and_employee_benefit_expense": {
            "description": "Pension and employee benefit expense",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PensionAndEmployeeBenefitExpense",
            "x-order": 500
          },
          "earnings_losses_from_equity_investments": {
            "description": "Earnings losses from equity investments",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EarningsLossesFromEquityInvestments",
            "x-order": 510
          },
          "gain_loss_on_investment_securities": {
            "description": "Gain loss on investment securities",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "GainLossOnInvestmentSecurities",
            "x-order": 520
          },
          "net_foreign_currency_exchange_gain_loss": {
            "description": "Net foreign currency exchange gain loss",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetForeignCurrencyExchangeGainLoss",
            "x-order": 530
          },
          "gain_loss_on_sale_of_ppe": {
            "description": "Gain loss on sale of ppe",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "GainLossOnSaleOfPpe",
            "x-order": 540
          },
          "gain_loss_on_sale_of_business": {
            "description": "Gain loss on sale of business",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "GainLossOnSaleOfBusiness",
            "x-order": 550
          }
        },
        "type": "object",
        "x-go-name": "CashFlowFromOperatingActivities",
        "x-order": 20
      },
      "CashFlowData_cash_flow_from_investing_activities": {
        "description": "Cash flow from investing activities",
        "properties": {
          "investing_cash_flow": {
            "description": "Investing cash flow",
            "examples": [
              3705000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InvestingCashFlow",
            "x-order": 10
          },
          "cash_flow_from_continuing_investing_activities": {
            "description": "Cash flow from continuing investing activities",
            "examples": [
              3705000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CashFlowFromContinuingInvestingActivities",
            "x-order": 20
          },
          "cash_from_discontinued_investing_activities": {
            "description": "Cash from discontinued investing activities",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CashFromDiscontinuedInvestingActivities",
            "x-order": 30
          },
          "net_other_investing_changes": {
            "description": "Net other investing changes",
            "examples": [
              -1337000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetOtherInvestingChanges",
            "x-order": 40
          },
          "interest_received_cfi": {
            "description": "Interest received cfi",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InterestReceivedCfi",
            "x-order": 50
          },
          "dividends_received_cfi": {
            "description": "Dividends received cfi",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DividendsReceivedCfi",
            "x-order": 60
          },
          "net_investment_purchase_and_sale": {
            "description": "Net investment purchase and sale",
            "examples": [
              16001000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetInvestmentPurchaseAndSale",
            "x-order": 70
          },
          "sale_of_investment": {
            "description": "Sale of investment",
            "examples": [
              45514000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SaleOfInvestment",
            "x-order": 80
          },
          "purchase_of_investment": {
            "description": "Purchase of investment",
            "examples": [
              -29513000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PurchaseOfInvestment",
            "x-order": 90
          },
          "net_investment_properties_purchase_and_sale": {
            "description": "Net investment properties purchase and sale",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetInvestmentPropertiesPurchaseAndSale",
            "x-order": 100
          },
          "sale_of_investment_properties": {
            "description": "Sale of investment properties",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SaleOfInvestmentProperties",
            "x-order": 110
          },
          "purchase_of_investment_properties": {
            "description": "Purchase of investment properties",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PurchaseOfInvestmentProperties",
            "x-order": 120
          },
          "net_business_purchase_and_sale": {
            "description": "Net business purchase and sale",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetBusinessPurchaseAndSale",
            "x-order": 130
          },
          "sale_of_business": {
            "description": "Sale of business",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SaleOfBusiness",
            "x-order": 140
          },
          "purchase_of_business": {
            "description": "Purchase of business",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PurchaseOfBusiness",
            "x-order": 150
          },
          "net_intangibles_purchase_and_sale": {
            "description": "Net intangibles purchase and sale",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetIntangiblesPurchaseAndSale",
            "x-order": 160
          },
          "sale_of_intangibles": {
            "description": "Sale of intangibles",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SaleOfIntangibles",
            "x-order": 170
          },
          "purchase_of_intangibles": {
            "description": "Purchase of intangibles",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PurchaseOfIntangibles",
            "x-order": 180
          },
          "net_ppe_purchase_and_sale": {
            "description": "Net ppe purchase and sale",
            "examples": [
              -10959000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetPpePurchaseAndSale",
            "x-order": 190
          },
          "sale_of_ppe": {
            "description": "Sale of ppe",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SaleOfPpe",
            "x-order": 200
          },
          "purchase_of_ppe": {
            "description": "Purchase of ppe",
            "examples": [
              -10959000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PurchaseOfPpe",
            "x-order": 210
          },
          "capital_expenditure_reported": {
            "description": "Capital expenditure reported",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CapitalExpenditureReported",
            "x-order": 220
          },
          "capital_expenditure": {
            "description": "Capital expenditure",
            "examples": [
              -10959000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CapitalExpenditure",
            "x-order": 230
          }
        },
        "type": "object",
        "x-go-name": "CashFlowFromInvestingActivities",
        "x-order": 30
      },
      "CashFlowData_cash_flow_from_financing_activities": {
        "description": "Cash flow from financing activities",
        "properties": {
          "financing_cash_flow": {
            "description": "Financing cash flow",
            "examples": [
              -108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FinancingCashFlow",
            "x-order": 10
          },
          "cash_flow_from_continuing_financing_activities": {
            "description": "Cash flow from continuing financing activities",
            "examples": [
              -108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CashFlowFromContinuingFinancingActivities",
            "x-order": 20
          },
          "cash_from_discontinued_financing_activities": {
            "description": "Cash from discontinued financing activities",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CashFromDiscontinuedFinancingActivities",
            "x-order": 30
          },
          "net_other_financing_charges": {
            "description": "Net other financing charges",
            "examples": [
              -6012000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetOtherFinancingCharges",
            "x-order": 40
          },
          "interest_paid_cff": {
            "description": "Interest paid cff",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InterestPaidCff",
            "x-order": 50
          },
          "proceeds_from_stock_option_exercised": {
            "description": "Proceeds from stock option exercised",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ProceedsFromStockOptionExercised",
            "x-order": 60
          },
          "cash_dividends_paid": {
            "description": "Cash dividends paid",
            "examples": [
              -15025000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CashDividendsPaid",
            "x-order": 70
          },
          "preferred_stock_dividend_paid": {
            "description": "Preferred stock dividend paid",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PreferredStockDividendPaid",
            "x-order": 80
          },
          "common_stock_dividend_paid": {
            "description": "Common stock dividend paid",
            "examples": [
              -15025000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CommonStockDividendPaid",
            "x-order": 90
          },
          "net_preferred_stock_issuance": {
            "description": "Net preferred stock issuance",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetPreferredStockIssuance",
            "x-order": 100
          },
          "preferred_stock_payments": {
            "description": "Preferred stock payments",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PreferredStockPayments",
            "x-order": 110
          },
          "preferred_stock_issuance": {
            "description": "Preferred stock issuance",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PreferredStockIssuance",
            "x-order": 120
          },
          "net_common_stock_issuance": {
            "description": "Net common stock issuance",
            "examples": [
              -77550000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetCommonStockIssuance",
            "x-order": 130
          },
          "common_stock_payments": {
            "description": "Common stock payments",
            "examples": [
              -77550000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CommonStockPayments",
            "x-order": 140
          },
          "common_stock_issuance": {
            "description": "Common stock issuance",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CommonStockIssuance",
            "x-order": 150
          },
          "repurchase_of_capital_stock": {
            "description": "Repurchase of capital stock",
            "examples": [
              -77550000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RepurchaseOfCapitalStock",
            "x-order": 160
          },
          "net_issuance_payments_of_debt": {
            "description": "Net issuance payments of debt",
            "examples": [
              -9901000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetIssuancePaymentsOfDebt",
            "x-order": 170
          },
          "net_short_term_debt_issuance": {
            "description": "Net short term debt issuance",
            "examples": [
              -3978000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetShortTermDebtIssuance",
            "x-order": 180
          },
          "short_term_debt_payments": {
            "description": "Short term debt payments",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ShortTermDebtPayments",
            "x-order": 190
          },
          "short_term_debt_issuance": {
            "description": "Short term debt issuance",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ShortTermDebtIssuance",
            "x-order": 200
          },
          "net_long_term_debt_issuance": {
            "description": "Net long term debt issuance",
            "examples": [
              -5923000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetLongTermDebtIssuance",
            "x-order": 210
          },
          "long_term_debt_payments": {
            "description": "Long term debt payments",
            "examples": [
              -11151000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LongTermDebtPayments",
            "x-order": 220
          },
          "long_term_debt_issuance": {
            "description": "Long term debt issuance",
            "examples": [
              5228000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LongTermDebtIssuance",
            "x-order": 230
          },
          "issuance_of_debt": {
            "description": "Issuance of debt",
            "examples": [
              5228000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "IssuanceOfDebt",
            "x-order": 240
          },
          "repayment_of_debt": {
            "description": "Repayment of debt",
            "examples": [
              -11151000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RepaymentOfDebt",
            "x-order": 250
          },
          "issuance_of_capital_stock": {
            "description": "Issuance of capital stock",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "IssuanceOfCapitalStock",
            "x-order": 260
          }
        },
        "type": "object",
        "x-go-name": "CashFlowFromFinancingActivities",
        "x-order": 40
      },
      "CashFlowData_supplemental_data": {
        "description": "Supplemental data",
        "properties": {
          "interest_paid_supplemental_data": {
            "description": "Interest paid supplemental data",
            "examples": [
              3803000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InterestPaidSupplementalData",
            "x-order": 10
          },
          "income_tax_paid_supplemental_data": {
            "description": "Income tax paid supplemental data",
            "examples": [
              18679000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "IncomeTaxPaidSupplementalData",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "SupplementalData",
        "x-order": 50
      },
      "CashFlowData_foreign_and_domestic_sales": {
        "description": "Foreign and domestic sales",
        "properties": {
          "foreign_sales": {
            "description": "Foreign sales",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ForeignSales",
            "x-order": 10
          },
          "domestic_sales": {
            "description": "Domestic sales",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DomesticSales",
            "x-order": 20
          },
          "adjusted_geography_segment_data": {
            "description": "Adjusted geography segment data",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AdjustedGeographySegmentData",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "ForeignAndDomesticSales",
        "x-order": 60
      },
      "CashFlowData_cash_position": {
        "description": "Cash position",
        "properties": {
          "beginning_cash_position": {
            "description": "Beginning cash position",
            "examples": [
              24977000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "BeginningCashPosition",
            "x-order": 10
          },
          "end_cash_position": {
            "description": "End cash position",
            "examples": [
              30737000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EndCashPosition",
            "x-order": 20
          },
          "changes_in_cash": {
            "description": "Changes in cash",
            "examples": [
              5760000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ChangesInCash",
            "x-order": 30
          },
          "other_cash_adjustment_outside_change_in_cash": {
            "description": "Other cash adjustment outside change in cash",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherCashAdjustmentOutsideChangeInCash",
            "x-order": 40
          },
          "other_cash_adjustment_inside_change_in_cash": {
            "description": "Other cash adjustment inside change in cash",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherCashAdjustmentInsideChangeInCash",
            "x-order": 50
          },
          "effect_of_exchange_rate_changes": {
            "description": "Effect of exchange rate changes",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EffectOfExchangeRateChanges",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "CashPosition",
        "x-order": 70
      },
      "CashFlowData_direct_method_cash_flow": {
        "description": "Direct method cash flow",
        "properties": {
          "classes_of_cash_receipts_from_operating_activities": {
            "description": "Classes of cash receipts from operating activities",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ClassesOfCashReceiptsFromOperatingActivities",
            "x-order": 10
          },
          "other_cash_receipts_from_operating_activities": {
            "description": "Other cash receipts from operating activities",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherCashReceiptsFromOperatingActivities",
            "x-order": 20
          },
          "receipts_from_government_grants": {
            "description": "Receipts from government grants",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ReceiptsFromGovernmentGrants",
            "x-order": 30
          },
          "receipts_from_customers": {
            "description": "Receipts from customers",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ReceiptsFromCustomers",
            "x-order": 40
          },
          "classes_of_cash_payments": {
            "description": "Classes of cash payments",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ClassesOfCashPayments",
            "x-order": 50
          },
          "other_cash_payments_from_operating_activities": {
            "description": "Other cash payments from operating activities",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherCashPaymentsFromOperatingActivities",
            "x-order": 60
          },
          "payments_on_behalf_of_employees": {
            "description": "Payments on behalf of employees",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PaymentsOnBehalfOfEmployees",
            "x-order": 70
          },
          "payments_to_suppliers_for_goods_and_services": {
            "description": "Payments to suppliers for goods and services",
            "examples": [
              108488000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PaymentsToSuppliersForGoodsAndServices",
            "x-order": 80
          }
        },
        "type": "object",
        "x-go-name": "DirectMethodCashFlow",
        "x-order": 80
      },
      "CashFlowStruct_operating_activities": {
        "description": "Operating activities section",
        "properties": {
          "net_income": {
            "description": "Returns net income (NI). Calculated as sales minus cost of goods sold",
            "examples": [
              34630000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetIncome",
            "x-order": 10
          },
          "depreciation": {
            "description": "Represents depreciation and amortization measure",
            "examples": [
              2697000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Depreciation",
            "x-order": 20
          },
          "deferred_taxes": {
            "description": "Stands for taxes that are owed but are not due to be paid until a future date",
            "examples": [
              682000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DeferredTaxes",
            "x-order": 30
          },
          "stock_based_compensation": {
            "description": "Refers to share-based compensation as the way of paying employees, executives, and directors of a company with equity in the business",
            "examples": [
              2265000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "StockBasedCompensation",
            "x-order": 40
          },
          "other_non_cash_items": {
            "description": "Represents other non-cash items",
            "examples": [
              167000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherNonCashItems",
            "x-order": 50
          },
          "accounts_receivable": {
            "description": "Represents the balance of money due to a firm for goods or services delivered or used but not yet paid for by customers",
            "examples": [
              -13746000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccountsReceivable",
            "x-order": 60
          },
          "accounts_payable": {
            "description": "Refers to an account within the general ledger that represents an obligation to pay off a short-term debt to creditors or suppliers",
            "examples": [
              19813000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AccountsPayable",
            "x-order": 70
          },
          "other_assets_liabilities": {
            "description": "Represents cumulative changes in inventory, other current assets, other current liabilities, and other working capital",
            "examples": [
              458000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherAssetsLiabilities",
            "x-order": 80
          },
          "operating_cash_flow": {
            "description": "Returns operating cash flow (OCF) measure representing a total amount of cash generated by company's normal business operations",
            "examples": [
              46966000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OperatingCashFlow",
            "x-order": 90
          }
        },
        "type": "object",
        "x-go-name": "OperatingActivities",
        "x-order": 30
      },
      "CashFlowStruct_investing_activities": {
        "description": "Investing activities section",
        "properties": {
          "capital_expenditures": {
            "description": "Capital expenditures (CapEx) are funds used by a company to acquire, upgrade, and maintain physical assets (PPE)",
            "examples": [
              -2803000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CapitalExpenditures",
            "x-order": 10
          },
          "net_intangibles": {
            "description": "Represents purchase of a not physical asset",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetIntangibles",
            "x-order": 20
          },
          "net_acquisitions": {
            "description": "Refers to net amount of business purchase and sale",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetAcquisitions",
            "x-order": 30
          },
          "purchase_of_investments": {
            "description": "Represents how much money has been used in making investments, including purchases of physical assets, investments in securities",
            "examples": [
              -34913000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PurchaseOfInvestments",
            "x-order": 40
          },
          "sale_of_investments": {
            "description": "Represents how much money has been generated from the sale of securities or assets",
            "examples": [
              21984000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SaleOfInvestments",
            "x-order": 50
          },
          "other_investing_activity": {
            "description": "Represents other investing activity",
            "examples": [
              -374000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherInvestingActivity",
            "x-order": 60
          },
          "investing_cash_flow": {
            "description": "Returns total amount of cash flow used in investments",
            "examples": [
              -16106000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InvestingCashFlow",
            "x-order": 70
          }
        },
        "type": "object",
        "x-go-name": "InvestingActivities",
        "x-order": 40
      },
      "CashFlowStruct_financing_activities": {
        "description": "Financing activities section",
        "properties": {
          "long_term_debt_issuance": {
            "description": "Refers to the issuance of any financial obligations that extend beyond a 12 months period",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LongTermDebtIssuance",
            "x-order": 10
          },
          "long_term_debt_payments": {
            "description": "Refers to the payments of any financial obligations that extend beyond a 12 months period",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LongTermDebtPayments",
            "x-order": 20
          },
          "short_term_debt_issuance": {
            "description": "Refers to the issuance of any financial obligations that are expected to be paid off within a year",
            "examples": [
              -1000000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ShortTermDebtIssuance",
            "x-order": 30
          },
          "common_stock_issuance": {
            "description": "Represents a transaction whereby a company issues its own shares to the marketplace",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CommonStockIssuance",
            "x-order": 40
          },
          "common_stock_repurchase": {
            "description": "Represents a transaction whereby a company buys back its own shares from the marketplace",
            "examples": [
              -20478000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CommonStockRepurchase",
            "x-order": 50
          },
          "common_dividends": {
            "description": "Returns value of payment doled out by a company to its stockholders in the form of periodic distributions of cash",
            "examples": [
              -3732000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CommonDividends",
            "x-order": 60
          },
          "other_financing_charges": {
            "description": "Represents other financing charges",
            "examples": [
              -2949000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherFinancingCharges",
            "x-order": 70
          },
          "financing_cash_flow": {
            "description": "Returns cash flow from financing activities (CFF), which shows the net flows of cash that are used to fund the company",
            "examples": [
              -28159000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FinancingCashFlow",
            "x-order": 80
          }
        },
        "type": "object",
        "x-go-name": "FinancingActivities",
        "x-order": 50
      },
      "EquityInfo_capital_stock": {
        "description": "Capital stock information",
        "properties": {
          "common_stock": {
            "description": "Common stock",
            "examples": [
              73812000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CommonStock",
            "x-order": 10
          },
          "preferred_stock": {
            "description": "Preferred stock",
            "examples": [
              73812000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PreferredStock",
            "x-order": 20
          },
          "total_partnership_capital": {
            "description": "Total partnership capital",
            "examples": [
              73812000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalPartnershipCapital",
            "x-order": 30
          },
          "general_partnership_capital": {
            "description": "General partnership capital",
            "examples": [
              73812000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "GeneralPartnershipCapital",
            "x-order": 40
          },
          "limited_partnership_capital": {
            "description": "Limited partnership capital",
            "examples": [
              73812000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "LimitedPartnershipCapital",
            "x-order": 50
          },
          "capital_stock": {
            "description": "Capital stock",
            "examples": [
              73812000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CapitalStock",
            "x-order": 60
          },
          "other_capital_stock": {
            "description": "Other capital stock",
            "examples": [
              73812000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherCapitalStock",
            "x-order": 70
          },
          "additional_paid_in_capital": {
            "description": "Additional paid in capital",
            "examples": [
              73812000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AdditionalPaidInCapital",
            "x-order": 80
          },
          "retained_earnings": {
            "description": "Retained earnings",
            "examples": [
              -214000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RetainedEarnings",
            "x-order": 90
          },
          "treasury_stock": {
            "description": "Treasury stock",
            "examples": [
              73812000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TreasuryStock",
            "x-order": 100
          },
          "treasury_shares_number": {
            "description": "Treasury shares number",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TreasurySharesNumber",
            "x-order": 110
          },
          "ordinary_shares_number": {
            "description": "Ordinary shares number",
            "examples": [
              15550061000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OrdinarySharesNumber",
            "x-order": 120
          },
          "preferred_shares_number": {
            "description": "Preferred shares number",
            "examples": [
              73812000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PreferredSharesNumber",
            "x-order": 130
          },
          "share_issued": {
            "description": "Share issued",
            "examples": [
              15550061000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ShareIssued",
            "x-order": 140
          }
        },
        "type": "object",
        "x-go-name": "CapitalStock",
        "x-order": 120
      },
      "EquityInfo_equity_adjustments": {
        "description": "Equity adjustments information",
        "properties": {
          "gains_losses_not_affecting_retained_earnings": {
            "description": "Gains losses not affecting retained earnings",
            "examples": [
              -11452000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "GainsLossesNotAffectingRetainedEarnings",
            "x-order": 10
          },
          "other_equity_adjustments": {
            "description": "Other equity adjustments",
            "examples": [
              -11452000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherEquityAdjustments",
            "x-order": 20
          },
          "fixed_assets_revaluation_reserve": {
            "description": "Fixed assets revaluation reserve",
            "examples": [
              11452000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "FixedAssetsRevaluationReserve",
            "x-order": 30
          },
          "foreign_currency_translation_adjustments": {
            "description": "Foreign currency translation adjustments",
            "examples": [
              11452000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ForeignCurrencyTranslationAdjustments",
            "x-order": 40
          },
          "minimum_pension_liabilities": {
            "description": "Minimum pension liabilities",
            "examples": [
              11452000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "MinimumPensionLiabilities",
            "x-order": 50
          },
          "unrealized_gain_loss": {
            "description": "Unrealized gain loss",
            "examples": [
              11452000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "UnrealizedGainLoss",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "EquityAdjustments",
        "x-order": 130
      },
      "EtfResponseItem_access": {
        "description": "Info on which plan symbol is available (displayed then `show_plan` is `true`)",
        "properties": {
          "global": {
            "description": "Level of access to the symbol",
            "examples": [
              "Level B"
            ],
            "type": "string",
            "x-go-name": "Global"
          },
          "plan": {
            "description": "The plan name for the symbol",
            "examples": [
              "Pro"
            ],
            "type": "string",
            "x-go-name": "Plan"
          }
        },
        "type": "object",
        "x-go-name": "Access",
        "x-order": 120
      },
      "FundResponseItem_access": {
        "description": "Info on which plan symbol is available (displayed then `show_plan` is `true`)",
        "properties": {
          "global": {
            "description": "Level of access to the symbol",
            "examples": [
              "Level A"
            ],
            "type": "string",
            "x-go-name": "Global"
          },
          "plan": {
            "description": "The plan name for the symbol",
            "examples": [
              "Grow"
            ],
            "type": "string",
            "x-go-name": "Plan"
          }
        },
        "type": "object",
        "x-go-name": "Access",
        "x-order": 120
      },
      "IncomeStatementBlock_operating_expense": {
        "description": "Operating expense details",
        "properties": {
          "research_and_development": {
            "description": "Refers to research & development (R&D) expenses",
            "examples": [
              6306000000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "ResearchAndDevelopment",
            "x-order": 10
          },
          "selling_general_and_administrative": {
            "description": "Refers to selling, general and administrative (SG&A) expenses",
            "examples": [
              6449000000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "SellingGeneralAndAdministrative",
            "x-order": 20
          },
          "other_operating_expenses": {
            "description": "Refers to other operating expenses",
            "examples": [
              0
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "OtherOperatingExpenses",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "OperatingExpense",
        "x-order": 70
      },
      "IncomeStatementBlock_non_operating_interest": {
        "description": "Non-operating interest details",
        "properties": {
          "income": {
            "description": "Refers to non-operating interest income",
            "examples": [
              650000000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Income",
            "x-order": 10
          },
          "expense": {
            "description": "Refers to non-operating interest expense",
            "examples": [
              694000000
            ],
            "format": "int64",
            "type": "integer",
            "x-go-name": "Expense",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "NonOperatingInterest",
        "x-order": 90
      },
      "IncomeStatementItem_revenue": {
        "description": "Revenue information",
        "properties": {
          "total_revenue": {
            "description": "Total revenue",
            "examples": [
              383285000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalRevenue",
            "x-order": 10
          },
          "operating_revenue": {
            "description": "Operating revenue",
            "examples": [
              383285000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OperatingRevenue",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Revenue",
        "x-order": 20
      },
      "IncomeStatementItem_gross_profit_cost_of_revenue": {
        "description": "Cost of revenue information",
        "properties": {
          "cost_of_revenue_value": {
            "description": "Cost of revenue value",
            "examples": [
              214137000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "CostOfRevenueValue",
            "x-order": 10
          },
          "excise_taxes": {
            "description": "Excise taxes",
            "examples": [
              214137000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ExciseTaxes",
            "x-order": 20
          },
          "reconciled_cost_of_revenue": {
            "description": "Reconciled cost of revenue",
            "examples": [
              214137000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ReconciledCostOfRevenue",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "CostOfRevenue",
        "x-order": 20
      },
      "IncomeStatementItem_gross_profit": {
        "description": "Gross profit information",
        "properties": {
          "gross_profit_value": {
            "description": "Gross profit value",
            "examples": [
              169148000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "GrossProfitValue",
            "x-order": 10
          },
          "cost_of_revenue": {
            "$ref": "#/components/schemas/IncomeStatementItem_gross_profit_cost_of_revenue"
          }
        },
        "type": "object",
        "x-go-name": "GrossProfit",
        "x-order": 30
      },
      "IncomeStatementItem_operating_income": {
        "description": "Operating income information",
        "properties": {
          "operating_income_value": {
            "description": "Operating income value",
            "examples": [
              114301000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OperatingIncomeValue",
            "x-order": 10
          },
          "total_operating_income_as_reported": {
            "description": "Total operating income as reported",
            "examples": [
              114301000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalOperatingIncomeAsReported",
            "x-order": 20
          },
          "operating_expense": {
            "description": "Operating expense",
            "examples": [
              54847000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OperatingExpense",
            "x-order": 30
          },
          "other_operating_expenses": {
            "description": "Other operating expenses",
            "examples": [
              114301000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherOperatingExpenses",
            "x-order": 40
          },
          "total_expenses": {
            "description": "Total expenses",
            "examples": [
              268984000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalExpenses",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-name": "OperatingIncome",
        "x-order": 40
      },
      "IncomeStatementItem_net_income": {
        "description": "Net income information",
        "properties": {
          "net_income_value": {
            "description": "Net income value",
            "examples": [
              96995000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetIncomeValue",
            "x-order": 10
          },
          "net_income_common_stockholders": {
            "description": "Net income common stockholders",
            "examples": [
              96995000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetIncomeCommonStockholders",
            "x-order": 20
          },
          "net_income_including_noncontrolling_interests": {
            "description": "Net income including noncontrolling interests",
            "examples": [
              96995000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetIncomeIncludingNoncontrollingInterests",
            "x-order": 30
          },
          "net_income_from_tax_loss_carryforward": {
            "description": "Net income from tax loss carryforward",
            "examples": [
              96995000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetIncomeFromTaxLossCarryforward",
            "x-order": 40
          },
          "net_income_extraordinary": {
            "description": "Net income extraordinary",
            "examples": [
              96995000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetIncomeExtraordinary",
            "x-order": 50
          },
          "net_income_discontinuous_operations": {
            "description": "Net income discontinuous operations",
            "examples": [
              96995000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetIncomeDiscontinuousOperations",
            "x-order": 60
          },
          "net_income_continuous_operations": {
            "description": "Net income continuous operations",
            "examples": [
              96995000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetIncomeContinuousOperations",
            "x-order": 70
          },
          "net_income_from_continuing_operation_net_minority_interest": {
            "description": "Net income from continuing operation net minority interest",
            "examples": [
              96995000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetIncomeFromContinuingOperationNetMinorityInterest",
            "x-order": 80
          },
          "net_income_from_continuing_and_discontinued_operation": {
            "description": "Net income from continuing and discontinued operation",
            "examples": [
              96995000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetIncomeFromContinuingAndDiscontinuedOperation",
            "x-order": 90
          },
          "normalized_income": {
            "description": "Normalized income",
            "examples": [
              96995000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NormalizedIncome",
            "x-order": 100
          },
          "minority_interests": {
            "description": "Minority interests",
            "examples": [
              96995000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "MinorityInterests",
            "x-order": 110
          }
        },
        "type": "object",
        "x-go-name": "NetIncome",
        "x-order": 50
      },
      "IncomeStatementItem_earnings_per_share": {
        "description": "Earnings per share information",
        "properties": {
          "diluted_eps": {
            "description": "Diluted EPS",
            "examples": [
              6.13
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DilutedEPS",
            "x-order": 10
          },
          "basic_eps": {
            "description": "Basic EPS",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "BasicEPS",
            "x-order": 20
          },
          "continuing_and_discontinued_diluted_eps": {
            "description": "Continuing and discontinued diluted EPS",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ContinuingAndDiscontinuedDilutedEPS",
            "x-order": 30
          },
          "continuing_and_discontinued_basic_eps": {
            "description": "Continuing and discontinued basic EPS",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ContinuingAndDiscontinuedBasicEPS",
            "x-order": 40
          },
          "normalized_diluted_eps": {
            "description": "Normalized diluted EPS",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NormalizedDilutedEPS",
            "x-order": 50
          },
          "normalized_basic_eps": {
            "description": "Normalized basic EPS",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NormalizedBasicEPS",
            "x-order": 60
          },
          "reported_normalized_diluted_eps": {
            "description": "Reported normalized diluted EPS",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ReportedNormalizedDilutedEPS",
            "x-order": 70
          },
          "reported_normalized_basic_eps": {
            "description": "Reported normalized basic EPS",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ReportedNormalizedBasicEPS",
            "x-order": 80
          },
          "diluted_eps_other_gains_losses": {
            "description": "Diluted EPS other gains losses",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DilutedEPSOtherGainsLosses",
            "x-order": 90
          },
          "tax_loss_carryforward_diluted_eps": {
            "description": "Tax loss carryforward diluted EPS",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TaxLossCarryforwardDilutedEPS",
            "x-order": 100
          },
          "diluted_accounting_change": {
            "description": "Diluted accounting change",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DilutedAccountingChange",
            "x-order": 110
          },
          "diluted_extraordinary": {
            "description": "Diluted extraordinary",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DilutedExtraordinary",
            "x-order": 120
          },
          "diluted_discontinuous_operations": {
            "description": "Diluted discontinuous operations",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DilutedDiscontinuousOperations",
            "x-order": 130
          },
          "diluted_continuous_operations": {
            "description": "Diluted continuous operations",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DilutedContinuousOperations",
            "x-order": 140
          },
          "basic_eps_other_gains_losses": {
            "description": "Basic EPS other gains losses",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "BasicEPSOtherGainsLosses",
            "x-order": 150
          },
          "tax_loss_carryforward_basic_eps": {
            "description": "Tax loss carryforward basic EPS",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TaxLossCarryforwardBasicEPS",
            "x-order": 160
          },
          "basic_accounting_change": {
            "description": "Basic accounting change",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "BasicAccountingChange",
            "x-order": 170
          },
          "basic_extraordinary": {
            "description": "Basic extraordinary",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "BasicExtraordinary",
            "x-order": 180
          },
          "basic_discontinuous_operations": {
            "description": "Basic discontinuous operations",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "BasicDiscontinuousOperations",
            "x-order": 190
          },
          "basic_continuous_operations": {
            "description": "Basic continuous operations",
            "examples": [
              6.16
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "BasicContinuousOperations",
            "x-order": 200
          },
          "diluted_ni_avail_to_common_stockholders": {
            "description": "Diluted NI available to common stockholders",
            "examples": [
              96995000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DilutedNIAvailToCommonStockholders",
            "x-order": 210
          },
          "average_dilution_earnings": {
            "description": "Average dilution earnings",
            "examples": [
              96995000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AverageDilutionEarnings",
            "x-order": 220
          }
        },
        "type": "object",
        "x-go-name": "EarningsPerShare",
        "x-order": 60
      },
      "IncomeStatementItem_expenses": {
        "description": "Expenses information",
        "properties": {
          "total_expenses": {
            "description": "Total expenses",
            "examples": [
              268984000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalExpenses",
            "x-order": 10
          },
          "selling_general_and_administration_expense": {
            "description": "Selling general and administration expense",
            "examples": [
              24932000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SellingGeneralAndAdministrationExpense",
            "x-order": 20
          },
          "selling_and_marketing_expense": {
            "description": "Selling and marketing expense",
            "examples": [
              24932000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SellingAndMarketingExpense",
            "x-order": 30
          },
          "general_and_administrative_expense": {
            "description": "General and administrative expense",
            "examples": [
              24932000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "GeneralAndAdministrativeExpense",
            "x-order": 40
          },
          "other_general_and_administrative_expense": {
            "description": "Other general and administrative expense",
            "examples": [
              24932000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherGeneralAndAdministrativeExpense",
            "x-order": 50
          },
          "depreciation_amortization_depletion_income_statement": {
            "description": "Depreciation amortization depletion income statement",
            "examples": [
              29915000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DepreciationAmortizationDepletionIncomeStatement",
            "x-order": 60
          },
          "research_and_development_expense": {
            "description": "Research and development expense",
            "examples": [
              29915000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ResearchAndDevelopmentExpense",
            "x-order": 70
          },
          "insurance_and_claims_expense": {
            "description": "Insurance and claims expense",
            "examples": [
              29915000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InsuranceAndClaimsExpense",
            "x-order": 80
          },
          "rent_and_landing_fees": {
            "description": "Rent and landing fees",
            "examples": [
              29915000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RentAndLandingFees",
            "x-order": 90
          },
          "salaries_and_wages_expense": {
            "description": "Salaries and wages expense",
            "examples": [
              29915000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SalariesAndWagesExpense",
            "x-order": 100
          },
          "rent_expense_supplemental": {
            "description": "Rent expense supplemental",
            "examples": [
              29915000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RentExpenseSupplemental",
            "x-order": 110
          },
          "provision_for_doubtful_accounts": {
            "description": "Provision for doubtful accounts",
            "examples": [
              29915000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ProvisionForDoubtfulAccounts",
            "x-order": 120
          }
        },
        "type": "object",
        "x-go-name": "Expenses",
        "x-order": 70
      },
      "IncomeStatementItem_interest_income_and_expense": {
        "description": "Interest income and expense information",
        "properties": {
          "interest_income": {
            "description": "Interest income",
            "examples": [
              3750000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InterestIncome",
            "x-order": 10
          },
          "interest_expense": {
            "description": "Interest expense",
            "examples": [
              3933000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InterestExpense",
            "x-order": 20
          },
          "net_interest_income": {
            "description": "Net interest income",
            "examples": [
              -183000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetInterestIncome",
            "x-order": 30
          },
          "net_non_operating_interest_income_expense": {
            "description": "Net non operating interest income expense",
            "examples": [
              -183000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NetNonOperatingInterestIncomeExpense",
            "x-order": 40
          },
          "interest_expense_non_operating": {
            "description": "Interest expense non operating",
            "examples": [
              3933000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InterestExpenseNonOperating",
            "x-order": 50
          },
          "interest_income_non_operating": {
            "description": "Interest income non operating",
            "examples": [
              3750000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "InterestIncomeNonOperating",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "InterestIncomeAndExpense",
        "x-order": 80
      },
      "IncomeStatementItem_other_income_and_expenses": {
        "description": "Other income and expenses information",
        "properties": {
          "other_income_expense": {
            "description": "Other income expense",
            "examples": [
              -382000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherIncomeExpense",
            "x-order": 10
          },
          "other_non_operating_income_expenses": {
            "description": "Other non operating income expenses",
            "examples": [
              -382000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherNonOperatingIncomeExpenses",
            "x-order": 20
          },
          "special_income_charges": {
            "description": "Special income charges",
            "examples": [
              382000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SpecialIncomeCharges",
            "x-order": 30
          },
          "gain_on_sale_of_ppe": {
            "description": "Gain on sale of PPE",
            "examples": [
              382000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "GainOnSaleOfPPE",
            "x-order": 40
          },
          "gain_on_sale_of_business": {
            "description": "Gain on sale of business",
            "examples": [
              382000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "GainOnSaleOfBusiness",
            "x-order": 50
          },
          "gain_on_sale_of_security": {
            "description": "Gain on sale of security",
            "examples": [
              382000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "GainOnSaleOfSecurity",
            "x-order": 60
          },
          "other_special_charges": {
            "description": "Other special charges",
            "examples": [
              382000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherSpecialCharges",
            "x-order": 70
          },
          "write_off": {
            "description": "Write off",
            "examples": [
              382000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "WriteOff",
            "x-order": 80
          },
          "impairment_of_capital_assets": {
            "description": "Impairment of capital assets",
            "examples": [
              382000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ImpairmentOfCapitalAssets",
            "x-order": 90
          },
          "restructuring_and_merger_acquisition": {
            "description": "Restructuring and merger acquisition",
            "examples": [
              382000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "RestructuringAndMergerAcquisition",
            "x-order": 100
          },
          "securities_amortization": {
            "description": "Securities amortization",
            "examples": [
              382000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SecuritiesAmortization",
            "x-order": 110
          },
          "earnings_from_equity_interest": {
            "description": "Earnings from equity interest",
            "examples": [
              382000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EarningsFromEquityInterest",
            "x-order": 120
          },
          "earnings_from_equity_interest_net_of_tax": {
            "description": "Earnings from equity interest net of tax",
            "examples": [
              382000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EarningsFromEquityInterestNetOfTax",
            "x-order": 130
          },
          "total_other_finance_cost": {
            "description": "Total other finance cost",
            "examples": [
              382000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalOtherFinanceCost",
            "x-order": 140
          }
        },
        "type": "object",
        "x-go-name": "OtherIncomeAndExpenses",
        "x-order": 90
      },
      "IncomeStatementItem_taxes": {
        "description": "Taxes information",
        "properties": {
          "tax_provision": {
            "description": "Tax provision",
            "examples": [
              16741000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TaxProvision",
            "x-order": 10
          },
          "tax_effect_of_unusual_items": {
            "description": "Tax effect of unusual items",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TaxEffectOfUnusualItems",
            "x-order": 20
          },
          "tax_rate_for_calculations": {
            "description": "Tax rate for calculations",
            "examples": [
              0.147
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TaxRateForCalculations",
            "x-order": 30
          },
          "other_taxes": {
            "description": "Other taxes",
            "examples": [
              0
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherTaxes",
            "x-order": 40
          }
        },
        "type": "object",
        "x-go-name": "Taxes",
        "x-order": 100
      },
      "IncomeStatementItem_depreciation_and_amortization": {
        "description": "Depreciation and amortization information",
        "properties": {
          "depreciation_amortization_depletion": {
            "description": "Depreciation amortization depletion",
            "examples": [
              129188000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DepreciationAmortizationDepletion",
            "x-order": 10
          },
          "amortization_of_intangibles": {
            "description": "Amortization of intangibles",
            "examples": [
              129188000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "AmortizationOfIntangibles",
            "x-order": 20
          },
          "depreciation": {
            "description": "Depreciation",
            "examples": [
              129188000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Depreciation",
            "x-order": 30
          },
          "amortization": {
            "description": "Amortization",
            "examples": [
              129188000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Amortization",
            "x-order": 40
          },
          "depletion": {
            "description": "Depletion",
            "examples": [
              129188000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "Depletion",
            "x-order": 50
          },
          "depreciation_and_amortization_in_income_statement": {
            "description": "Depreciation and amortization in income statement",
            "examples": [
              129188000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DepreciationAndAmortizationInIncomeStatement",
            "x-order": 60
          }
        },
        "type": "object",
        "x-go-name": "DepreciationAndAmortization",
        "x-order": 110
      },
      "IncomeStatementItem_ebitda": {
        "description": "EBITDA information",
        "properties": {
          "ebitda_value": {
            "description": "EBITDA value",
            "examples": [
              129188000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EBITDAValue",
            "x-order": 10
          },
          "normalized_ebitda_value": {
            "description": "Normalized EBITDA value",
            "examples": [
              129188000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "NormalizedEBITDAValue",
            "x-order": 20
          },
          "ebit_value": {
            "description": "EBIT value",
            "examples": [
              117669000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "EBITValue",
            "x-order": 30
          }
        },
        "type": "object",
        "x-go-name": "EBITDA",
        "x-order": 120
      },
      "IncomeStatementItem_dividends_and_shares": {
        "description": "Dividends and shares information",
        "properties": {
          "dividend_per_share": {
            "description": "Dividend per share",
            "examples": [
              15812547000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DividendPerShare",
            "x-order": 10
          },
          "diluted_average_shares": {
            "description": "Diluted average shares",
            "examples": [
              15812547000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "DilutedAverageShares",
            "x-order": 20
          },
          "basic_average_shares": {
            "description": "Basic average shares",
            "examples": [
              15744231000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "BasicAverageShares",
            "x-order": 30
          },
          "preferred_stock_dividends": {
            "description": "Preferred stock dividends",
            "examples": [
              15744231000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PreferredStockDividends",
            "x-order": 40
          },
          "other_under_preferred_stock_dividend": {
            "description": "Other under preferred stock dividend",
            "examples": [
              15744231000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "OtherUnderPreferredStockDividend",
            "x-order": 50
          }
        },
        "type": "object",
        "x-go-name": "DividendsAndShares",
        "x-order": 130
      },
      "IncomeStatementItem_unusual_items": {
        "description": "Unusual items information",
        "properties": {
          "total_unusual_items": {
            "description": "Total unusual items",
            "examples": [
              11519000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalUnusualItems",
            "x-order": 10
          },
          "total_unusual_items_excluding_goodwill": {
            "description": "Total unusual items excluding goodwill",
            "examples": [
              11519000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "TotalUnusualItemsExcludingGoodwill",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "UnusualItems",
        "x-order": 140
      },
      "IncomeStatementItem_depreciation": {
        "description": "Depreciation information",
        "properties": {
          "reconciled_depreciation": {
            "description": "Reconciled depreciation",
            "examples": [
              11519000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "ReconciledDepreciation",
            "x-order": 10
          }
        },
        "type": "object",
        "x-go-name": "Depreciation",
        "x-order": 150
      },
      "IncomeStatementItem_pretax_income": {
        "description": "Pretax income information",
        "properties": {
          "pretax_income_value": {
            "description": "Pretax income value",
            "examples": [
              113736000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "PretaxIncomeValue",
            "x-order": 10
          }
        },
        "type": "object",
        "x-go-name": "PretaxIncome",
        "x-order": 160
      },
      "IncomeStatementItem_special_income_charges": {
        "description": "Special income charges information",
        "properties": {
          "special_income_charges_value": {
            "description": "Special income charges value",
            "examples": [
              113736000000
            ],
            "format": "double",
            "type": "number",
            "x-go-name": "SpecialIncomeChargesValue",
            "x-order": 10
          }
        },
        "type": "object",
        "x-go-name": "SpecialIncomeCharges",
        "x-order": 170
      },
      "inline_object": {
        "properties": {
          "data": {
            "description": "List of assets with their details",
            "items": {
              "$ref": "#/components/schemas/GetAssetsResponseItem"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 10
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "inline_object_1": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Index"
            },
            "type": "array",
            "x-go-name": "Data"
          }
        },
        "type": "object"
      },
      "inline_object_2_expenses": {
        "properties": {
          "expense_ratio_gross": {
            "format": "double",
            "type": "number",
            "x-go-name": "ExpenseRatioGross"
          },
          "expense_ratio_net": {
            "format": "double",
            "type": "number",
            "x-go-name": "ExpenseRatioNet"
          }
        },
        "type": "object",
        "x-go-name": "Expenses"
      },
      "inline_object_2_minimums": {
        "properties": {
          "additional_investment": {
            "format": "int64",
            "type": "integer",
            "x-go-name": "AdditionalInvestment"
          },
          "additional_ira_investment": {
            "type": "object",
            "x-go-name": "AdditionalIraInvestment"
          },
          "initial_investment": {
            "format": "int64",
            "type": "integer",
            "x-go-name": "InitialInvestment"
          },
          "initial_ira_investment": {
            "type": "object",
            "x-go-name": "InitialIraInvestment"
          }
        },
        "type": "object",
        "x-go-name": "Minimums"
      },
      "inline_object_2_pricing": {
        "properties": {
          "12_month_high": {
            "format": "double",
            "type": "number",
            "x-go-name": "TwelveMonthHigh"
          },
          "12_month_low": {
            "format": "double",
            "type": "number",
            "x-go-name": "TwelveMonthLow"
          },
          "last_month": {
            "format": "double",
            "type": "number",
            "x-go-name": "LastMonth"
          },
          "nav": {
            "format": "double",
            "type": "number",
            "x-go-name": "Nav"
          }
        },
        "type": "object",
        "x-go-name": "Pricing"
      },
      "inline_object_2": {
        "properties": {
          "brokerages": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "Brokerages"
          },
          "expenses": {
            "$ref": "#/components/schemas/inline_object_2_expenses"
          },
          "minimums": {
            "$ref": "#/components/schemas/inline_object_2_minimums"
          },
          "pricing": {
            "$ref": "#/components/schemas/inline_object_2_pricing"
          }
        },
        "type": "object"
      },
      "inline_object_3": {
        "properties": {
          "performance_rating": {
            "format": "int64",
            "type": "integer",
            "x-go-name": "PerformanceRating"
          },
          "return_rating": {
            "format": "int64",
            "type": "integer",
            "x-go-name": "ReturnRating"
          },
          "risk_rating": {
            "format": "int64",
            "type": "integer",
            "x-go-name": "RiskRating"
          }
        },
        "type": "object"
      },
      "inline_object_4": {
        "properties": {
          "corporate_aum": {
            "format": "double",
            "type": "number",
            "x-go-name": "CorporateAum"
          },
          "corporate_esg_pillars": {
            "additionalProperties": {
              "format": "double",
              "type": "number"
            },
            "type": "object",
            "x-go-name": "CorporateEsgPillars"
          },
          "score": {
            "format": "int64",
            "type": "integer",
            "x-go-name": "Score"
          },
          "sustainable_investment": {
            "type": "boolean",
            "x-go-name": "SustainableInvestment"
          }
        },
        "type": "object"
      },
      "inline_object_5": {
        "properties": {
          "calls": {
            "items": {
              "$ref": "#/components/schemas/OptionSide"
            },
            "type": "array",
            "x-go-name": "Calls"
          },
          "puts": {
            "items": {
              "$ref": "#/components/schemas/OptionSide"
            },
            "type": "array",
            "x-go-name": "Puts"
          }
        },
        "type": "object"
      },
      "inline_object_6": {
        "properties": {
          "dates": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "x-go-name": "Dates"
          }
        },
        "type": "object"
      },
      "inline_object_7": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/StockExchange"
            },
            "type": "array",
            "x-go-name": "Data"
          }
        },
        "type": "object"
      },
      "inline_object_8_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "ACOS - Arccosine"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "open"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "inline_object_8_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/inline_object_8_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "inline_object_8_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2025-05-30 02:08:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "acos": {
            "description": "ACOS value",
            "examples": [
              "12.345"
            ],
            "type": "string",
            "x-go-name": "Acos",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "inline_object_8": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/inline_object_8_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/inline_object_8_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "inline_object_9_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "ASIN - Arcsine"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "inline_object_9_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/inline_object_9_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "inline_object_9_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2025-05-29 16:05:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "asin": {
            "description": "ASIN value",
            "examples": [
              "12.345"
            ],
            "type": "string",
            "x-go-name": "Asin",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "inline_object_9": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/inline_object_9_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/inline_object_9_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "inline_object_10_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "ATAN - Arctan"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "inline_object_10_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/inline_object_10_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "inline_object_10_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2025-05-29 16:52:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "atan": {
            "description": "ATAN value",
            "examples": [
              "1.57079"
            ],
            "type": "string",
            "x-go-name": "Atan",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "inline_object_10": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/inline_object_10_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/inline_object_10_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "inline_object_11_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "COS - Cosine"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "inline_object_11_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/inline_object_11_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "inline_object_11_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2025-05-29 16:55:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "cos": {
            "description": "COS value",
            "examples": [
              "-0.25043722"
            ],
            "type": "string",
            "x-go-name": "Cos",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "inline_object_11": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/inline_object_11_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/inline_object_11_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "inline_object_12_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "COSH - Hyperbolic Cosine"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "inline_object_12_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/inline_object_12_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "inline_object_12_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2025-05-29 17:01:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "cosh": {
            "description": "COSH value",
            "examples": [
              "+Inf"
            ],
            "type": "string",
            "x-go-name": "Cosh",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "inline_object_12": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/inline_object_12_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/inline_object_12_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "inline_object_13_meta_indicator": {
        "properties": {
          "ma_type": {
            "type": "string",
            "x-go-name": "MAType"
          },
          "max_period": {
            "format": "int64",
            "type": "integer",
            "x-go-name": "MaxPeriod"
          },
          "min_period": {
            "format": "int64",
            "type": "integer",
            "x-go-name": "MinPeriod"
          },
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "periods": {
            "items": {
              "format": "int64",
              "type": "integer"
            },
            "type": "array",
            "x-go-name": "Periods"
          },
          "series_type": {
            "type": "string",
            "x-go-name": "SeriesType"
          }
        },
        "type": "object",
        "x-go-name": "Indicator"
      },
      "inline_object_13_meta": {
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/inline_object_13_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta"
      },
      "inline_object_13_values_inner": {
        "properties": {
          "datetime": {
            "type": "string",
            "x-go-name": "Time"
          },
          "mavp": {
            "type": "string",
            "x-go-name": "MaVp"
          }
        },
        "type": "object"
      },
      "inline_object_13": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/inline_object_13_meta"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/inline_object_13_values_inner"
            },
            "type": "array",
            "x-go-name": "Data"
          }
        },
        "type": "object"
      },
      "inline_object_14_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "SIN - Sine"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "inline_object_14_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/inline_object_14_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "inline_object_14_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2025-05-29 17:05:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "sin": {
            "description": "SIN value",
            "examples": [
              "-0.87641625"
            ],
            "type": "string",
            "x-go-name": "Sin",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "inline_object_14": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/inline_object_14_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/inline_object_14_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "inline_object_15_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "SINH - Hyperbolic Sine"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "inline_object_15_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/inline_object_15_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "inline_object_15_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2025-05-29 17:08:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "sinh": {
            "description": "SINH value",
            "examples": [
              "+Inf"
            ],
            "type": "string",
            "x-go-name": "Sinh",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "inline_object_15": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/inline_object_15_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/inline_object_15_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "inline_object_16_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "TAN - Tangent"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "inline_object_16_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/inline_object_16_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "inline_object_16_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2025-05-29 13:12:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "tan": {
            "description": "TAN value",
            "examples": [
              "-1.29151"
            ],
            "type": "string",
            "x-go-name": "Tan",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "inline_object_16": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/inline_object_16_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/inline_object_16_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "inline_object_17_meta_indicator": {
        "description": "Technical indicator information",
        "properties": {
          "name": {
            "description": "Name of the technical indicator",
            "examples": [
              "TANH - Hyperbolic Tangent"
            ],
            "type": "string",
            "x-go-name": "Name",
            "x-order": 10
          },
          "series_type": {
            "description": "Price type on which technical indicator is calculated",
            "examples": [
              "close"
            ],
            "type": "string",
            "x-go-name": "SeriesType",
            "x-order": 20
          }
        },
        "type": "object",
        "x-go-name": "Indicator",
        "x-order": 100
      },
      "inline_object_17_meta": {
        "description": "Json object with request general information",
        "properties": {
          "symbol": {
            "description": "The ticker symbol of an instrument for which data was requested.",
            "examples": [
              "AAPL"
            ],
            "type": "string",
            "x-go-name": "Symbol",
            "x-order": 10
          },
          "interval": {
            "description": "The time gap between consecutive data points.",
            "examples": [
              "1min"
            ],
            "type": "string",
            "x-go-name": "Interval",
            "x-order": 20
          },
          "currency": {
            "description": "The currency of a traded instrument.",
            "examples": [
              "USD"
            ],
            "type": "string",
            "x-go-name": "Currency",
            "x-order": 30
          },
          "exchange_timezone": {
            "description": "The timezone of the exchange where the instrument is traded.",
            "examples": [
              "America/New_York"
            ],
            "type": "string",
            "x-go-name": "ExchangeTimezone",
            "x-order": 60
          },
          "exchange": {
            "description": "The exchange name where the instrument is traded.",
            "examples": [
              "NASDAQ"
            ],
            "type": "string",
            "x-go-name": "Exchange",
            "x-order": 70
          },
          "mic_code": {
            "description": "The Market Identifier Code (MIC) of the exchange where the instrument is traded.",
            "examples": [
              "XNAS"
            ],
            "type": "string",
            "x-go-name": "MicCode",
            "x-order": 80
          },
          "type": {
            "description": "The asset class to which the instrument belongs.",
            "examples": [
              "Common Stock"
            ],
            "type": "string",
            "x-go-name": "Type",
            "x-order": 90
          },
          "indicator": {
            "$ref": "#/components/schemas/inline_object_17_meta_indicator"
          }
        },
        "type": "object",
        "x-go-name": "Meta",
        "x-order": 10
      },
      "inline_object_17_values_inner": {
        "properties": {
          "datetime": {
            "description": "Datetime in local market time for equities and in UTC for forex and cryptocurrencies referring to when the bar with specified interval was opened",
            "examples": [
              "2025-05-29 13:16:00"
            ],
            "type": "string",
            "x-go-name": "Time",
            "x-order": 10
          },
          "tanh": {
            "description": "TANH value",
            "examples": [
              "1"
            ],
            "type": "string",
            "x-go-name": "Tanh",
            "x-order": 20
          }
        },
        "type": "object"
      },
      "inline_object_17": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/inline_object_17_meta"
          },
          "values": {
            "description": "Array of time series data points",
            "items": {
              "$ref": "#/components/schemas/inline_object_17_values_inner"
            },
            "type": "array",
            "x-go-name": "Data",
            "x-order": 20
          },
          "status": {
            "description": "Response status",
            "examples": [
              "ok"
            ],
            "type": "string",
            "x-go-name": "Status",
            "x-order": 30
          }
        },
        "type": "object"
      },
      "GetDividendsCalendar_200_response": {
        "items": {
          "$ref": "#/components/schemas/DividendsCalendarItem"
        },
        "type": "array"
      },
      "GetIpoCalendar_200_response": {
        "additionalProperties": {
          "items": {
            "$ref": "#/components/schemas/GetIpoCalendar_200_response_value_inner"
          },
          "type": "array"
        },
        "type": "object"
      },
      "GetMarketState_200_response": {
        "items": {
          "$ref": "#/components/schemas/MarketStateResponseItem"
        },
        "type": "array"
      },
      "GetSplitsCalendar_200_response": {
        "items": {
          "$ref": "#/components/schemas/SplitsCalendarResponseItem"
        },
        "type": "array"
      }
    },
    "securitySchemes": {
      "authorizationHeader": {
        "description": "Enter the token with the `apikey ` prefix, e.g. \"apikey abcde12345\".",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      },
      "queryParameter": {
        "in": "query",
        "name": "apikey",
        "type": "apiKey"
      }
    }
  },
  "x-group-list": [
    {
      "description": "Access real-time and historical market prices—time series, bid/ask quotes, and exchange rates—for equities, forex, cryptocurrencies, ETFs, and more. These endpoints form the foundation for any trading or data-driven application.",
      "name": "Core data",
      "order": 10
    },
    {
      "description": "Lookup static metadata—symbol lists, exchange details, currency information-to filter, validate, and contextualize your core data calls. Ideal for building dropdowns, mappings, and ensuring data consistency.",
      "name": "Reference data",
      "order": 20
    },
    {
      "description": "In-depth company and fund financials—income statements, balance sheets, cash flows, profiles, corporate events, and key ratios. Unlock comprehensive datasets for valuation, screening, and fundamental research.",
      "name": "Fundamentals",
      "order": 30
    },
    {
      "description": "ETF-focused metadata and analytics: universe lists, family and type groupings, NAV snapshots, performance metrics, risk measures, and current fund composition. Tailored to the unique characteristics and reporting cadence of exchange-traded funds.",
      "name": "ETFs",
      "order": 40
    },
    {
      "description": "Mutual-fund-specific listings and snapshots: fund directories, issuer families, fund types, NAV history, dividend records, key ratios, and portfolio holdings. Ideal for long-term performance analysis and portfolio attribution.",
      "name": "Mutual funds",
      "order": 50
    },
    {
      "children": [
        {
          "description": "Plotted directly on the price chart to smooth or envelope price data, highlighting trend direction, support/resistance, and mean-reversion levels (e.g. moving averages, Bollinger Bands, Parabolic SAR, Ichimoku Cloud, Keltner Channels, McGinley Dynamic).",
          "name": "Overlap Studies",
          "order": 10
        },
        {
          "description": "Oscillators that measure the speed or strength of price movement, helping detect overbought/oversold conditions, divergences, and shifts in trend momentum (e.g. RSI, MACD, ROC, Stochastics, ADX, CCI, Coppock Curve, TRIX).",
          "name": "Momentum Indicators",
          "order": 20
        },
        {
          "description": "Use trading volume to confirm price moves or warn of exhaustion—volume and price in tandem suggest trend strength, while divergences can signal reversals (e.g. OBV, Chaikin AD, Accumulation/Distribution Oscillator).",
          "name": "Volume Indicators",
          "order": 30
        },
        {
          "description": "Quantify the range or dispersion of price over time to gauge risk, size stops, or identify breakouts (e.g. ATR, NATR, True Range) and adaptive overlays like SuperTrend.",
          "name": "Volatility Indicators",
          "order": 40
        },
        {
          "description": "Convert raw OHLC data into derived series or aggregated values to feed other indicators or reveal different perspectives on price (e.g. typical price, HLC3, weighted close, arithmetic transforms like SUM, AVG, LOG, SQRT).",
          "name": "Price Transform",
          "order": 50
        },
        {
          "description": "Detect and follow recurring periodic patterns in price action using Hilbert Transform–based measures of cycle period and phase (e.g. HT_SINE, HT_DCPERIOD, HT_DCPHASE, HT_PHASOR, HT_TRENDMODE).",
          "name": "Cycle Indicators",
          "order": 60
        },
        {
          "description": "Scan bars or bar‐groups for predefined candlestick patterns that historically signal continuation or reversal setups (e.g. Doji, Hammer, Engulfing, Three Black Crows, Morning Star, Dark Cloud Cover, etc.).",
          "name": "Pattern Recognition",
          "order": 70
        },
        {
          "description": "Compute fundamental statistical metrics on price series—dispersion, regression, correlation, and forecasting components—for standalone analysis or as inputs to other models (e.g. STDDEV, VAR, LINEARREG, CORREL, TSF, BETA).",
          "name": "Statistic Functions",
          "order": 80
        },
        {
          "name": "Math transform",
          "order": 90
        }
      ],
      "description": "On-demand calculation of popular indicators (SMA, EMA, RSI, MACD, Bollinger Bands, etc.) over any supported time series. Streamline chart overlays, signal generation, and backtesting without external libraries.",
      "name": "Technical indicators",
      "order": 60
    },
    {
      "description": "Forward-looking and consensus analytics—earnings and revenue estimates, EPS trends and revisions, growth projections, analyst recommendations and ratings, price targets, and other consensus metrics. Perfect for incorporating expert forecasts and sentiment into your models and dashboards.",
      "name": "Analysis",
      "order": 70
    },
    {
      "description": "Compliance and filings data: insider transactions, SEC reports, governance documents, and more. Critical for audit trails, due-diligence workflows, and risk-management integrations.",
      "name": "Regulatory",
      "order": 80
    },
    {
      "description": "High-throughput and management endpoints for power users—submit and monitor batch jobs to pull large datasets asynchronously, track your API usage and quotas programmatically, and access other developer-focused tools for automating and scaling your data workflows.",
      "name": "Advanced",
      "order": 90
    }
  ],
  "x-original-swagger-version": "2.0"
}