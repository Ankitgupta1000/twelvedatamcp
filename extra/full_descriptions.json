{
  "GetTimeSeriesAd": "This API endpoint provides the Accumulation/Distribution (AD) technical indicator data for a specified financial instrument. The AD indicator is a volume-based tool used to assess buying or selling pressure by analyzing the flow of money into and out of a security, based on its closing price relative to its price range and trading volume.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize:** Number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date and end_date:** Define the time range for the data retrieval.\n- **timezone:** Specifies the timezone for the output datetime, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Returns:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, currency, exchange, and indicator details.\n- **values:** An array of data points, each with a datetime and corresponding AD value.\n- **status:** The response status, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to understand the money flow dynamics of a particular security over time, which can help in identifying potential price reversals or confirming trends.\n\n### Example Questions:\n1. How can I analyze the buying and selling pressure for Apple stock over the last month?\n2. What is the Accumulation/Distribution line for EUR/USD on a 5-minute interval?\n3. Can I get the AD values for Tesla stock for the past week in CSV format?",
  "GetTimeSeriesAdd": "The `/add` endpoint is designed to perform an arithmetic addition of two input data series, such as technical indicators or price data, for a specified financial instrument. This operation is useful for combining different data series to analyze trends or patterns in financial markets.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the financial instrument (e.g., `AAPL`, `EUR/USD`). This is a required parameter.\n- **interval**: Specifies the time interval between consecutive data points (e.g., `1min`, `1day`). This is also required.\n- **series_type_1** and **series_type_2**: Define the price types (e.g., `open`, `close`) used for the two data series being added.\n- **start_date** and **end_date**: Define the date range for the data retrieval. If not specified, the endpoint defaults to the most recent data.\n- **outputsize**: Determines the number of data points to retrieve, with a default of 30 if no date range is specified.\n- **format**: Specifies the format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and details about the technical indicator used.\n- **values**: An array of time series data points, each with a timestamp and the result of the addition operation.\n- **status**: Indicates the success or failure of the request.\n\n### Usage Context:\nThis endpoint is particularly useful for financial analysts or developers who need to combine and analyze different data series for market instruments over specified time intervals.\n\n### Example Questions:\n- How can I combine the opening and closing prices for Apple stock over the last week?\n- What is the result of adding the high and low prices for EUR/USD on a 1-hour interval?\n- Can I get the arithmetic addition of volume and close prices for Bitcoin in CSV format?",
  "GetTimeSeriesAdOsc": "The `/adosc` endpoint provides access to the Accumulation/Distribution Oscillator (ADOSC) data for a specified financial instrument. This momentum indicator is used to identify buying or selling pressure and potential trend reversals by analyzing short-term and long-term price and volume trends.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval for data points, such as `1min`, `5min`, `1day`, etc.\n- **fast_period**: The number of periods for the fast moving average, with a default of 12.\n- **slow_period**: The number of periods for the slow moving average, with a default of 26.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date** and **end_date**: Specify the date range for the data. If provided, they override the `outputsize`.\n- **timezone**: The timezone for the output datetime, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a `datetime` and `adosc` value.\n- **status**: The status of the response, typically \"ok\".\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who want to monitor the momentum and potential trend reversals of a specific instrument over various time intervals.\n\n### Example Questions:\n1. \"What is the ADOSC value for Apple Inc. over the last week with 1-hour intervals?\"\n2. \"Can I get the ADOSC data for EUR/USD for the past month at daily intervals?\"\n3. \"How does the ADOSC for Bitcoin against Ethereum look over the last 24 hours with 15-minute intervals?\"",
  "GetTimeSeriesAdx": "This API endpoint provides the Average Directional Index (ADX) for a specified financial instrument, which helps traders assess the strength of a market trend. The endpoint requires the `symbol` of the instrument (e.g., `AAPL`, `EUR/USD`) and the `interval` for the data points (e.g., `1min`, `1day`). Optional parameters include identifiers like `isin`, `figi`, and `cusip`, as well as filters for exchange, country, and asset class. Users can also specify the `outputsize` for the number of data points, `start_date` and `end_date` for a specific time range, and the `timezone` for date and time formatting.\n\nThe response includes metadata about the request, such as the symbol, interval, and exchange details, along with an array of time-series data points containing the ADX values and corresponding timestamps.\n\nThis endpoint is useful for:\n- Determining if a specific stock or currency pair is currently trending.\n- Analyzing the strength of a trend over a specified time interval.\n- Integrating ADX data into trading algorithms or dashboards.\n\nExample questions this endpoint could answer:\n- \"What is the current trend strength of Apple stock over the past week?\"\n- \"How strong is the trend for the EUR/USD currency pair on a 15-minute interval?\"\n- \"Can I get the ADX values for Bitcoin trading over the last month?\"",
  "GetTimeSeriesAdxr": "The `/adxr` endpoint provides the Average Directional Movement Index Rating (ADXR) for a specified financial instrument. This endpoint is used to assess the strength of a market trend by offering a smoothed version of the Average Directional Movement Index (ADX). \n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval for the data points (e.g., `1min`, `1day`).\n- **outputsize:** Number of data points to retrieve, with a default of 30.\n- **start_date and end_date:** Define the date range for the data.\n- **exchange, mic_code, country, type:** Optional filters to specify the trading location and asset class.\n- **timezone:** Specifies the timezone for the output datetime, defaulting to the exchange's local time.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each including a datetime and the corresponding ADXR value.\n- **status:** The status of the response, typically \"ok\".\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to evaluate the trend strength of a particular instrument over a specified period. It supports various time intervals and can be filtered by different identifiers and trading locations.\n\n### Example Questions:\n1. \"What is the ADXR for Apple stock on a 1-minute interval?\"\n2. \"Can I get the ADXR values for EUR/USD for the past week?\"\n3. \"How strong is the trend for Bitcoin in the last month using ADXR?\"",
  "GetAnalystRatingsLight": "The `/analyst_ratings/light` endpoint provides a simplified version of analyst ratings for financial instruments, applicable to both US and international markets. This endpoint is designed to deliver essential information about how analyst firms rate various financial instruments, such as stocks.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the financial instrument (e.g., \"AAPL\"). This is a required parameter.\n- **figi**: The Financial Instrument Global Identifier, an optional parameter for more precise identification.\n- **isin**: The International Securities Identification Number, another optional identifier.\n- **cusip**: The CUSIP number, used primarily in the United States for identifying securities.\n- **exchange**: The name of the exchange where the instrument is traded (e.g., \"NASDAQ\").\n- **rating_change**: Specifies the type of rating action, such as \"Maintains\", \"Upgrade\", \"Downgrade\", \"Initiates\", or \"Reiterates\".\n- **outputsize**: Determines the number of records returned, with a default value of 30.\n- **country**: Filters results by country name or code, such as \"United States\" or \"US\".\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: Metadata about the instrument, including its symbol, name, currency, exchange, and type.\n- **ratings**: A list of ratings from analyst firms, detailing the date, firm name, rating change action, current rating, and prior rating.\n- **status**: Indicates the response status, typically \"ok\".\n\n### Usage Context:\nThis endpoint is useful for investors and analysts who need a quick overview of how different firms are currently rating a specific stock or financial instrument. It is particularly beneficial for tracking changes in analyst opinions over time.\n\n### Example Questions:\n- \"What are the latest analyst ratings for Apple Inc. on NASDAQ?\"\n- \"How have the ratings for a specific stock changed recently in the US market?\"\n- \"Can I get a summary of analyst ratings for a stock identified by its ISIN?\"",
  "GetAnalystRatingsUsEquities": "The `/analyst_ratings/us_equities` endpoint provides detailed information on ratings issued by analyst firms for U.S. equities. It is designed to help users access the latest analyst opinions and ratings changes for specific stocks traded in the United States.\n\n### Key Input Parameters:\n- **symbol**: This is a required parameter that specifies the stock ticker symbol for which you want to retrieve analyst ratings.\n- **figi**: An optional parameter allowing you to filter by the Financial Instrument Global Identifier.\n- **isin**: Another optional parameter to filter by the International Securities Identification Number.\n- **cusip**: Allows filtering by the CUSIP number, which is a unique identifier for securities.\n- **exchange**: You can filter results by the name of the stock exchange.\n- **rating_change**: This parameter lets you filter the ratings based on the type of change, such as \"Upgrade\" or \"Downgrade\".\n- **outputsize**: Specifies the number of records to return, with a default value of 30.\n\n### Response:\nThe response includes metadata about the stock, such as its name, currency, and exchange details. It also provides a list of analyst ratings, detailing the date of the rating, the issuing firm, the analyst's name, the type of rating change, current and prior ratings, and price targets.\n\n### Usage Context:\nThis endpoint is useful for investors, analysts, or financial professionals who need to track analyst opinions and changes in stock ratings for U.S. equities. It can help in making informed investment decisions based on expert analysis.\n\n### Example Questions:\n1. \"What are the latest analyst ratings for Apple Inc.?\"\n2. \"Has there been any recent upgrade or downgrade for stocks listed on NASDAQ?\"\n3. \"Can I see the current price target set by analysts for a specific stock?\"",
  "GetApiUsage": "The `/api_usage` endpoint provides information about the current usage of the Twelve Data API. It is a GET request that returns key metrics such as the number of requests made in the last minute, the current timestamp in UTC, and the user's API request limit per minute based on their subscription plan.\n\nKey input parameters include:\n- **format**: Determines the output format, either JSON (default) or CSV.\n- **delimiter**: Specifies the delimiter for the CSV output, with a default of \";\".\n- **timezone**: Sets the timezone for the output datetime. It defaults to UTC but can be adjusted to any valid IANA timezone name, such as \"America/New_York\" or \"Asia/Singapore\".\n\nThe endpoint returns a JSON object containing:\n- **timestamp**: The current timestamp in UTC.\n- **current_usage**: The number of API requests made in the last minute.\n- **plan_limit**: The maximum number of requests allowed per minute according to the user's subscription plan.\n\nThis endpoint is useful for monitoring API usage to ensure it stays within the plan limits and for tracking request patterns over time.\n\nExample questions a user might ask:\n- \"How many API requests have I made in the last minute?\"\n- \"What is my current API usage limit per minute?\"\n- \"Can I get my API usage data in CSV format with a custom delimiter?\"",
  "GetTimeSeriesApo": "The \"APO\" endpoint provides data on the Absolute Price Oscillator (APO), a momentum indicator used in trading to measure the difference between two moving averages. This helps traders identify potential price trends and reversals.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This is required to specify which instrument's data you want.\n- **interval**: The time interval for the data points (e.g., `1min`, `1day`). This is required to define the granularity of the data.\n- **fast_period**: Number of periods for the fast moving average, with a default of 12.\n- **slow_period**: Number of periods for the slow moving average, with a default of 26.\n- **ma_type**: The type of moving average used, with options like `SMA`, `EMA`.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date** and **end_date**: Define the date range for the data. If not set, the endpoint defaults to recent data.\n\n### Returns:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a datetime and the corresponding APO value.\n- **status**: The response status, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"How can I get the APO values for Apple stock on a minute-by-minute basis?\"\n2. \"What are the APO values for EUR/USD using a 5-minute interval?\"\n3. \"Can I retrieve the APO for a specific date range for Tesla stock?\"",
  "GetTimeSeriesAroon": "The `/aroon` endpoint provides the Aroon indicator values for a specified financial instrument, which helps in detecting the presence and strength of trends by measuring the time elapsed since the highest high and lowest low within a given period. This endpoint is particularly useful for traders and analysts looking to assess market trends for various assets.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument, such as `AAPL` for Apple Inc. This identifies the specific asset for which the Aroon indicator is calculated.\n- **interval** (required): The time interval between consecutive data points, such as `1min`, `1day`, etc. This determines the granularity of the time series data.\n- **time_period**: The number of periods over which the Aroon indicator is averaged, with a default of 14.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30 if no specific date range is set.\n- **start_date** and **end_date**: Define the date range for the data retrieval. If specified, they override the default output size.\n- **timezone**: Specifies the timezone for the output datetime, which can be set to `Exchange`, `UTC`, or a specific IANA timezone like `America/New_York`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, currency, and exchange details.\n- **values**: An array of time series data points, each including the datetime, Aroon up, and Aroon down values.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"How can I get the Aroon indicator for Apple stock on a 1-minute interval?\"\n2. \"What are the Aroon up and down values for EUR/USD over the last 14 days?\"\n3. \"Can I retrieve the Aroon indicator data for Bitcoin with a daily interval?\"",
  "GetTimeSeriesAroonOsc": "The Aroon Oscillator endpoint provides a way to analyze the trend strength and potential reversals of a financial instrument by calculating the difference between the Aroon Up and Aroon Down lines. This endpoint is particularly useful for traders and analysts looking to assess market trends over specific time intervals.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument you want to analyze, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between data points, options include `1min`, `5min`, `1day`, etc.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **time_period:** The number of periods over which to average, defaulting to 14.\n- **start_date and end_date:** Specify the date range for the data.\n- **timezone:** Determines the timezone for the output datetime, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta Information:** Details about the request such as the symbol, interval, and exchange information.\n- **Values:** An array of data points, each with a timestamp and the corresponding Aroon Oscillator value.\n- **Status:** Indicates if the request was successful.\n\n### Usage Context:\nThis endpoint is ideal for users who need to evaluate the momentum of a stock or currency pair over time, helping them make informed trading decisions.\n\n### Example Questions:\n1. How can I determine the trend strength of Apple stock over the past month using the Aroon Oscillator?\n2. What is the Aroon Oscillator value for EUR/USD on a 5-minute interval?\n3. Can I get the Aroon Oscillator data for Bitcoin against Ethereum for the last 14 days?",
  "GetTimeSeriesAtr": "The \"Average True Range (ATR)\" endpoint provides a measure of market volatility by calculating the average range of price movements over a specified period for a given financial instrument. This endpoint is useful for traders and analysts who want to assess the volatility of a stock, currency pair, or other financial instruments.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This is required to specify which instrument's ATR you want to calculate.\n- **interval**: Specifies the time interval between data points (e.g., `1min`, `1day`). This is required to define the granularity of the data.\n- **time_period**: The number of periods over which to average the ATR, with a default value of 14.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: Define the date range for the data retrieval.\n- **format**: The format of the response data, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each containing a datetime and the corresponding ATR value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for traders who need to evaluate the volatility of an asset over different time frames to make informed trading decisions. It supports various asset classes and can be filtered by exchange, country, and other identifiers like ISIN or CUSIP.\n\n### Example Questions:\n1. \"What is the average true range for Apple stock over the last month?\"\n2. \"How volatile is the EUR/USD currency pair on a 1-hour interval?\"\n3. \"Can I get the ATR for Bitcoin against Ethereum for the past week?\"",
  "GetTimeSeriesAvg": "The `/avg` endpoint is designed to calculate the arithmetic mean (average) of a specified data series over a given period. This is commonly used to smooth out fluctuations in data, such as stock prices or currency values, over time. \n\nTo use this endpoint, you must provide the `symbol` parameter, which specifies the ticker of the instrument you are interested in, such as `AAPL` for Apple Inc. Additionally, you must specify the `interval` parameter, which determines the time gap between consecutive data points (e.g., `1min`, `1h`, `1day`). Optional parameters include `outputsize` to define the number of data points to retrieve, `start_date` and `end_date` to specify the date range, and `timezone` to adjust the time zone of the output data.\n\nThe endpoint returns a JSON object containing metadata about the request, such as the symbol, interval, and exchange information, as well as an array of time series data points. Each data point includes the datetime and the calculated average value for that period.\n\nHere are some example questions that this endpoint could answer:\n- \"What is the average stock price of Apple over the last 30 days?\"\n- \"Can I get the average exchange rate for EUR/USD every hour for the past week?\"\n- \"What was the average closing price of Bitcoin last month?\"",
  "GetTimeSeriesAvgPrice": "The `/avgprice` endpoint provides the Average Price (AVGPRICE) indicator for a specified financial instrument. This indicator calculates the average of a security's open, high, low, and close prices, offering a simplified view of its price action over time.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval for data points (e.g., `1min`, `1day`).\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000. Defaults to 30 if no date parameters are set.\n- **start_date and end_date:** Specify the date range for the data.\n- **timezone:** Determines the timezone for the output datetime, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n- **format:** The response format, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta information:** Details about the request, such as the symbol, interval, and exchange.\n- **Values:** An array of time series data points, each with a datetime and the computed average price.\n- **Status:** Indicates the success of the request.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who want to track the average price trends of a security over specific time intervals. It can be used to analyze historical price movements and make informed trading decisions.\n\n### Example Questions:\n1. \"What is the average price of Apple stock over the last week with daily intervals?\"\n2. \"Can I get the average price data for EUR/USD every 5 minutes for the past day?\"\n3. \"How can I retrieve the average price of Bitcoin for the last month in CSV format?\"",
  "GetBalanceSheet": "The `/balance_sheet` endpoint provides a comprehensive balance sheet for a specified company, detailing its assets, liabilities, and shareholders' equity. This information is crucial for financial analysis and understanding a company's financial health.\n\n### Key Input Parameters:\n- **symbol (required):** The stock ticker symbol of the company. For preferred stocks, use a dot (.) delimiter, such as `BRK.A` or `BRK.B`.\n- **figi, isin, cusip:** Optional identifiers for filtering by financial instrument, using FIGI, ISIN, or CUSIP codes.\n- **exchange, mic_code, country:** Optional parameters to specify the exchange, market identifier code, or country where the instrument is traded.\n- **period:** Specifies whether the balance sheet data should be annual or quarterly, with \"annual\" as the default.\n- **start_date, end_date:** Optional date range to filter the balance sheet data by fiscal date.\n- **outputsize:** Specifies the number of records to return, with a default of 6.\n\n### Response:\nThe response includes metadata about the balance sheet, such as the company name, currency, and exchange details. It also provides an array of balance sheet records, detailing current and non-current assets, liabilities, and shareholders' equity.\n\n### Usage Context:\nThis endpoint is useful for investors, analysts, and financial professionals who need to assess a company's financial position over time. It can be used to compare financial metrics across different periods or to evaluate the impact of financial decisions.\n\n### Example Questions:\n1. \"What are the current assets and liabilities for Apple Inc. as of the latest quarter?\"\n2. \"Can I get the annual balance sheet for Berkshire Hathaway's preferred stock?\"\n3. \"How has the total shareholders' equity of a company changed over the past year?\"",
  "GetBalanceSheetConsolidated": "This API endpoint provides a consolidated balance sheet for a specified company, detailing its assets, liabilities, and shareholders' equity. To retrieve this information, you must provide the company's symbol ticker, such as \"AAPL\" for Apple Inc. You can also filter the results using other identifiers like FIGI, ISIN, or CUSIP, and specify the exchange or country where the instrument is traded. Additionally, you can choose the reporting period (annual or quarterly) and set a date range for the fiscal data using start and end dates.\n\nThe response includes detailed financial data, such as total assets, current and non-current assets, liabilities, and equity information. This data is structured by fiscal date, allowing for a comprehensive view of the company's financial position over time.\n\nExample questions this endpoint could answer:\n1. \"What are the total assets and liabilities of Apple Inc. for the last fiscal year?\"\n2. \"Can I get the quarterly balance sheet for a company traded on NASDAQ?\"\n3. \"What is the consolidated balance sheet for a company with the ISIN US0378331005?\"",
  "advanced": "The `/batch` endpoint allows you to send multiple requests for different financial instruments, intervals, and endpoints in a single operation. This is particularly useful for efficiently retrieving data from various sources without making separate calls for each request. \n\n### Key Input:\n- **Request Body**: A JSON object where each key is a unique request ID, and the value is the URL of the requested endpoint. This structure allows you to specify multiple requests in one batch.\n\n### Response:\n- The response is a JSON object with the same keys as the request, where each key corresponds to the request ID. The value is the data returned from the requested endpoint. If any request fails due to errors like invalid symbols or unsupported intervals, the error is reported individually, allowing other requests to be processed successfully.\n\n### Usage Context:\n- The number of concurrent requests you can make is limited by your subscription plan, and each request consumes API credits. If your credit limit is reached, only partial data will be returned.\n- This endpoint is ideal for applications that need to fetch large amounts of data from multiple sources simultaneously, such as financial analysis tools or trading platforms.\n\n### Example Questions:\n1. How can I retrieve stock data for multiple companies at different intervals in one go?\n2. Is there a way to get currency exchange rates and stock prices in a single request?\n3. Can I batch multiple API requests to save on credits and reduce network calls?",
  "GetTimeSeriesBBands": "The `/bbands` endpoint provides data on Bollinger Bands, a technical analysis tool used to measure market volatility and identify potential overbought or oversold conditions. This endpoint is designed for traders and analysts who want to analyze the price volatility of financial instruments over a specified time period.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the financial instrument (e.g., `AAPL` for Apple Inc.).\n- **interval** (required): The time interval for the data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000.\n- **start_date** and **end_date**: Specify the date range for the data.\n- **ma_type**: The type of moving average to use, with options like `SMA`, `EMA`, etc.\n- **sd**: Number of standard deviations for the bands, typically set to 2.\n- **time_period**: The number of periods over which to calculate the moving average, defaulting to 20.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: Information about the request, such as the symbol, interval, and exchange details.\n- **values**: An array of data points, each including the date, upper band, middle band, and lower band values.\n- **status**: The status of the response, indicating success or failure.\n\n### Example Questions:\n1. \"What are the Bollinger Bands for Apple stock on a 5-minute interval?\"\n2. \"Can I get the Bollinger Bands for EUR/USD for the last 30 days?\"\n3. \"How do the Bollinger Bands for Bitcoin look over the past week using an EMA?\"",
  "GetTimeSeriesBeta": "The `/beta` endpoint provides the Beta indicator for a given financial instrument, which measures the instrument's sensitivity to market movements compared to a benchmark index. This is useful for assessing the systematic risk of the security.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This is a required parameter.\n- **interval**: The time interval between data points (e.g., `1min`, `1day`). This is required to specify how frequently data points are recorded.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000. Defaults to 30 if no date is specified.\n- **exchange, mic_code, country, type**: Optional parameters to filter the instrument by its trading location, market identifier, country, or asset class.\n- **start_date, end_date**: Define the time range for the data retrieval.\n- **timezone**: Specifies the timezone for the output datetime.\n- **format**: The format of the response data, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, currency, exchange details, and indicator specifics.\n- **values**: An array of time series data points, each containing a datetime and the corresponding Beta value.\n- **status**: The status of the response, typically \"ok\".\n\n### Usage Context:\nThis endpoint is particularly useful for investors and analysts who need to understand the volatility and risk associated with a specific security relative to the market.\n\n### Example Questions:\n1. \"What is the Beta value of Apple Inc. over the last month at daily intervals?\"\n2. \"How does the Beta of EUR/USD change over a 5-minute interval?\"\n3. \"Can I get the Beta values for Tesla on NASDAQ for the past week?\"",
  "GetBonds": "The `/bonds` endpoint provides a list of bonds available through the Twelve Data API. This list is updated daily and can be filtered using several parameters. \n\nKey input parameters include:\n- **symbol**: A specific bond's ticker symbol to retrieve data for.\n- **exchange**: The name of the exchange to filter bonds by.\n- **country**: The country name or code to filter bonds by.\n- **format**: The desired format of the response, either JSON or CSV.\n- **delimiter**: The separator used in the CSV format, defaulting to a semicolon.\n- **show_plan**: A boolean to include information about the access plan for each bond.\n- **page**: The page number of the results to fetch.\n- **outputsize**: The number of data points to return, with a default of 5000.\n\nThe endpoint returns a JSON object containing:\n- A list of bonds with details such as symbol, name, country, currency, exchange, and type.\n- The total count of matching bonds.\n- The response status.\n\nThis endpoint is useful for retrieving comprehensive bond data, which can be filtered by specific criteria such as exchange or country.\n\nExample questions this endpoint could satisfy:\n- \"What bonds are available on the NYSE?\"\n- \"Can I get a list of US Treasury bonds?\"\n- \"How can I retrieve bond data in CSV format?\"",
  "GetTimeSeriesBop": "The `/bop` endpoint provides the Balance of Power (BOP) indicator for a specified financial instrument. This indicator helps traders assess the balance between buying and selling pressures based on the instrument's open, high, low, and close prices, which can indicate potential price trends.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval for the data points (e.g., `1min`, `1day`).\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the date range for the data. If provided, they will be considered in conjunction with the `timezone` parameter.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with a datetime and BOP value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to evaluate the buying and selling dynamics of a security over specific time intervals to make informed trading decisions.\n\n### Example Questions:\n1. \"What is the Balance of Power indicator for Apple stock over the last week?\"\n2. \"How does the BOP for EUR/USD look on a 15-minute interval?\"\n3. \"Can I get the BOP values for Ethereum against Bitcoin for the past month?\"",
  "GetCashFlow": "The `/cash_flow` endpoint provides a detailed cash flow statement for a specific company, showing the net amount of cash and cash equivalents being transferred into and out of the business. This endpoint is useful for financial analysis and understanding a company's liquidity and financial health.\n\n### Key Input Parameters:\n- **symbol**: This is a required parameter representing the stock ticker of the company (e.g., `AAPL` for Apple Inc.). It is used to identify the company for which the cash flow data is requested.\n- **figi, isin, cusip**: These optional parameters allow filtering by different financial instrument identifiers, such as FIGI, ISIN, and CUSIP, respectively.\n- **exchange, mic_code, country**: Optional parameters to specify the exchange or country where the instrument is traded.\n- **period**: Specifies the reporting period for the cash flow data, either `annual` or `quarterly`. The default is `annual`.\n- **start_date, end_date**: These parameters define the date range for the cash flow statements, using the format `YYYY-MM-DD`.\n- **outputsize**: Determines the number of records returned, with a default of 6.\n\n### Response:\nThe response includes metadata about the company and the exchange, such as the company name, currency, and exchange details. It also provides detailed cash flow data, including sections on operating, investing, and financing activities. Key financial figures like net income, operating cash flow, and free cash flow are included, along with fiscal dates and periods.\n\n### Usage Context:\nThis endpoint is ideal for investors, analysts, or financial professionals who need to assess a company's cash flow over a specified period. It can be used to evaluate financial performance and make informed investment decisions.\n\n### Example Questions:\n1. \"What is the cash flow statement for Apple Inc. for the last fiscal year?\"\n2. \"Can I see the quarterly cash flow data for a company traded on NASDAQ?\"\n3. \"How has the operating cash flow of a company changed over the past year?\"",
  "GetCashFlowConsolidated": "The `/cash_flow/consolidated` endpoint provides the consolidated cash flow statement of a company, detailing the net cash and cash equivalents moving in and out of the business. This endpoint is useful for analyzing a company's financial health by examining its cash flows from operating, investing, and financing activities.\n\n### Key Input Parameters:\n- **symbol** (required): The stock ticker symbol of the company, such as `AAPL` for Apple. For preferred stocks, use a dot delimiter, e.g., `BRK.A`.\n- **figi**: An optional parameter to filter by the Financial Instrument Global Identifier.\n- **isin**: An optional parameter to filter by the International Securities Identification Number.\n- **cusip**: An optional parameter for filtering by the CUSIP number.\n- **exchange**: The exchange where the instrument is traded, e.g., `NASDAQ`.\n- **mic_code**: Market Identifier Code under the ISO 10383 standard.\n- **country**: The country where the instrument is traded, e.g., `United States`.\n- **period**: The reporting period for the cash flow, either `annual` or `quarterly`. Defaults to `annual`.\n- **start_date** and **end_date**: Date range filters for the fiscal dates of the cash flow statements, formatted as `YYYY-MM-DD`.\n- **outputsize**: The number of records to return, defaulting to 6.\n\n### Response:\nThe response includes detailed cash flow data for the specified company, broken down into operating, investing, and financing activities. It also includes supplemental data such as interest and tax payments, and changes in cash positions. The response status indicates whether the request was successful.\n\n### Example Questions:\n1. \"What is the annual cash flow statement for Apple?\"\n2. \"Can I see the quarterly cash flow details for a company traded on NASDAQ?\"\n3. \"What are the cash flow changes for a company in the United States from January to December 2024?\"",
  "GetTimeSeriesCci": "The `/cci` endpoint provides the Commodity Channel Index (CCI) for a specified financial instrument. The CCI is a momentum oscillator that helps traders identify overbought or oversold conditions by measuring the deviation of a security's price from its average relative to its typical price range.\n\n### Key Input Parameters:\n- **symbol**: (Required) The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval**: (Required) The time interval for the data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000. Defaults to 30 if no date parameters are set.\n- **start_date** and **end_date**: Define the date range for the data. If specified, they are used in conjunction with the `timezone` parameter.\n- **timezone**: Specifies the timezone for the output datetime, such as `UTC` or `America/New_York`.\n- **time_period**: The number of periods over which the CCI is calculated, with a default of 20.\n- **format**: The format of the response data, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a `datetime` and corresponding `cci` value.\n- **status**: Indicates the success of the request, typically returning \"ok\".\n\n### Example Questions:\n1. \"What is the CCI for Apple stock over the past month with daily intervals?\"\n2. \"Can I get the CCI values for EUR/USD for the last week at 1-hour intervals?\"\n3. \"How can I retrieve the CCI for Bitcoin against Ethereum for today in JSON format?\"",
  "GetTimeSeriesCeil": "The `/ceil` endpoint provides a time series of the Ceiling (CEIL) indicator for a specified financial instrument. This indicator rounds input data up to the nearest integer, which can be useful for data analysis or calculations involving financial metrics.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the financial instrument (e.g., `AAPL`, `EUR/USD`). This is a required parameter.\n- **interval**: Specifies the time interval between data points (e.g., `1min`, `1day`). This is also required.\n- **outputsize**: Determines the number of data points to return, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: Define the date range for the data retrieval.\n- **series_type**: The price type on which the CEIL calculation is based, such as `close`, `open`, etc.\n- **format**: The format of the response data, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of data points, each with a datetime and the corresponding CEIL value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"What is the ceiling value for Apple's stock prices at 1-minute intervals?\"\n2. \"Can I get the rounded-up values for EUR/USD exchange rates over the past week?\"\n3. \"How does the CEIL indicator look for Bitcoin trading on a daily basis?\"",
  "GetTimeSeriesCmo": "The `/cmo` endpoint provides access to the Chande Momentum Oscillator (CMO) data for a specified financial instrument. This momentum indicator helps traders assess the relative strength of price movements, identifying overbought or oversold conditions and potential trend reversals.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval for data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Specify the date range for the data, formatted as `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`.\n- **series_type:** The price type used for the indicator calculation, such as `close`, `open`, `high`, etc.\n- **time_period:** The number of periods over which the CMO is averaged, defaulting to 9.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and other metadata.\n- **values:** An array of time series data points, each with a timestamp and CMO value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts seeking to evaluate market conditions for a specific instrument over a given time period. It can be used to make informed trading decisions based on momentum analysis.\n\n### Example Questions:\n1. \"What is the Chande Momentum Oscillator value for Apple stock over the last month?\"\n2. \"Can you provide the CMO for EUR/USD on a 5-minute interval?\"\n3. \"How has the CMO for Bitcoin changed over the past week?\"",
  "GetCommodities": "The `/commodities` endpoint provides a list of commodity pairs available through the Twelve Data API. It is designed to return an array of commodity data, which is updated daily. Users can filter the results by specifying a particular commodity symbol or category.\n\nKey input parameters include:\n- **symbol**: A query parameter to specify the ticker symbol of the commodity pair you are interested in, such as \"XAU/USD\" for gold.\n- **category**: A query parameter to filter commodities by their category, like \"Precious Metal\".\n- **format**: Determines the format of the response, either \"JSON\" or \"CSV\", with JSON being the default.\n- **delimiter**: If the response format is CSV, this parameter specifies the delimiter used, with a default value of \";\".\n\nThe endpoint returns a list of commodities, each with details such as the symbol, full name, category, and a short description. The response also includes a status indicating the success of the request.\n\nThis endpoint could answer questions such as:\n- \"What are the available commodity pairs for precious metals?\"\n- \"Can I get a list of commodities in CSV format?\"\n- \"What is the symbol for gold in the Twelve Data API?\"",
  "GetTimeSeriesCoppock": "The `/coppock` endpoint provides the Coppock Curve, a momentum oscillator used to identify potential long-term trend reversals in a security's price, particularly in bottoming markets. This endpoint is useful for traders looking to analyze the momentum of a security over time.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval between data points, such as `1min`, `1day`, `1week`, etc.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the time range for the data, formatted as `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`.\n- **series_type:** The price type on which the indicator is calculated, defaulting to `close`.\n- **wma_period, long_roc_period, short_roc_period:** Define the periods for weighted moving average and rates of change.\n\n### Response:\nThe endpoint returns a JSON object with:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each containing a datetime and the corresponding Coppock value.\n- **status:** The status of the response, typically \"ok\".\n\n### Example Questions:\n1. How can I find out if there's a potential trend reversal for Apple stock using the Coppock Curve?\n2. What is the Coppock Curve value for EUR/USD over the last month?\n3. Can I get the Coppock Curve data for a specific date range for a cryptocurrency like ETH/BTC?",
  "GetTimeSeriesCorrel": "The `/correl` endpoint provides the Pearson's Correlation Coefficient between two securities, which is useful for traders looking to understand the statistical relationship between these securities. This can help in identifying potential diversification opportunities or candidates for pairs trading.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the primary instrument (e.g., `AAPL`). This is required.\n- **interval**: Specifies the time interval for data points, such as `1min`, `5min`, `1day`, etc. This is required.\n- **series_type_1 & series_type_2**: Define the price types (e.g., `open`, `close`) used for the correlation calculation.\n- **time_period**: The number of periods over which to average, ranging from 1 to 800.\n- **outputsize**: Determines the number of data points to retrieve, with a range from 1 to 5000.\n- **start_date & end_date**: Specify the date range for the data.\n- **timezone**: Determines the timezone for the output datetime, defaulting to the exchange's local time.\n\n### Output:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, such as the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a datetime and correlation value.\n- **status**: Indicates the success of the request.\n\n### Example Questions:\n1. How can I find the correlation between the opening and closing prices of Apple stock over the past month?\n2. What is the correlation coefficient for EUR/USD and GBP/USD on a daily interval?\n3. Can I get the correlation data for Tesla stock with a 5-minute interval over the last week?",
  "GetCountries": "The `/countries` endpoint provides a list of countries available through the Twelve Data API. When you make a GET request to this endpoint, it returns an array of country details, including each country's ISO codes (both two-letter and three-letter), numeric code, full and official names, capital city, and currency. This endpoint does not require any input parameters, making it straightforward to use.\n\nThis endpoint is useful for applications that need to display or utilize country-related information, such as in dropdown menus for selecting a country or for financial applications that need to know the currency associated with a country.\n\nHere are some example questions that this endpoint could answer:\n- \"What is the capital of France?\"\n- \"Can you provide the ISO codes for Germany?\"\n- \"What currency does Japan use?\"",
  "GetCrossListings": "The `/cross_listings` endpoint provides information about cross-listed securities for a specified instrument. Cross listings refer to the same securities that are listed on different exchanges. This endpoint is useful for investors or analysts who need to understand where a particular security is traded globally.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument for which you want to retrieve cross-listing information. For example, \"NVDA\" for NVIDIA Corporation.\n- **exchange (optional):** The exchange where the instrument is traded, such as \"NASDAQ\".\n- **mic_code (optional):** The Market Identifier Code (MIC) under the ISO 10383 standard, like \"XNGS\" for NASDAQ.\n- **country (optional):** The country where the stock exchange is located, such as \"United States\".\n\n### What the Endpoint Returns:\nUpon a successful request, the endpoint returns a JSON object containing:\n- **count:** The number of cross listings found for the specified instrument.\n- **list:** An array of objects, each representing a cross listing. Each object includes details like the ticker symbol, name of the instrument, the exchange it is traded on, and the MIC code.\n\n### Usage Context:\nThis endpoint is particularly useful for financial analysts, traders, or investors who need to track where a security is listed across different exchanges. It helps in understanding the global presence and trading opportunities for a specific security.\n\n### Example Questions:\n1. \"Where is NVIDIA Corporation cross-listed?\"\n2. \"What are the cross listings for the symbol NVDA on NASDAQ?\"\n3. \"Can you show me the exchanges where a specific stock is traded globally?\"",
  "GetTimeSeriesCrsi": "The `/crsi` endpoint provides access to the Connors RSI (CRSI), a composite indicator that combines the Relative Strength Index (RSI), Rate of Change (ROC), and Up/Down Length. This endpoint is designed to offer a comprehensive view of market momentum and potential trend reversals for a specified financial instrument.\n\n### Key Input Parameters:\n- **symbol (required)**: The ticker symbol of the financial instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required)**: The time interval between data points (e.g., `1min`, `1day`).\n- **outputsize**: Number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date**: Define the date range for the data. If provided, they override the default output size.\n- **timezone**: Specifies the timezone for the datetime output, defaulting to the exchange's local time.\n- **series_type**: The price type used for the technical indicator calculation, such as `close` or `open`.\n- **rsi_period, up_down_length, percent_rank_period**: Define the number of periods for various calculations within the CRSI.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a datetime and the calculated CRSI value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to assess the momentum and potential reversals of a financial instrument over a specified period. It supports various asset classes and can be filtered by different identifiers like ISIN, FIGI, or CUSIP.\n\n### Example Questions:\n1. \"What is the Connors RSI for Apple stock over the past week with daily intervals?\"\n2. \"Can I get the CRSI values for EUR/USD for the last month using 1-hour intervals?\"\n3. \"How does the CRSI for Bitcoin look over the past day with 15-minute intervals?\"",
  "GetCryptocurrencies": "The `/cryptocurrencies` endpoint provides a list of cryptocurrencies available through the Twelve Data API. This list is updated daily and can be filtered using several query parameters. \n\nKey input parameters include:\n- `symbol`: Specifies the ticker symbol of the cryptocurrency pair you are interested in, such as \"BTC/USD\".\n- `exchange`: Allows you to filter results by a specific exchange, like \"Binance\" or \"Coinbase\".\n- `currency_base`: Filters the list by the base currency, for example, \"BTC\".\n- `currency_quote`: Filters by the quote currency, such as \"USD\".\n- `format`: Determines the format of the response, either \"JSON\" or \"CSV\".\n- `delimiter`: Specifies the separator used in the CSV format, defaulting to a semicolon.\n\nThe endpoint returns a JSON or CSV response containing an array of cryptocurrency details. Each item in the array includes the symbol of the cryptocurrency pair, a list of available exchanges, and the base and quote currencies.\n\nExample questions this endpoint could answer:\n- \"What cryptocurrencies are available on Binance?\"\n- \"Can I get a list of all cryptocurrency pairs that include Bitcoin as the base currency?\"\n- \"Which exchanges offer trading for the BTC/USD pair?\"",
  "GetCryptocurrencyExchanges": "The `/cryptocurrency_exchanges` endpoint provides a list of cryptocurrency exchanges available through the Twelve Data API. This list is updated daily, ensuring that users have access to the most current information. \n\nKey input parameters include:\n- `format`: This specifies the format of the response data. Users can choose between `JSON` (default) and `CSV`.\n- `delimiter`: This is used to specify the delimiter for the CSV format. The default delimiter is a semicolon (`;`).\n\nThe endpoint returns a response containing an array of cryptocurrency exchanges, each with details such as the exchange's name. The response also includes a status field indicating the success of the request.\n\nThis endpoint can be useful for users who need to:\n- Obtain a current list of cryptocurrency exchanges for analysis or integration.\n- Export the list of exchanges in a specific format for further processing or reporting.\n\nExample questions a user might ask that this endpoint could satisfy:\n- \"How can I get a list of all cryptocurrency exchanges available through Twelve Data?\"\n- \"Can I download the list of cryptocurrency exchanges in CSV format?\"\n- \"What are the names of the cryptocurrency exchanges supported by Twelve Data?\"",
  "GetCurrencyConversion": "The `/currency_conversion` endpoint provides real-time currency conversion for both forex and cryptocurrency pairs. By specifying a currency pair (e.g., `EUR/USD` or `BTC/ETH`) and an amount of the base currency, the endpoint returns the current exchange rate and the converted amount in the quote currency. \n\nKey input parameters include:\n- **symbol**: A required parameter representing the currency pair you wish to convert. It uses a slash (`/`) delimiter.\n- **amount**: A required parameter indicating the amount of the base currency to convert.\n- **date**: An optional parameter to specify the date and time for historical exchange rates.\n- **format**: Specifies the response format, either `JSON` (default) or `CSV`.\n- **timezone**: Determines the time zone for the output datetime, supporting `Exchange`, `UTC`, or IANA Time Zone names.\n\nThe endpoint returns a JSON object containing:\n- The requested currency symbol.\n- The real-time exchange rate.\n- The converted amount.\n- A Unix timestamp of when the rate was retrieved.\n\nThis endpoint is useful for applications needing up-to-date currency conversion data, such as financial apps or e-commerce platforms.\n\nExample questions this endpoint could answer:\n- \"What is the current exchange rate and converted amount for 100 Euros to USD?\"\n- \"How much is 0.5 Bitcoin in Ethereum right now?\"\n- \"Can I get the exchange rate for USD to JPY from last week?\"",
  "GetTimeSeriesDema": "The `/dema` endpoint provides the Double Exponential Moving Average (DEMA) for a specified financial instrument. DEMA is a technical indicator used to reduce lag and provide a more responsive moving average by giving more weight to recent price data. This can help traders identify trends and potential entry or exit points in the market.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument, such as `AAPL` for Apple or `EUR/USD` for the Euro to US Dollar exchange rate.\n- **interval** (required): The time interval for the data points, such as `1min`, `5min`, `1h`, `1day`, etc.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000. Defaults to 30 if no date parameters are set.\n- **start_date** and **end_date**: Define the time range for the data retrieval. These can be specified in a detailed format with time.\n- **exchange**, **mic_code**, **country**, **type**: Optional filters to specify the exchange, market identifier code, country, and asset class.\n- **timezone**: Determines the timezone for the output datetime, which can be set to the exchange's local time, UTC, or a specific IANA timezone.\n- **series_type**: The price type on which the DEMA is calculated, such as `close`, `open`, `high`, `low`, or `volume`.\n- **time_period**: The number of periods over which to average, with a default of 9.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a datetime and the corresponding DEMA value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"What is the Double Exponential Moving Average for Apple stock on a 1-minute interval?\"\n2. \"Can I get the DEMA for the EUR/USD currency pair over the past week?\"\n3. \"How does the DEMA for Bitcoin change when calculated on a daily basis?\"",
  "GetDirectHolders": "The `/direct_holders` endpoint provides information about the direct ownership of stocks as recorded in a company's share registry. This endpoint is useful for understanding who directly holds shares of a particular financial instrument.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument. For preferred stocks, use a dot (.) delimiter (e.g., `BRK.A` or `BRK.B`).\n- **figi:** A global identifier for the financial instrument.\n- **isin:** The International Securities Identification Number for the instrument.\n- **cusip:** The CUSIP number associated with the instrument.\n- **exchange:** The exchange where the instrument is traded.\n- **mic_code:** The Market Identifier Code for the exchange.\n- **country:** The country where the instrument is traded.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta Information:** Includes details like the ticker symbol, name of the company, currency, exchange, market identifier code, and exchange timezone.\n- **Direct Holders:** A list of entities that directly hold shares of the instrument. For each holder, it provides:\n  - The legal name of the institution.\n  - The date when the holding was reported.\n  - The number of shares owned.\n  - The total value of these shares.\n  - The percentage of the total shares outstanding that this holding represents.\n\n### Usage Context:\nThis endpoint is particularly useful for investors, analysts, or researchers interested in understanding the distribution of stock ownership and identifying major shareholders of a company.\n\n### Example Questions:\n1. \"Who are the major direct holders of Apple Inc. shares?\"\n2. \"What percentage of Tesla's shares are held by Vanguard Group?\"\n3. \"How many shares of Microsoft are directly held by institutional investors?\"",
  "GetTimeSeriesDiv": "The `/div` endpoint is designed to calculate the Division (DIV) indicator, which performs arithmetic division between two specified data series for a given financial instrument. This is typically used to combine or normalize multiple technical indicators or price data.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval for data points, such as `1min`, `1day`, `1week`, etc.\n- **series_type_1 and series_type_2:** Specify the price types (e.g., `open`, `close`) used for the division calculation.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000.\n- **start_date and end_date:** Define the date range for the data.\n- **timezone:** Determines the timezone for the output datetime.\n- **format:** The response format, either `JSON` or `CSV`.\n\n### What It Returns:\nThe endpoint returns a JSON object containing:\n- **Meta Information:** Includes details like the symbol, interval, and technical indicator specifics.\n- **Values:** An array of time series data points, each with a datetime and the calculated DIV value.\n- **Status:** Indicates the success of the request.\n\n### Usage Context:\nThis endpoint is useful for analysts and traders who need to perform technical analysis by comparing different price series of a financial instrument over time.\n\n### Example Questions:\n1. How can I calculate the division of the opening and closing prices for Apple stock every minute?\n2. What is the DIV indicator for EUR/USD using high and low prices over the past week?\n3. Can I get the division of volume and closing prices for a specific date for Tesla stock?",
  "GetDividends": "The `/dividends` endpoint provides historical dividend payment information for a specified financial instrument over the past 10+ years. To retrieve this data, you must supply the `symbol` parameter, which is the ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.). Additional optional parameters allow you to filter results by identifiers such as FIGI, ISIN, or CUSIP, specify the exchange or country, and define the time range for the data using `range`, `start_date`, and `end_date`. The `adjust` parameter indicates whether the dividend data should be adjusted.\n\nThe response includes metadata about the instrument, such as its name, currency, and exchange details, along with a list of dividends, each specifying the ex-date and payment amount.\n\nThis endpoint is useful for financial analysts, investors, or anyone interested in understanding the dividend history of a specific stock or financial instrument.\n\nExample questions this endpoint could answer:\n- \"What are the historical dividends paid by Apple Inc. over the last five years?\"\n- \"Can I get the dividend history for a stock using its ISIN?\"\n- \"What was the most recent dividend paid by a company listed on NASDAQ?\"",
  "GetDividendsCalendar": "The `/dividends_calendar` endpoint provides a calendar of dividend data for financial instruments within a specified date range. This endpoint is useful for investors or analysts looking to track upcoming or past dividend payments for specific stocks or securities.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the stock or instrument (e.g., `AAPL`). This is used to specify the particular stock for which you want dividend information.\n- **figi**: The Financial Instrument Global Identifier, which uniquely identifies the instrument.\n- **isin**: The International Securities Identification Number, another unique identifier for the instrument.\n- **cusip**: The CUSIP number, used primarily in the United States to identify securities.\n- **exchange**: The stock exchange where the instrument is traded (e.g., `NASDAQ`).\n- **mic_code**: The Market Identifier Code, which specifies the exchange under the ISO 10383 standard.\n- **country**: The country where the instrument is traded (e.g., `US`).\n- **start_date**: The beginning of the date range for the dividend data, formatted as `YYYY-MM-DD`.\n- **end_date**: The end of the date range for the dividend data, formatted as `YYYY-MM-DD`.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 500, with a default of 100 if no date parameters are set.\n- **page**: The page number for pagination purposes.\n\n### Response:\nThe endpoint returns a list of dividend details, each containing:\n- **symbol**: The ticker symbol of the instrument.\n- **mic_code**: The Market Identifier Code.\n- **exchange**: The exchange where the instrument is traded.\n- **ex_date**: The ex-dividend date, indicating when the stock starts trading without the dividend.\n- **amount**: The dividend payment amount.\n\n### Usage Examples:\n- \"What are the upcoming dividend dates for Apple stock?\"\n- \"Can I get a list of dividends for all stocks traded on NASDAQ in February 2024?\"\n- \"Show me the dividend calendar for a specific CUSIP number between January and March 2024.\"",
  "GetTimeSeriesDpo": "The `/dpo` endpoint provides the Detrended Price Oscillator (DPO) values for a specified financial instrument. The DPO is a momentum oscillator used by traders to identify cyclical patterns and overbought or oversold conditions by removing the underlying trend from price data.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval for data points (e.g., `1min`, `1day`).\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000.\n- **start_date and end_date:** Define the date range for the data.\n- **timezone:** Specifies the timezone for the output datetime.\n- **series_type:** The price type for calculating the indicator (e.g., `close`, `open`).\n- **time_period:** Number of periods to average over, from 1 to 800.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta information:** Includes details like the symbol, interval, and exchange details.\n- **Values:** An array of time series data points, each containing a datetime and the corresponding DPO value.\n- **Status:** Indicates the success of the request.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to analyze the momentum of a financial instrument without the influence of its long-term trend. It can help in identifying potential entry and exit points based on cyclical price movements.\n\n### Example Questions:\n1. How can I get the Detrended Price Oscillator values for Apple stock over the past month?\n2. What are the DPO values for EUR/USD on a 15-minute interval?\n3. Can I retrieve the DPO data for Bitcoin using a daily time period?",
  "GetTimeSeriesDx": "The `/dx` endpoint provides data on the Directional Movement Index (DX), which is a component of the Average Directional Index (ADX) used to measure the strength of positive and negative directional movements in a security's price. This endpoint is particularly useful for traders and analysts who want to assess the momentum and potential trend direction of a financial instrument.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for data points, such as `1min`, `1h`, or `1day`.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000.\n- **start_date and end_date:** Specify the date range for the data. If not set, the default is the maximum available data.\n- **timezone:** Defines the timezone for the output datetime, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** Information about the request, including the symbol, interval, and technical indicator details.\n- **values:** An array of time series data points, each with a datetime and the corresponding DX value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"How can I get the Directional Movement Index for Apple stock on a 1-minute interval?\"\n2. \"What is the DX value for EUR/USD over the past week?\"\n3. \"Can I retrieve the DX data for Bitcoin in CSV format?\"",
  "GetEarliestTimestamp": "The `/earliest_timestamp` endpoint is designed to provide the earliest available DateTime for a specified financial instrument at a given time interval. This is useful for users who need to determine the starting point of historical data for an instrument.\n\n### Key Input Parameters:\n- **symbol (required)**: The ticker symbol of the financial instrument (e.g., \"AAPL\").\n- **interval (required)**: The time interval for data points, such as \"1min\", \"1day\", or \"1month\".\n- **figi**: The Financial Instrument Global Identifier, an alternative to the symbol.\n- **isin**: The International Securities Identification Number, another identifier option.\n- **cusip**: The CUSIP number, yet another identifier for the instrument.\n- **exchange**: The exchange where the instrument is traded, like \"Nasdaq\".\n- **mic_code**: The Market Identifier Code, which specifies the trading venue.\n- **timezone**: The timezone for the output DateTime, which can be \"Exchange\", \"UTC\", or a specific IANA timezone (e.g., \"America/New_York\").\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **unix_time**: The earliest DateTime as a UNIX timestamp.\n- **datetime**: The earliest DateTime in a human-readable format, which varies based on the interval.\n\n### Usage Context:\nThis endpoint is particularly useful for analysts or developers who need to fetch the starting point of data for financial instruments to perform historical analysis or backtesting.\n\n### Example Questions:\n1. \"What is the earliest available data for Apple stock on a daily basis?\"\n2. \"When did trading data start for a specific instrument on the Nasdaq exchange?\"\n3. \"Can you tell me the first available timestamp for a stock with a specific ISIN?\"",
  "GetEarnings": "The `/earnings` endpoint provides earnings data for a specified company, including both estimated and actual earnings per share (EPS). This data is available for the entire history of the company. To use this endpoint, you must provide the company's symbol ticker as a required parameter. Additional optional parameters allow you to filter results by identifiers such as FIGI, ISIN, or CUSIP, specify the exchange or country, and define the asset class. You can also request data for specific periods or limit the number of data points returned.\n\nThe response includes metadata about the company, such as its name, symbol, and trading currency, along with a list of earnings data. Each earnings entry contains the release date, time, estimated and actual EPS, and the difference and surprise percentage between the estimate and actual figures.\n\nExample questions this endpoint can answer:\n- \"What were Apple's earnings for the last quarter?\"\n- \"Can I get the earnings history for Tesla from 2020 to 2021?\"\n- \"What is the EPS surprise percentage for Microsoft in the latest earnings report?\"",
  "GetEarningsCalendar": "The `/earnings_calendar` endpoint provides earnings data in a calendar format for a specified date range. By default, it returns earnings for the current day, but you can specify a custom period using the `start_date` and `end_date` parameters. The endpoint allows you to filter results by exchange, market identifier code (MIC), and country. You can also choose the response format as either JSON or CSV, and specify a delimiter for CSV files. Additionally, you can set the number of decimal places for numerical values.\n\nThe response includes a map of dates to earnings data, detailing each instrument's symbol, name, currency, exchange, MIC, country, and the time of earnings release. It also provides financial metrics such as estimated and actual earnings per share (EPS), the difference between them, and the percentage surprise.\n\nThis endpoint is useful for financial analysts or investors who need to track earnings announcements over a specific period or across specific markets.\n\nExample questions this endpoint could satisfy:\n- \"What are the earnings announcements for companies listed on NASDAQ for April 2024?\"\n- \"Can I get a CSV file of earnings data for US companies for the last week?\"\n- \"What was the earnings surprise for companies in the United States on April 30, 2024?\"",
  "GetEarningsEstimate": "The `/earnings_estimate` endpoint provides analysts' estimates for a company's future earnings per share (EPS) on both a quarterly and annual basis. This endpoint is useful for investors and analysts who want to assess the expected financial performance of a company based on expert predictions.\n\n### Key Input Parameters:\n- **symbol**: This is a required parameter. It specifies the stock ticker symbol of the company for which you want to retrieve earnings estimates, such as \"AAPL\" for Apple Inc.\n- **figi**: An optional parameter representing the Financial Instrument Global Identifier, which uniquely identifies the instrument.\n- **isin**: An optional parameter for the International Securities Identification Number, another unique identifier for securities.\n- **cusip**: An optional parameter for the Committee on Uniform Securities Identification Procedures number, used mainly in the United States.\n- **country**: An optional parameter to specify the country where the instrument is traded.\n- **exchange**: An optional parameter to specify the exchange where the instrument is traded, such as \"NASDAQ\".\n\n### What the Endpoint Returns:\nThe response includes:\n- **Meta Information**: Details about the company, such as its name, currency, exchange, and type of instrument.\n- **Earnings Estimates**: A list of earnings estimates that includes the date of the estimate, the period it covers (e.g., current quarter, next year), the number of analysts contributing to the estimate, and the average, low, and high estimates.\n- **Status**: The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"What are the expected earnings per share for Apple Inc. in the next quarter?\"\n2. \"How many analysts have provided earnings estimates for a specific company listed on NASDAQ?\"\n3. \"Can I get the earnings estimates for a company using its ISIN?\"",
  "GetEdgarFilingsArchive": "The \"/edgar_filings/archive\" endpoint provides access to both real-time and historical filings, forms, and exhibits from the SEC's EDGAR system. This endpoint is useful for retrieving detailed information about a company's filings based on various filters.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the company for which you want to retrieve filings.\n- **figi**: A global identifier for the financial instrument.\n- **isin**: The International Securities Identification Number.\n- **cusip**: A unique identifier for the financial instrument.\n- **exchange**: The name of the exchange where the company is listed.\n- **mic_code**: The Market Identifier Code, following the ISO 10383 standard.\n- **country**: The country name or code to filter results.\n- **form_type**: The type of form or filing, such as \"8-K\".\n- **filled_from** and **filled_to**: Date range for when the filings were submitted.\n- **page** and **page_size**: Pagination controls for the number of records returned.\n\n### What It Returns:\nThe response includes metadata about the company, such as its symbol, exchange, and type of stock. It also provides a list of filings, each containing details like the CIK code, filing date, form type, and URLs to the filing documents.\n\n### Usage Context:\nThis endpoint is particularly useful for investors, analysts, or researchers who need to access detailed filing information for specific companies or financial instruments. It allows for filtering by various identifiers and timeframes, making it versatile for different research needs.\n\n### Example Questions:\n1. \"How can I find the latest SEC filings for Apple?\"\n2. \"What are the 8-K forms filed by companies listed on NASDAQ?\"\n3. \"Can I get a list of filings for a company using its ISIN?\"",
  "GetTimeSeriesEma": "The `/ema` endpoint provides the Exponential Moving Average (EMA) for a specified financial instrument. This is a technical analysis tool that gives more weight to recent price data, helping traders identify trends and potential entry or exit points.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for the data points, which can range from `1min` to `1month`.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the time range for the data. Dates can be specified in formats like `2006-01-02` or `2006-01-02 15:04:05`.\n- **series_type:** The price type used for the EMA calculation, such as `close`, `open`, `high`, `low`, or `volume`.\n- **time_period:** The number of periods over which the EMA is calculated, defaulting to 9.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** Information about the request, including the symbol, interval, and other metadata.\n- **values:** An array of time series data points, each with a datetime and the corresponding EMA value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to calculate the EMA for various financial instruments to make informed trading decisions. It supports a wide range of instruments, including stocks, forex, and cryptocurrencies.\n\n### Example Questions:\n1. \"What is the 9-period EMA for Apple Inc. on a 1-minute interval?\"\n2. \"Can I get the EMA for EUR/USD over the past week with 5-minute intervals?\"\n3. \"How does the EMA for Bitcoin compare over the last month using daily data?\"",
  "GetEod": "The \"/eod\" endpoint provides the latest End of Day (EOD) price for a specified financial instrument. To use this endpoint, you must provide the symbol ticker of the instrument as a required parameter. You can also filter results using other identifiers such as FIGI, ISIN, or CUSIP, and specify additional filters like the exchange, market identifier code (MIC), country, and asset class type. Optionally, you can request data for a specific date, include pre and post-market data (for Pro plans), and set the number of decimal places for floating values.\n\nWhen you query this endpoint, it returns a JSON object containing details such as the symbol, exchange, MIC code, currency, the datetime of the data, and the most recent EOD close price.\n\nThis endpoint is useful for questions like:\n- \"What was the end-of-day price for Apple Inc. on NASDAQ?\"\n- \"Can I get the EOD price for a specific date for a stock traded in the United States?\"\n- \"How can I find the closing price of an ETF with a specific ISIN?\"",
  "GetEpsRevisions": "The `/eps_revisions` endpoint provides information about analysts' revisions of a company's future earnings per share (EPS) estimates. Specifically, it returns data on how these estimates have changed over the past week and month for both quarterly and annual periods. This endpoint is useful for investors or analysts looking to track changes in EPS expectations for a particular company.\n\nKey input parameters include:\n- **symbol**: The stock ticker symbol of the company, which is required to identify the specific company for which EPS revisions are being requested.\n- **figi**: An optional parameter to filter by the Financial Instrument Global Identifier.\n- **isin**: An optional parameter to filter by the International Securities Identification Number.\n- **cusip**: An optional parameter to filter by the Committee on Uniform Securities Identification Procedures number.\n- **country**: An optional parameter to filter by the country name or code.\n- **exchange**: An optional parameter to filter by the exchange name.\n\nThe response includes:\n- **meta**: Metadata about the company, such as its symbol, name, currency, exchange, and type of instrument.\n- **eps_revision**: An array containing EPS revision data, including the date of the estimate, the period (e.g., current quarter, next year), and the number of upward and downward revisions over the last week and month.\n- **status**: The status of the response, typically \"ok\" if successful.\n\nThis endpoint can be particularly useful for questions like:\n- \"How have analysts changed their EPS estimates for Apple over the last month?\"\n- \"What are the recent EPS revisions for a company listed on NASDAQ?\"\n- \"Can I see the EPS revisions for a company identified by its ISIN?\"",
  "GetEpsTrend": "The `/eps_trend` endpoint provides historical trends of estimated Earnings Per Share (EPS) for a specified financial instrument. This endpoint is useful for analyzing how EPS estimates have changed over time for a particular stock or financial instrument.\n\n### Key Input Parameters:\n- **symbol** (required): The stock ticker symbol of the company you are interested in, such as \"AAPL\" for Apple Inc.\n- **figi**: The Financial Instrument Global Identifier, a unique identifier for the financial instrument.\n- **isin**: The International Securities Identification Number, another unique identifier for the financial instrument.\n- **cusip**: The Committee on Uniform Securities Identification Procedures number, a unique identifier for U.S. and Canadian securities.\n- **country**: The country name or code where the instrument is traded, e.g., \"United States\" or \"US\".\n- **exchange**: The name of the exchange where the instrument is listed, such as \"NASDAQ\".\n\n### What the Endpoint Returns:\nThe response includes:\n- **Meta Information**: Details about the instrument, including its name, symbol, currency, exchange, and type.\n- **EPS Trend Data**: An array of EPS estimates over different periods, such as the current quarter, next quarter, current year, or next year. It includes the current estimate and estimates from 7, 30, 60, and 90 days ago.\n- **Status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for investors and analysts who want to track changes in EPS estimates over time to make informed decisions about buying or selling stocks.\n\n### Example Questions:\n- \"What are the recent EPS estimate trends for Apple Inc.?\"\n- \"How have the EPS estimates for a company listed on NASDAQ changed over the past 90 days?\"\n- \"Can you provide the EPS trend for a company identified by its ISIN?\"",
  "GetEtf": "The `/etfs` endpoint allows users to retrieve a list of Exchange-Traded Funds (ETFs) available through the Twelve Data API. This list is updated daily, ensuring that users have access to the most current information.\n\nKey input parameters include:\n\n- **symbol**: The ticker symbol of the ETF you want to query, such as \"SPY\".\n- **figi**: A filter using the Financial Instrument Global Identifier (FIGI) for precise identification.\n- **isin**: The International Securities Identification Number (ISIN) to filter ETFs.\n- **cusip**: The CUSIP number, a unique identifier for financial securities.\n- **exchange**: The name of the exchange where the ETF is traded, for example, \"NYSE\".\n- **country**: You can filter ETFs by the country name or its alpha code (e.g., \"United States\").\n- **format**: Choose the response format, either JSON or CSV.\n- **show_plan**: A boolean parameter to include information about the availability of the ETF under different plans.\n- **include_delisted**: A boolean option to include ETFs that have been delisted.\n\nThe endpoint returns a JSON array containing detailed information about each ETF, including its symbol, name, currency, exchange, country, and various identifiers like FIGI and ISIN. Additionally, if requested, it can provide details about the access level for the ETF.\n\nUsers might ask questions like:\n- \"What are the available ETFs on the NYSE?\"\n- \"Can you give me a list of ETFs with the ticker symbol SPY?\"\n- \"What ETFs are available in the United States?\"",
  "GetETFsFamily": "The `/etfs/family` endpoint allows users to retrieve a list of exchange-traded fund (ETF) families, which are groups of ETFs managed by specific investment companies. This API can be particularly useful for investors or analysts looking to explore ETFs by country or by the managing fund family.\n\nTo use this endpoint, you can specify two key input parameters:\n\n1. **country**: This parameter allows you to filter the ETF families by a specific country, using either the full country name (e.g., \"United States\") or its alpha code (e.g., \"US\").\n2. **fund_family**: This parameter lets you filter the results based on the investment company that manages the ETFs, such as \"iShares\".\n\nWhen you make a request to this endpoint, it returns a JSON response that includes a status message and a list of ETF families categorized by country. For example, the response might show that in the United States, there are several fund managers like \"Aegon Asset Management UK PLC\" and \"Aviva SpA\".\n\nHere are a few natural-language questions that this endpoint could help answer:\n- \"What are the ETF families available in the United States?\"\n- \"Can you list the ETFs managed by iShares in India?\"\n- \"Which investment companies manage ETFs in Canada?\"",
  "GetETFsList": "The `/etfs/list` endpoint provides a comprehensive list of exchange-traded funds (ETFs) available through Twelve Data. This list is sorted in descending order based on the total assets value and is updated daily, ensuring users have access to the most current information.\n\nKey input parameters for this endpoint include:\n\n- **symbol**: Filter the results by the ETF's ticker symbol (e.g., \"IVV\").\n- **figi**: Filter by the financial instrument global identifier (e.g., \"BBG000BVZ697\").\n- **isin**: Filter by the international securities identification number (e.g., \"US4642872000\").\n- **cusip**: Specify the CUSIP of the instrument (e.g., \"464287200\").\n- **country**: Filter by the country name or its alpha code (e.g., \"United States\").\n- **fund_family**: Filter by the investment company managing the fund (e.g., \"iShares\").\n- **fund_type**: Filter by the type of fund (e.g., \"Large Blend\").\n- **page**: Specify the page number for pagination (default is 1).\n- **outputsize**: Define the number of records to return in the response (default is 50).\n\nThe response will include a status indicating the success of the request and a list of ETFs that match the specified filters. Each ETF entry contains details such as the symbol, full name, country of incorporation, market identifier code, fund family, and fund type.\n\nUsers might ask questions like:\n- \"Can you show me a list of ETFs managed by iShares?\"\n- \"What are the available ETFs in the United States?\"\n- \"How can I find ETFs with the symbol IVV?\"",
  "GetETFsType": "This API endpoint retrieves a list of types of exchange-traded funds (ETFs). Users can filter the results based on the country or the specific type of fund they are interested in.\n\nKey input parameters include:\n- **country**: This parameter allows users to specify a country name (like \"United States\") or its alpha code (such as \"US\") to filter the ETF types relevant to that country.\n- **fund_type**: This parameter enables users to filter the ETFs by their specific type, such as \"Large Blend\" or any other fund classification.\n\nThe endpoint returns a JSON object containing:\n- A **status** field indicating the success of the request (e.g., \"ok\").\n- A **result** field, which is an object mapping country names to arrays of ETF types available in those countries. For example, it might list various fund types available in the United States or Singapore.\n\nThis endpoint is useful for users looking to explore different ETFs based on geographical or categorical criteria. \n\nHere are a few natural-language questions that this endpoint could help answer:\n- \"What types of ETFs are available in the United States?\"\n- \"Can you show me the ETF types for Singapore?\"\n- \"What are the different fund types I can invest in from Canada?\"",
  "GetETFsWorld": "This API endpoint retrieves comprehensive data about a specific exchange-traded fund (ETF), including its summary, performance metrics, risk analysis, and composition details. \n\nTo use this endpoint, you need to provide the ETF's symbol as a required query parameter. Additionally, you can filter the results using optional parameters such as the financial instrument global identifier (FIGI), international securities identification number (ISIN), CUSIP, and the country of the ETF. You can also specify the number of decimal places for the returned floating values.\n\nUpon a successful request, the endpoint returns a detailed JSON object containing various aspects of the ETF, including a brief summary (like its name, fund family, and last price), performance data (such as year-to-date returns and trailing returns), risk metrics (including volatility measures and Sharpe ratio), and composition information (like major market sectors and top holdings).\n\nHere are a few natural-language questions a user might ask that this endpoint could satisfy:\n- \"What is the performance and risk profile of the IVV ETF?\"\n- \"Can you provide the composition details of the ETF with the ISIN US4642872000?\"\n- \"What are the top holdings and sector allocations for the ETF symbol AAPL?\"",
  "GetETFsWorldComposition": "This API endpoint allows users to retrieve detailed information about the composition of a specific exchange-traded fund (ETF). By providing the ETF's symbol, users can obtain insights into its portfolio, including the breakdown of holdings by sectors, countries, and asset classes, as well as the top holdings and bond characteristics.\n\nKey input parameters include:\n- **symbol** (required): The ticker symbol of the ETF (e.g., \"IVV\"), which identifies the specific fund for which the composition data is requested.\n- **figi**: An optional parameter to filter by the financial instrument global identifier.\n- **isin**: An optional parameter to filter by the international securities identification number.\n- **cusip**: An optional parameter to filter by the CUSIP of the instrument.\n- **country**: An optional parameter to filter the results by a specific country name or code (e.g., \"United States\").\n- **dp**: An optional parameter to specify the number of decimal places for floating values, with a default of 5.\n\nThe endpoint returns a comprehensive JSON response that includes:\n- The ETF's composition, detailing major market sectors and their weights, country allocations, asset allocations, top holdings, and a breakdown of bond characteristics, including average maturity and credit quality.\n- A status message indicating the success of the request.\n\nUsers might ask questions such as:\n- \"What is the sector breakdown of the IVV ETF?\"\n- \"Can you show me the top holdings in the SPY ETF?\"\n- \"How is the asset allocation distributed in the VTI ETF?\"",
  "GetETFsWorldPerformance": "This API endpoint retrieves detailed performance data for a specified exchange-traded fund (ETF). Users can obtain information about trailing and annual returns, which provide insights into the fund's performance over various time periods.\n\nTo use this endpoint, the key input parameter is the `symbol`, which is the ticker symbol of the ETF you want to analyze (e.g., \"IVV\"). Additionally, you can filter results using other optional parameters such as `figi` (Financial Instrument Global Identifier), `isin` (International Securities Identification Number), `cusip` (a unique identifier for securities), and `country` (to specify the country of the ETF). The `dp` parameter allows you to set the number of decimal places for the returned floating values, with a default of 5.\n\nUpon successful retrieval, the endpoint returns a JSON object that includes the ETF's performance data, detailing both trailing returns (showing performance over specific periods) and annual total returns (showing performance for each calendar year), along with a status message indicating the success of the request.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the performance of the ETF with the symbol IVV?\"\n- \"Can you provide the annual returns for the ETF identified by the ISIN US4642872000?\"\n- \"How has the ETF with the CUSIP 464287200 performed compared to its category?\"",
  "GetETFsWorldRisk": "The `/etfs/world/risk` endpoint provides essential metrics to evaluate the risk associated with investing in a specific exchange-traded fund (ETF). By making a GET request to this endpoint, users can obtain detailed risk metrics and valuation ratios for a chosen ETF.\n\nTo use this endpoint, you need to provide at least one of the following parameters:\n- **symbol**: The ticker symbol of the ETF (e.g., \"IVV\").\n- **figi**: The Financial Instrument Global Identifier for the ETF.\n- **isin**: The International Securities Identification Number for the ETF.\n- **cusip**: The CUSIP identifier for the ETF.\n- **country**: The name or alpha code of the country associated with the ETF.\n- **dp**: An optional parameter to specify the number of decimal places for the returned floating values, with a default of 5.\n\nUpon a successful request, the endpoint returns a JSON object containing the ETF's risk metrics, including volatility measures (like alpha, beta, and standard deviation), and valuation metrics (such as price-to-earnings and price-to-book ratios). The response also indicates the status of the request.\n\nHere are a few example questions that this endpoint can help answer:\n- \"What are the risk metrics for the ETF with the ticker symbol IVV?\"\n- \"Can you provide the volatility measures for the ETF identified by its ISIN US4642872000?\"\n- \"What is the price-to-earnings ratio for the ETF from the United States?\"",
  "GetETFsWorldSummary": "This API endpoint provides a summary of a specific exchange-traded fund (ETF) based on various identification parameters. To use this endpoint, you must provide at least one of the following identifiers: the ETF's symbol (e.g., \"IVV\"), its FIGI (Financial Instrument Global Identifier), ISIN (International Securities Identification Number), or CUSIP (Committee on Uniform Securities Identification Procedures). Additionally, you can filter results by country name or code, and specify the number of decimal places for the returned floating values.\n\nWhen you successfully call this endpoint, it returns a JSON object containing detailed information about the ETF, including its name, fund family, fund type, currency, inception date, year-to-date return, expense ratio, yield, net asset value (NAV), last price, turnover rate, net assets, and a brief overview of the fund's investment strategy.\n\nHere are some example questions a user might ask that this endpoint can answer:\n- \"What is the summary of the ETF with the symbol IVV?\"\n- \"Can you provide details about the ETF identified by the ISIN US4642872000?\"\n- \"What information do you have on ETFs from the United States?\"",
  "GetExchangeRate": "The `/exchange_rate` endpoint provides real-time exchange rates for specified currency pairs, which can include both traditional forex and cryptocurrencies. To use this endpoint, you need to specify the currency pair you are interested in through the `symbol` parameter, formatted as `BASE/QUOTE` (for example, `EUR/USD` or `BTC/ETH`).\n\nYou can also request historical exchange rates by providing a `date` parameter in the format `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`, which allows you to specify the exact time for the rate you want. The output format can be adjusted using the `format` parameter, which accepts either `JSON` (default) or `CSV`. If you choose CSV, you can customize the `delimiter` used in the file. Additionally, you can specify the number of decimal places for the returned rate with the `dp` parameter, and the `timezone` parameter allows you to set the timezone for the output datetime, supporting various options including local exchange time and specific IANA timezone names.\n\nWhen you make a successful request, the endpoint returns a JSON object containing the requested currency pair (`symbol`), the current exchange rate (`rate`), and a Unix timestamp (`timestamp`) indicating when the rate was retrieved.\n\nHere are some example questions a user might ask that this endpoint can answer:\n- \"What is the current exchange rate for EUR to USD?\"\n- \"Can I get the exchange rate for BTC to ETH from last week?\"\n- \"How do I retrieve the exchange rate in CSV format with a custom delimiter?\"",
  "GetExchangeSchedule": "The `/exchange_schedule` endpoint provides details about various stock exchanges, including their trading hours. Users can retrieve information about specific exchanges by filtering based on the exchange name, market identifier code (MIC), or the country in which the exchange operates. \n\nKey input parameters include:\n- **mic_name**: A string to filter results by the official name of the exchange (e.g., \"NASDAQ\").\n- **mic_code**: A string representing the market identifier code (e.g., \"XNGS\") to specify the exchange.\n- **country**: A string to filter by the country name or its alpha code (e.g., \"United States\").\n- **date**: A string that can be a specific date (e.g., \"2021-10-27\"), a keyword like \"today\" or \"yesterday,\" or a full datetime string in UTC. This parameter determines whether the schedule for a specific date or the default schedule is returned.\n\nThe endpoint returns a JSON object containing an array of exchange schedule details, including the official name, exchange name, MIC, country, time zone, and trading sessions with their opening and closing times.\n\nUsers might ask:\n- \"What are the trading hours for the NASDAQ exchange today?\"\n- \"Can you provide the schedule for the XNGS exchange in the United States?\"\n- \"What is the trading schedule for yesterday for the London Stock Exchange?\"",
  "GetExchanges": "The `/exchanges` endpoint allows users to retrieve a list of stock or ETF exchanges available through the Twelve Data API. This list is updated daily, ensuring that users have access to the most current information.\n\nKey input parameters include:\n- **type**: Specifies the asset class (e.g., \"ETF\", \"Common Stock\") to filter the exchanges by the type of instruments they support.\n- **name**: Filters the results by the name of the exchange (e.g., \"NASDAQ\").\n- **code**: Allows filtering by the market identifier code (MIC), which is a standardized code for exchanges (e.g., \"XNGS\").\n- **country**: Filters exchanges based on the country name or its alpha code (e.g., \"United States\" or \"US\").\n- **format**: Determines the response format, with options for \"JSON\" or \"CSV\".\n- **delimiter**: Specifies the separator used in the CSV response data, defaulting to a semicolon.\n- **show_plan**: A boolean parameter that, when set to true, adds information about the plan under which the symbol is available.\n\nThe endpoint returns a structured response containing an array of exchanges, each with details such as the exchange's title, name, code, country, timezone, and access information if requested.\n\nUsers might ask questions like:\n- \"What stock exchanges are available for ETFs?\"\n- \"Can you list the exchanges in the United States?\"\n- \"What is the market identifier code for NASDAQ?\"",
  "GetTimeSeriesExp": "The `/exp` endpoint is designed to calculate the exponential value of a specified financial instrument over a defined time series. This indicator is particularly useful in advanced mathematical analysis and financial market calculations.\n\nTo use this endpoint, you need to provide several key parameters:\n\n1. **symbol** (required): The ticker symbol of the instrument you are interested in, such as `AAPL` for Apple or `EUR/USD` for currency pairs.\n2. **interval** (required): The time interval between data points, which can range from `1min` to `1month`.\n3. **outputsize**: Specifies how many data points to retrieve, with a maximum of 5000.\n4. **start_date** and **end_date**: Optional parameters to define the time range for the data you want to retrieve.\n5. **series_type**: Indicates the price type (e.g., `close`, `open`) on which the exponential calculation is based.\n\nThe endpoint returns a JSON object containing the calculated exponential values for the specified instrument, along with metadata about the request, including the symbol, interval, and exchange details.\n\nHere are a few example questions a user might ask that this endpoint can answer:\n- \"What is the exponential value for AAPL over the last week?\"\n- \"Can you provide the exponential indicator for EUR/USD at a 15-minute interval?\"\n- \"How does the exponential value for Bitcoin compare over the last month?\"",
  "GetTimeSeriesFloor": "The `/floor` endpoint is designed to calculate the FLOOR indicator, which rounds input data down to the nearest integer. This is commonly used in financial data analysis to derive insights from time series data related to various instruments.\n\nTo use this endpoint, you need to provide several key parameters:\n\n1. **symbol** (required): The ticker symbol of the instrument you want to analyze, such as `AAPL` for Apple Inc.\n2. **interval** (required): Specifies the time interval between data points, with options like `1min`, `5min`, or `1day`.\n3. **outputsize**: Defines how many data points to retrieve, ranging from 1 to 5000, with a default of 30 if no date parameters are set.\n4. **start_date** and **end_date**: These parameters allow you to specify a date range for the data you want to retrieve.\n5. **timezone**: Indicates the timezone for the output datetime, which can be set to local exchange time or UTC.\n\nThe endpoint returns a JSON response that includes metadata about the request, such as the symbol, interval, and exchange information, along with an array of time series data points. Each data point contains a datetime and the corresponding floor value.\n\nHere are a few examples of questions a user might ask that this endpoint can help answer:\n- \"What is the floor value for Apple stock over the last week?\"\n- \"Can you show me the floor values for EUR/USD in 15-minute intervals?\"\n- \"What are the floor values for Bitcoin against USD for the past month?\"",
  "GetForexPairs": "The `/forex_pairs` endpoint provides a list of available forex pairs from the Twelve Data API, which is updated daily. This API call allows users to retrieve information about currency pairs, including their base and quote currencies.\n\nKey input parameters include:\n- **symbol**: Specifies the ticker symbol of the forex pair (e.g., \"EUR/USD\").\n- **currency_base**: Filters the results by the base currency (e.g., \"EUR\").\n- **currency_quote**: Filters the results by the quote currency (e.g., \"USD\").\n- **format**: Determines the response format, which can be either JSON or CSV, with JSON as the default.\n- **delimiter**: Specifies the separator used in the CSV response, defaulting to a semicolon.\n\nThe endpoint returns a structured response containing a list of forex pairs, each with details such as the pair's symbol, the currency group it belongs to (e.g., Major, Minor), the base currency, and the quote currency. The response also includes a status message indicating the success of the request.\n\nUsers might ask questions like:\n- \"What forex pairs are available for trading?\"\n- \"Can I get a list of forex pairs that include EUR as the base currency?\"\n- \"How can I retrieve forex pair data in CSV format?\"",
  "GetFundHolders": "The `/fund_holders` endpoint is designed to provide information about the amount of a company's available stock that is owned by mutual fund holders. By querying this endpoint, users can retrieve a list of fund holders for a specific financial instrument, along with details such as the number of shares they own and the total value of those shares.\n\nTo use this endpoint, you must provide at least one of the following parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., \"AAPL\" for Apple Inc.).\n- **figi**: The financial instrument global identifier (FIGI).\n- **isin**: The international securities identification number (ISIN).\n- **cusip**: The CUSIP of the instrument.\n- **exchange**: The exchange where the instrument is traded (e.g., \"NASDAQ\").\n- **mic_code**: The Market Identifier Code (MIC).\n- **country**: The country where the instrument is traded (e.g., \"United States\").\n\nThe response includes metadata about the financial instrument, such as its name, currency, and exchange details, along with a list of fund holders. Each fund holder entry provides the institution's name, the date reported, the number of shares owned, the total value of those shares, and the percentage of shares outstanding that the institution holds.\n\nHere are a few questions a user might ask that this endpoint could answer:\n- \"How many shares of Apple Inc. are held by mutual funds?\"\n- \"What is the total value of shares owned by Vanguard Group for a specific stock?\"\n- \"Can you provide the list of fund holders for the stock with the ticker symbol AAPL?\"",
  "GetFunds": "The `/funds` endpoint allows users to retrieve a comprehensive list of available funds from the Twelve Data API. This list is updated daily, ensuring that users have access to the most current information.\n\nKey input parameters include:\n\n- **symbol**: The ticker symbol of the fund you are interested in (e.g., \"FXAIX\").\n- **figi**: A filter for the financial instrument global identifier (e.g., \"BBG000BHTMY7\").\n- **isin**: The international securities identification number for the fund (e.g., \"US0378331005\").\n- **cusip**: The unique identifier for financial securities (e.g., \"594918104\").\n- **exchange**: The name of the exchange where the fund is traded (e.g., \"Nasdaq\").\n- **country**: The country name or code where the fund is located (e.g., \"United States\").\n- **format**: The desired format of the response data, either JSON or CSV.\n- **delimiter**: The separator used in the CSV response, defaulting to a semicolon.\n- **show_plan**: A boolean indicating whether to include information about the access plan for the symbol.\n- **page**: The page number for paginated results, defaulting to 1.\n- **outputsize**: The number of data points to be returned, with a default of 5000.\n\nThe endpoint returns a JSON object containing a list of funds, each with details such as the fund's symbol, name, country, currency, exchange, and various identifiers (FIGI, ISIN, CUSIP). Additionally, it provides a status indicating the success of the request.\n\nUsers might ask questions like:\n- \"What funds are available on the Nasdaq exchange?\"\n- \"Can you show me the details of the fund with the ticker FXAIX?\"\n- \"How many funds are listed in the United States?\"",
  "GetGrowthEstimates": "The `/growth_estimates` endpoint provides users with consensus analyst estimates for a company's growth rates over various time periods. By averaging projections from multiple analysts, this API helps users understand expected growth in areas such as earnings per share and revenue.\n\nTo use this endpoint, you need to specify at least one of the following parameters:\n- **symbol**: The stock ticker symbol of the company (e.g., \"AAPL\" for Apple Inc.).\n- **figi**: The Financial Instrument Global Identifier for the instrument.\n- **isin**: The International Securities Identification Number for the instrument.\n- **cusip**: The CUSIP identifier for the instrument.\n- **country**: The country where the instrument is traded (e.g., \"United States\").\n- **exchange**: The exchange on which the instrument is listed (e.g., \"NASDAQ\").\n\nUpon a successful request, the endpoint returns a JSON object containing:\n- **meta**: Information about the instrument, including its symbol, name, currency, and exchange details.\n- **growth_estimates**: Projected growth figures for the current and next quarters, the current year, the next year, and the next five years, along with the actual growth over the past five years.\n- **status**: The status of the request, indicating whether it was successful.\n\nThis endpoint is useful for investors and analysts looking to gauge a company's future performance based on expert estimates.\n\nHere are a few questions a user might ask that this endpoint can answer:\n- \"What are the growth estimates for Apple Inc. for the next year?\"\n- \"Can you provide the projected growth rates for a company traded on NASDAQ?\"\n- \"What is the past growth rate for a company with the CUSIP 594918104?\"",
  "GetTimeSeriesHeikinashiCandles": "The `/heikinashicandles` endpoint retrieves Heikin Ashi candle data, which is a type of chart used in technical analysis to smooth price data and highlight trends. This endpoint allows users to specify various parameters to customize their data request.\n\nKey input parameters include:\n\n- **symbol** (required): The ticker symbol of the instrument you want to analyze, such as `AAPL` for Apple or `EUR/USD` for the Euro to US Dollar exchange rate.\n- **interval** (required): The time interval between data points, with options ranging from `1min` to `1month`.\n- **outputsize**: The number of data points to return, with a maximum of 5000.\n- **start_date** and **end_date**: Optional parameters to specify the date range for the data.\n- **timezone**: Determines the timezone for the output datetime, which can be set to local exchange time or UTC.\n- **format**: The desired response format, either `JSON` or `CSV`.\n\nThe endpoint returns a JSON object containing metadata about the request and an array of time series data points. Each data point includes the datetime, Heikin Ashi high, open, close, and low values.\n\nThis endpoint is useful for traders and analysts looking to visualize and analyze price trends using Heikin Ashi candles.\n\nExample questions a user might ask include:\n- \"Can you show me the Heikin Ashi candles for AAPL over the last week?\"\n- \"What are the Heikin Ashi values for EUR/USD at 15-minute intervals?\"\n- \"I need the Heikin Ashi data for Bitcoin, can you provide it in CSV format?\"",
  "GetTimeSeriesHlc3": "The HLC3 endpoint provides access to the High, Low, Close Average (HLC3) indicator, which calculates the average of a security's high, low, and close prices. This indicator offers a simplified view of price action, making it useful for traders and analysts.\n\nTo use this endpoint, you need to provide the following key parameters:\n- **symbol** (required): The ticker symbol of the instrument you want to analyze, such as \"AAPL\" for Apple Inc.\n- **interval** (required): The time interval for the data points, with options like \"1min\", \"5min\", or \"1day\".\n- **outputsize**: Specifies the number of data points to retrieve, with a default of 30.\n- **start_date** and **end_date**: Optional parameters to define the time range for the data.\n- **timezone**: Indicates the timezone for the output datetime, which can be set to local exchange time or UTC.\n\nThe endpoint returns a JSON response that includes:\n- **meta**: General information about the request, including the symbol, interval, currency, and exchange details.\n- **values**: An array of time series data points, each containing the datetime and the calculated HLC3 value.\n- **status**: Indicates the response status, typically \"ok\".\n\nThis endpoint is particularly useful for users looking to analyze historical price data or track the performance of specific securities over time.\n\nHere are some example questions a user might ask:\n- \"What is the HLC3 value for AAPL over the last week?\"\n- \"Can I get the HLC3 indicator for EUR/USD at a 15-minute interval?\"\n- \"What was the average price action for Bitcoin on August 22, 2024?\"",
  "GetTimeSeriesHtDcPeriod": "The **HT_DCPERIOD** endpoint is designed to help traders identify the dominant cycle length in market data using the Hilbert Transform Dominant Cycle Period indicator. This information is crucial for adapting trading strategies to varying market conditions.\n\nTo use this endpoint, you need to provide several key parameters:\n\n1. **symbol** (required): The ticker symbol of the financial instrument you are interested in, such as `AAPL` for Apple or `EUR/USD` for currency pairs.\n2. **interval** (required): The time interval for the data points you want to retrieve, with options ranging from `1min` to `1month`.\n3. **outputsize**: Specifies the number of data points to return, with a maximum of 5000.\n4. **start_date** and **end_date**: Optional parameters to define a specific date range for the data.\n5. **timezone**: Determines the timezone for the output datetime, which can be set to local exchange time or UTC.\n\nThe endpoint returns a JSON object containing the requested time series data, including the dominant cycle period values and associated metadata such as the instrument's ticker, exchange information, and the time interval used.\n\nHere are a few example questions that a user might ask this endpoint:\n- \"What is the dominant cycle period for AAPL over the last month?\"\n- \"Can you provide the HT_DCPERIOD for EUR/USD at a 15-minute interval?\"\n- \"What is the cycle length for Bitcoin trading on the weekend?\" \n\nThis endpoint is particularly useful for traders looking to analyze market cycles and adjust their strategies accordingly.",
  "GetTimeSeriesHtDcPhase": "The HT_DCPHASE endpoint provides traders with the current phase of the dominant market cycle using the Hilbert Transform Dominant Cycle Phase (HT_DCPHASE) indicator. This information is crucial for identifying potential entry and exit points in trading strategies.\n\nTo use this endpoint, you need to provide the following key parameters:\n- **symbol** (required): The ticker symbol of the instrument you want to analyze, such as `AAPL` for Apple or `EUR/USD` for currency pairs.\n- **interval** (required): The time interval for the data points, with options like `1min`, `5min`, or `1day`.\n- **outputsize**: Specifies how many data points to retrieve, ranging from 1 to 5000, with a default of 30 if no date parameters are set.\n\nAdditional optional parameters include filters like **isin** (for international securities identification), **figi** (Financial Instrument Global Identifier), and **cusip** (Committee on Uniform Securities Identification Procedures), as well as parameters for time zone, date range, and sorting order.\n\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, currency, exchange, and type of asset.\n- **values**: An array of time series data points, each with a timestamp and the corresponding HT_DCPHASE value.\n- **status**: The response status indicating whether the request was successful.\n\nHere are some questions a user might ask that this endpoint could answer:\n- \"What is the current phase of the dominant market cycle for AAPL?\"\n- \"Can you provide the HT_DCPHASE values for EUR/USD over the last week?\"\n- \"What is the dominant cycle phase for Bitcoin trading on a 1-hour interval?\"",
  "GetTimeSeriesHtPhasor": "The **HT_PHASOR** endpoint allows users to decompose a price series of a financial instrument into its in-phase and quadrature components using the Hilbert Transform Phasor technique. This analysis provides valuable insights into cyclical patterns and trend directions of the instrument's price movements.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval** (required): The time interval between data points, such as `1min`, `5min`, or `1day`.\n- **outputsize**: Specifies the number of data points to retrieve, ranging from `1` to `5000`, with a default of `30`.\n- **start_date** and **end_date**: Define the time range for the data retrieval.\n- **timezone**: Indicates the timezone for the output datetime, which can be set to local exchange time or UTC.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the instrument's symbol, interval, currency, and exchange details.\n- **values**: An array of time series data points, each including the datetime, in-phase value, and quadrature value.\n- **status**: Indicates the success of the request.\n\n### Example User Questions:\n- \"What are the in-phase and quadrature components for AAPL over the last week?\"\n- \"Can I get the Hilbert Transform Phasor data for EUR/USD at a 15-minute interval?\"\n- \"How can I analyze the cyclical patterns of Bitcoin using the HT_PHASOR method?\" \n\nThis endpoint is particularly useful for traders and analysts looking to understand the underlying trends and cycles in financial data.",
  "GetTimeSeriesHtSine": "The HT_SINE endpoint is designed to calculate the Hilbert Transform Sine Wave indicator, which helps traders identify potential turning points and trend directions based on the dominant market cycle. This indicator is particularly useful for analyzing financial instruments like stocks, forex, and cryptocurrencies.\n\nTo use this endpoint, you need to provide several key parameters:\n\n- **symbol** (required): The ticker symbol of the instrument you want to analyze, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval for the data points, which can range from `1min` to `1month`.\n- **outputsize**: The number of data points to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: Optional parameters that specify the date range for the data.\n- **series_type**: Indicates the price type (e.g., `close`, `open`, `high`, `low`) on which the indicator is calculated.\n\nThe endpoint returns a JSON object containing the calculated HT_SINE values along with metadata about the requested instrument, including the exchange, currency, and the specific time series data points with their corresponding timestamps.\n\nHere are a few example questions a user might ask that this endpoint could satisfy:\n- \"What is the HT_SINE value for AAPL over the last week?\"\n- \"Can you provide the Hilbert Transform Sine Wave data for EUR/USD at a 15-minute interval?\"\n- \"How does the HT_SINE indicator behave for Bitcoin over the past month?\"",
  "GetTimeSeriesHtTrendline": "The **HT_TRENDLINE** endpoint provides traders with the Hilbert Transform Instantaneous Trendline, a smoothed moving average that helps identify market trends and potential entry or exit points. This is particularly useful for analyzing financial instruments over time.\n\nTo use this endpoint, you need to specify the following key parameters:\n\n1. **symbol** (required): The ticker symbol of the instrument you want to analyze, such as `AAPL` for Apple or `EUR/USD` for a currency pair.\n2. **interval** (required): The time interval between data points, which can range from `1min` to `1month`.\n3. **outputsize**: The number of data points to retrieve, with a maximum of 5000 and a default of 30 if no date parameters are set.\n\nAdditionally, you can filter results by various identifiers like **isin**, **figi**, or **cusip**, specify the **exchange** or **country**, and adjust the output format to either JSON or CSV. You can also set a specific date range using **start_date** and **end_date**, or request data for a specific date using the **date** parameter.\n\nThe response will include the HT_TRENDLINE values along with metadata such as the symbol, interval, and exchange information. \n\nHere are some example questions a user might ask that this endpoint could satisfy:\n- \"What is the current HT_TRENDLINE for AAPL over the last week?\"\n- \"Can I get the HT_TRENDLINE data for EUR/USD at a 15-minute interval?\"\n- \"Show me the HT_TRENDLINE values for Bitcoin for the last month.\"",
  "GetTimeSeriesHtTrendMode": "The `/ht_trendmode` endpoint provides traders with insights into market phases by distinguishing between trending and cyclical behaviors using the Hilbert Transform Trend vs Cycle Mode (HT_TRENDMODE). This can help users adjust their trading strategies based on the current market conditions.\n\nTo use this endpoint, you need to specify the following key parameters:\n\n- **symbol** (required): The ticker symbol of the financial instrument you are interested in, such as `AAPL` for Apple or `EUR/USD` for currency pairs.\n- **interval** (required): The time interval for the data points, which can be set to values like `1min`, `5min`, or `1day`.\n- **outputsize**: The number of data points to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: Optional parameters that allow you to specify a date range for the data you want to retrieve.\n\nThe endpoint returns a JSON object containing the requested time series data, including the HT_TRENDMODE values for the specified instrument and interval. Each data point includes the date and time it corresponds to, along with the HT_TRENDMODE value, which indicates the market phase.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the trend mode for AAPL over the last week?\"\n- \"Can you show me the HT_TRENDMODE values for EUR/USD at 15-minute intervals?\"\n- \"How is the market trending for Bitcoin right now?\"",
  "GetTimeSeriesIchimoku": "The Ichimoku Cloud endpoint provides traders with a comprehensive trend-following indicator that combines multiple moving averages and support/resistance levels. This tool helps identify potential entry and exit points, trend direction, and momentum for various financial instruments.\n\nTo use this endpoint, you must provide the following key parameters:\n\n- **symbol** (required): The ticker symbol of the instrument you want to analyze, such as \"AAPL\" for Apple or \"EUR/USD\" for the Euro against the US Dollar.\n- **interval** (required): The time interval for the data points, which can be set to values like \"1min\", \"5min\", \"1day\", etc.\n- **outputsize**: This parameter specifies how many data points to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: Optional parameters to define the specific time range for the data.\n- **timezone**: Determines the timezone for the output datetime, which can be set to the local exchange time or UTC.\n\nThe endpoint returns a JSON object containing the requested Ichimoku indicator values, including the Tenkan-sen, Kijun-sen, Senkou Span A and B, and Chikou Span, along with metadata about the instrument and the exchange.\n\nHere are some example questions a user might ask that this endpoint could satisfy:\n- \"What are the Ichimoku Cloud values for AAPL over the last week?\"\n- \"Can you provide the Ichimoku indicator data for EUR/USD at a 15-minute interval?\"\n- \"What is the current Ichimoku analysis for Bitcoin?\"",
  "GetIncomeStatement": "The `/income_statement` endpoint retrieves the complete income statement for a specified company, detailing its revenues and expenses over a selected period, which can be either annual or quarterly. This endpoint is particularly useful for investors or analysts looking to assess a company's financial performance.\n\nTo use this endpoint, you need to provide the `symbol` parameter, which is the ticker symbol of the company (e.g., \"AAPL\" for Apple). You can also filter the results using various optional parameters, such as `figi` (Financial Instrument Global Identifier), `isin` (International Securities Identification Number), or `cusip` (Committee on Uniform Securities Identification Procedures), among others. Additionally, you can specify the `period` (annual or quarterly) and define a date range with `start_date` and `end_date` to filter the income statements by fiscal date.\n\nThe response will include detailed financial metrics such as total sales, gross profit, operating income, net income, and earnings per share (EPS), along with metadata about the company, including its name, currency, and the exchange it is traded on.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the latest income statement for Apple Inc.?\"\n- \"Can you show me the quarterly income statement for a specific company?\"\n- \"What were the total revenues and expenses for Microsoft in the last fiscal year?\"",
  "GetIncomeStatementConsolidated": "This API endpoint retrieves the consolidated income statement for a specified company over a defined period, either annually or quarterly. It provides detailed financial data, including revenue, expenses, net income, and earnings per share, which are essential for financial analysis.\n\nTo use this endpoint, you need to provide the following key parameters:\n\n- **symbol** (required): The stock ticker symbol of the company (e.g., \"AAPL\" for Apple Inc.). For preferred stocks, use a dot (.) to separate the classes (e.g., \"BRK.A\").\n- **period** (required): Specify whether the data should be for an \"annual\" or \"quarterly\" reporting period.\n- **start_date** and **end_date** (optional): Define a date range to filter the income statements by fiscal dates.\n- **outputsize** (optional): Control the number of records returned in the response, with a default of 6.\n\nThe endpoint returns a JSON object containing the income statement data, including details like total revenue, operating income, net income, and various expense categories, along with the response status.\n\nHere are some example questions a user might ask to utilize this endpoint:\n- \"What was Apple's total revenue for the last quarter?\"\n- \"Can you show me the consolidated income statement for Microsoft for the year 2022?\"\n- \"What are the expenses reported by Tesla for the last fiscal year?\"",
  "GetInsiderTransactions": "The `/insider_transactions` endpoint provides users with detailed trading information about transactions conducted by company insiders. This can be useful for investors looking to understand insider trading patterns and gain insights into a company's performance.\n\nTo use this endpoint, you need to specify the ticker symbol of the instrument you are interested in, such as \"AAPL\" for Apple or \"TSLA\" for Tesla. Additionally, you can filter the results using various parameters including:\n- `figi`: A financial instrument global identifier.\n- `isin`: The international securities identification number.\n- `cusip`: The unique identifier for securities in the U.S.\n- `exchange`: The stock exchange where the instrument is traded (e.g., \"NASDAQ\").\n- `mic_code`: The market identifier code under ISO 10383.\n- `country`: The country where the instrument is traded.\n\nThe response will include metadata about the instrument, such as its name, currency, and exchange details, along with a list of insider transactions. Each transaction will provide information about the insider's full name, job position, date reported, whether the transaction was direct or indirect, the number of shares involved, the transaction value, and a description of the transaction.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What insider transactions have occurred for Apple recently?\"\n- \"Can you show me the insider trading activity for Tesla on NASDAQ?\"\n- \"What is the latest insider trading information for a specific stock identified by its CUSIP?\"",
  "GetInstitutionalHolders": "The `/institutional_holders` endpoint retrieves information about the stock ownership of a specified financial instrument by institutional investors, such as pension funds and investment firms. This data can help users understand how much of a company's stock is held by large entities.\n\nTo use this endpoint, you need to provide at least one of the following parameters to identify the financial instrument:\n\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.). This is a required parameter.\n- **figi**: The Financial Instrument Global Identifier.\n- **isin**: The International Securities Identification Number.\n- **cusip**: The CUSIP number of the instrument.\n- **exchange**: The exchange where the instrument is traded (e.g., `NASDAQ`).\n- **mic_code**: The Market Identifier Code under ISO 10383.\n- **country**: The country where the instrument is traded (e.g., `United States`).\n\nThe response includes a list of institutional holders, detailing each institution's name, the date the data was reported, the number of shares they own, the total value of those shares, and the percentage of the company's outstanding shares that they hold.\n\nThis endpoint is useful for inquiries such as:\n- \"Who are the major institutional investors in Apple Inc.?\"\n- \"What percentage of shares does Vanguard Group own in a specific stock?\"\n- \"Can you provide the institutional ownership details for a stock traded on NASDAQ?\"",
  "GetInstrumentType": "This API endpoint allows users to retrieve a comprehensive list of instrument types available through the Twelve Data API. It is a simple GET request that does not require any input parameters.\n\nWhen you call this endpoint, it returns a JSON object containing two main properties: `status` and `result`. The `status` indicates the success of the request (typically \"ok\"), while the `result` is an array of strings representing various financial instrument types, such as \"Common Stock,\" \"Bond,\" \"ETF,\" and \"Digital Currency.\"\n\nThis endpoint is useful for anyone looking to understand the different types of financial instruments they can work with in the Twelve Data API. \n\nHere are some example questions a user might ask that this endpoint could help answer:\n- \"What types of financial instruments can I access through the Twelve Data API?\"\n- \"Can you provide a list of all available instrument types in the Twelve Data platform?\"\n- \"What categories of investments are included in the Twelve Data API?\"",
  "GetIntervals": "The `/intervals` endpoint is designed to provide users with a list of available time intervals for data requests. When you make a GET request to this endpoint, it returns a JSON object containing two key pieces of information: a status message and an array of time intervals.\n\nThe response includes:\n- **status**: A string indicating the response status, typically \"ok\" if the request was successful.\n- **data**: An array of strings representing the available time intervals, such as \"1min\", \"5min\", \"1h\", \"1day\", and more, which can be used for various data queries.\n\nThis endpoint is useful for users who need to know the permissible time intervals for retrieving data, ensuring they select valid options for their requests.\n\nHere are a few example questions a user might ask that this endpoint could help answer:\n- \"What time intervals can I use for my data requests?\"\n- \"Can you provide a list of available intervals for querying data?\"\n- \"What are the valid time frames I can select when requesting data?\"",
  "GetIpoCalendar": "The `/ipo_calendar` endpoint provides users with information about past, current, and upcoming Initial Public Offerings (IPOs). By utilizing this endpoint, you can retrieve a list of IPOs based on specific criteria.\n\nKey input parameters include:\n\n- **exchange**: Specify the stock exchange where the IPO is listed, such as \"NASDAQ\".\n- **mic_code**: Provide the Market Identifier Code (MIC) that adheres to the ISO 10383 standard, for example, \"XNAS\".\n- **country**: Indicate the country where the IPO is taking place, such as \"United States\" or \"US\".\n- **start_date**: Set the earliest date for the IPOs you want to include in your results, formatted as `YYYY-MM-DD`.\n- **end_date**: Define the latest date for the IPOs, also formatted as `YYYY-MM-DD`.\n\nThe endpoint returns a JSON object containing an array of IPO details, which includes the company's ticker symbol, name, exchange, MIC code, price range, offer price, currency, and number of shares available.\n\nUsers might ask questions like:\n- \"What upcoming IPOs are scheduled on the NASDAQ?\"\n- \"Can you show me the IPOs that occurred in the United States last year?\"\n- \"What is the price range for the recent IPOs listed on XNAS?\"",
  "GetTimeSeriesKama": "The KAMA endpoint allows users to retrieve the Kaufman Adaptive Moving Average (KAMA) for a specified financial instrument, which adjusts its length based on market volatility. This moving average helps traders balance responsiveness to price changes with noise reduction in the data.\n\nTo use this endpoint, you need to provide the following key parameters:\n\n- **symbol** (required): The ticker symbol of the instrument (e.g., \"AAPL\" for Apple Inc.).\n- **interval** (required): The time interval between data points, such as \"1min\" or \"1day\".\n- **outputsize**: The number of data points to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: Optional parameters to specify the date range for the data.\n- **series_type**: This indicates the price type (e.g., \"close\", \"open\") on which the KAMA is calculated.\n\nThe endpoint returns a JSON object containing the KAMA values over the specified time series, along with metadata about the request, such as the symbol, interval, and exchange information.\n\nHere are some example questions a user might ask that this endpoint can answer:\n- \"What is the KAMA for AAPL over the last week?\"\n- \"Can I get the KAMA values for EUR/USD with a 15-minute interval?\"\n- \"How does the KAMA for Bitcoin compare over the last month?\"",
  "GetTimeSeriesKeltner": "The Keltner Channel API endpoint provides traders with a volatility-based indicator that helps identify potential overbought or oversold conditions, trend direction, and possible price breakouts for a specified financial instrument. This indicator is constructed using a combination of the Exponential Moving Average (EMA) and the Average True Range (ATR).\n\nTo use this endpoint, you need to specify the following key parameters:\n\n- **symbol**: The ticker symbol of the instrument you want to analyze (e.g., \"AAPL\" for Apple).\n- **interval**: The time interval for the data points (e.g., \"1min\", \"1day\").\n- **outputsize**: The number of data points to retrieve, which can range from 1 to 5000, with a default of 30 if no date parameters are set.\n- **time_period**: The number of periods to average over, typically set to a default of 20.\n- **atr_time_period**: The time period used for calculating the ATR, defaulting to 10.\n- **multiplier**: A factor to adjust the sensitivity of the indicator, defaulting to 2.\n\nThe endpoint returns a JSON object containing the Keltner Channel values, including the upper, middle, and lower lines, along with metadata about the requested symbol, interval, and exchange information.\n\nHere are a few examples of questions a user might ask that this endpoint could answer:\n- \"What are the Keltner Channel values for Apple stock over the last week?\"\n- \"Can you show me the Keltner Channel for Bitcoin with a 15-minute interval?\"\n- \"What is the Keltner Channel indicator for the EUR/USD currency pair today?\"",
  "GetKeyExecutives": "The `/key_executives` endpoint is designed to retrieve information about key executives of a specified financial instrument, identified by its ticker symbol. Users can query this endpoint using various parameters to filter the results based on different identifiers or attributes of the instrument.\n\nKey input parameters include:\n- **symbol**: The ticker symbol of the instrument (e.g., \"AAPL\" for Apple Inc.). This is a required parameter.\n- **figi**: A financial instrument global identifier (FIGI) for more precise filtering.\n- **isin**: The international securities identification number (ISIN) for the instrument.\n- **cusip**: The CUSIP number, which is a unique identifier for U.S. securities.\n- **exchange**: The name of the exchange where the instrument is traded (e.g., \"NASDAQ\").\n- **mic_code**: The Market Identifier Code (MIC) under ISO 10383 standards.\n- **country**: The country where the instrument is traded (e.g., \"United States\").\n\nUpon a successful request, the endpoint returns a JSON object containing:\n- **meta**: Metadata about the instrument, including its symbol, name, currency, exchange, and timezone.\n- **key_executives**: A list of key executives associated with the instrument, detailing their names, titles, ages, years born, and total salaries if available.\n\nThis endpoint is useful for users looking to gather insights about the leadership of a specific company or financial instrument.\n\nExamples of questions that this endpoint could answer include:\n- \"Who are the key executives at Apple Inc.?\"\n- \"Can you provide the names and titles of executives for a specific stock symbol?\"\n- \"What is the salary of the CEO of the company represented by the ticker BRK.A?\"",
  "GetTimeSeriesKst": "The KST (Know Sure Thing) endpoint provides traders with a momentum oscillator that combines multiple smoothed rates of change to help identify potential trend reversals and overbought or oversold conditions in financial instruments. \n\nTo use this endpoint, you need to specify the following key parameters:\n- **symbol**: The ticker symbol of the instrument you are interested in (e.g., \"AAPL\" for Apple).\n- **interval**: The time interval between data points, such as \"1min\" or \"1day\", which is required for the query.\n- **outputsize**: This parameter controls the number of data points returned, with a default of 30 if no date parameters are set.\n\nAdditionally, you can filter results by various identifiers like ISIN, FIGI, or CUSIP, specify the exchange where the instrument is traded, and set the timezone for the output. There are also options to include previous closing prices, adjust for splits or dividends, and specify the periods for the Rate of Change and Simple Moving Averages used in the KST calculation.\n\nWhen you query this endpoint, it returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points that includes the KST value and its signal value at specified times.\n- **status**: Indicates the success of the request.\n\nHere are a few example questions a user might ask that this endpoint could answer:\n- \"What is the KST value for AAPL over the last week?\"\n- \"Can you provide the KST indicator for EUR/USD at 15-minute intervals?\"\n- \"How does the KST signal for Bitcoin compare to its previous closing price?\"",
  "GetLastChanges": "The `/last_change/{endpoint}` endpoint is designed to retrieve the latest changes in fundamental data for various financial metrics. This functionality is particularly useful for efficiently managing API credits by allowing users to request updated data only when necessary.\n\nTo use this endpoint, you must specify the `endpoint` parameter in the path, which indicates the type of data you want to access. This can include options like \"price_target\", \"recommendations\", \"statistics\", and several others related to financial instruments.\n\nAdditionally, you can refine your request with several optional query parameters:\n- `start_date`: To filter changes starting from a specific date and time.\n- `symbol`: To filter results by a specific stock ticker, such as \"AAPL\".\n- `exchange`: To specify the exchange name, like \"NASDAQ\".\n- `mic_code`: To filter by the Market Identifier Code (MIC).\n- `country`: To filter by the country name or its alpha code.\n- `page`: To paginate through results.\n- `outputsize`: To define the number of records returned in the response.\n\nThe endpoint returns a JSON object containing a list of the latest changes, including details such as the ticker symbol, MIC code, and the timestamp of the last change, along with pagination information.\n\nHere are a few natural-language questions that this endpoint can help answer:\n- \"What are the latest changes for AAPL's statistics since October 14, 2023?\"\n- \"Can you show me the most recent recommendations for stocks listed on NASDAQ?\"\n- \"What was the last change date for the mutual funds data?\"",
  "GetTimeSeriesLinearReg": "The `/linearreg` endpoint provides access to the Linear Regression (LINEARREG) indicator, which helps traders analyze trends by calculating the best-fit line through a series of data points. This can assist in identifying potential support or resistance levels in financial markets.\n\nTo use this endpoint, you need to specify the following key input parameters:\n\n- **symbol** (required): The ticker symbol of the instrument you want to analyze, such as `AAPL` for Apple Inc. \n- **interval** (required): The time interval between data points, with options like `1min`, `5min`, `1day`, etc.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: Optional parameters to define a specific date range for the data.\n- **series_type**: Indicates which price type (e.g., close, open) the indicator is calculated on.\n\nThe endpoint returns a JSON object containing the calculated linear regression values along with metadata about the request, such as the symbol, interval, and exchange information. The response includes an array of time series data points, each with a timestamp and the corresponding linear regression value.\n\nHere are some example questions a user might ask that this endpoint could help answer:\n- \"What is the linear regression value for AAPL over the last week?\"\n- \"Can you show me the linear regression trend for EUR/USD at a 15-minute interval?\"\n- \"How does the linear regression for Bitcoin compare over the last month?\"",
  "GetTimeSeriesLinearRegAngle": "The `/linearregangle` endpoint is designed to calculate and return the angle of the linear regression line for a specified financial instrument, which helps indicate the slope and direction of the underlying trend. This can be particularly useful for traders and analysts looking to understand market movements.\n\nTo use this endpoint, you need to provide several key parameters:\n\n1. **symbol** (required): The ticker symbol of the instrument you want to analyze, such as `AAPL` for Apple Inc. This identifies the specific asset for which the regression angle is calculated.\n2. **interval** (required): This defines the time interval between data points, with options like `1min`, `5min`, `1day`, etc. It determines how granular the data will be.\n3. **outputsize**: This optional parameter specifies how many data points to retrieve, with a maximum limit of 5000.\n4. **start_date** and **end_date**: These parameters allow you to define a specific date range for the data you want to analyze.\n\nThe endpoint returns a JSON response containing the regression angle values over the specified time intervals, along with metadata about the instrument, such as its exchange and currency.\n\nHere are a few example questions a user might ask that this endpoint could answer:\n- \"What is the linear regression angle for AAPL over the last week?\"\n- \"Can you provide the regression angle for EUR/USD at a 15-minute interval?\"\n- \"How does the linear regression angle for Bitcoin compare over the last month?\"",
  "GetTimeSeriesLinearRegIntercept": "The **Linear Regression Intercept** endpoint calculates the intercept point of a linear regression line for a specified financial instrument, which is useful for trend analysis. \n\nTo use this endpoint, you need to provide the following key parameters:\n\n1. **symbol** (required): The ticker symbol of the instrument you want to analyze, such as \"AAPL\" for Apple Inc.\n2. **interval** (required): The time interval between data points, with options ranging from \"1min\" to \"1month\".\n3. **outputsize**: This specifies how many data points you want to retrieve, with a maximum of 5000.\n4. **start_date** and **end_date**: These optional parameters allow you to define a specific date range for the data.\n5. **timezone**: You can specify the timezone for the output datetime, which can be set to \"Exchange\" for local exchange time or \"UTC\".\n\nThe endpoint returns a JSON response containing the calculated linear regression intercept values along with metadata about the request, such as the symbol, interval, and exchange information. Each data point includes the datetime and the corresponding intercept value.\n\nHere are some example questions a user might ask that this endpoint could satisfy:\n- \"What is the linear regression intercept for AAPL over the last week?\"\n- \"Can you give me the linear regression intercept for EUR/USD at a 15-minute interval?\"\n- \"What was the linear regression intercept for Bitcoin last month?\"",
  "GetTimeSeriesLinearRegSlope": "The **LINEARREGSLOPE** endpoint is designed to calculate the slope of a linear regression line for a specified financial instrument, which helps in understanding the trend's steepness and rate of change over time. \n\nTo use this endpoint, you need to provide the following key parameters:\n\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.).\n- **interval** (required): The time interval between data points, which can range from `1min` to `1month`.\n- **outputsize**: The number of data points to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: Optional parameters to specify the date range for the data.\n- **series_type**: Indicates the price type (e.g., `close`, `open`) used for the calculation.\n\nThe endpoint returns a JSON object containing the calculated linear regression slope values along with metadata about the request, such as the instrument's symbol, exchange, and the time interval used. The response includes an array of time series data points, each with a timestamp and the corresponding slope value.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the linear regression slope for AAPL over the last week?\"\n- \"Can you provide the slope for EUR/USD at a 5-minute interval?\"\n- \"How steep is the trend for ETH/BTC in the last month?\"",
  "GetTimeSeriesLn": "The LN endpoint calculates the natural logarithm of a specified financial instrument's price over time, which is useful for advanced mathematical analysis and financial market calculations. \n\nTo use this endpoint, you must provide a **symbol** (the ticker of the instrument, such as \"AAPL\" for Apple) and an **interval** (which defines the time gap between data points, such as \"1min\" or \"1day\"). You can also specify optional parameters like **isin** (for filtering by international securities identification number), **figi** (Financial Instrument Global Identifier), **cusip** (Committee on Uniform Securities Identification Procedures), and others to refine your data request.\n\nThe endpoint returns a JSON object containing metadata about the request, including the symbol, interval, and exchange information, as well as an array of time series data points. Each data point includes the datetime and the calculated natural logarithm value.\n\nHere are a few questions a user might ask that this endpoint could help answer:\n- \"What is the natural logarithm of the closing price for AAPL over the last week?\"\n- \"Can you provide the natural logarithm values for EUR/USD with a 15-minute interval?\"\n- \"How does the natural logarithm of the price for ETH/BTC change over the past month?\"",
  "GetTimeSeriesLog10": "The `/log10` endpoint calculates the base-10 logarithm of a specified financial instrument's data over a defined time series. This is particularly useful for advanced mathematical analysis and financial market calculations.\n\nTo use this endpoint, you need to provide the following key parameters:\n\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.). This parameter is required.\n- **interval**: The time interval for the data points, which can be specified as options like `1min`, `5min`, `1day`, etc. This parameter is also required.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: Optional parameters to define the specific time range for the data. If provided, they must be in the format `YYYY-MM-DD HH:MM:SS`.\n- **series_type**: Indicates the price type (e.g., `close`, `open`) on which the logarithm is calculated.\n\nThe endpoint returns a JSON object that includes the calculated log10 values along with metadata such as the instrument's symbol, currency, exchange, and the time series data points. Each data point contains the datetime and the corresponding log10 value.\n\nHere are some example questions a user might ask that this endpoint could satisfy:\n- \"What is the log10 of the closing prices for AAPL over the last week?\"\n- \"Can you provide the log10 values for the EUR/USD exchange rate at 5-minute intervals?\"\n- \"How do I get the log10 of the daily prices for Bitcoin?\"",
  "GetLogo": "The `/logo` endpoint is designed to retrieve the logo for a specified financial instrument, which can include companies, cryptocurrencies, or forex pairs. To use this endpoint, you need to provide the following key input parameters:\n\n1. **symbol** (required): This is the ticker symbol of the instrument you are interested in, such as \"AAPL\" for Apple or \"TSLA\" for Tesla.\n2. **exchange** (optional): The name of the exchange where the instrument is traded, like \"NASDAQ\" or \"NSE\".\n3. **mic_code** (optional): The Market Identifier Code (MIC) of the exchange, such as \"XNAS\" for NASDAQ.\n4. **country** (optional): The country where the instrument is traded, which can be specified as a full name (e.g., \"United States\") or an abbreviation (e.g., \"US\").\n\nUpon a successful request, the endpoint returns a JSON response containing:\n\n- **meta**: Information about the instrument, including its symbol and exchange.\n- **url**: A link to download the logo for stocks.\n- **logo_base**: A link to download the base currency logo for forex and cryptocurrencies.\n- **logo_quote**: A link to download the quote currency logo for forex and cryptocurrencies.\n\nThis endpoint is particularly useful for applications that need to display logos associated with various financial instruments.\n\nHere are a few example questions a user might ask that this endpoint could satisfy:\n- \"Can I get the logo for Apple Inc.?\"\n- \"What is the logo for the EUR/USD forex pair?\"\n- \"Show me the logo for Bitcoin.\"",
  "GetTimeSeriesMa": "The `/ma` endpoint provides access to Moving Average (MA) data for various financial instruments, allowing traders to analyze trends and identify potential support or resistance levels. Users can specify the instrument of interest using its ticker symbol (e.g., `AAPL` for Apple), or alternatively, by its ISIN, FIGI, or CUSIP identifiers.\n\nKey input parameters include:\n- **symbol** (required): The ticker symbol of the instrument for which the moving average is calculated.\n- **interval** (required): The time interval between data points, with options ranging from 1 minute to 1 month.\n- **time_period**: Specifies the number of periods to average over, which can be set between 1 and 800.\n- **ma_type**: Indicates the type of moving average to use, such as Simple Moving Average (SMA) or Exponential Moving Average (EMA).\n\nThe endpoint returns a JSON response containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a timestamp and the corresponding moving average value.\n- **status**: Indicates the success of the request.\n\nThis endpoint is useful for traders looking to analyze historical price trends and make informed decisions based on moving averages.\n\nUsers might ask questions like:\n- \"What is the moving average for AAPL over the last week?\"\n- \"Can I get the 15-minute moving average for EUR/USD?\"\n- \"What type of moving averages can I calculate for my stock?\"",
  "GetTimeSeriesMacd": "The `/macd` endpoint provides access to the Moving Average Convergence Divergence (MACD) indicator, a popular momentum indicator used in technical analysis to identify potential trend reversals and trading opportunities. This endpoint allows users to retrieve MACD values based on specified parameters related to financial instruments.\n\nKey input parameters include:\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.).\n- **interval** (required): The time interval between data points, such as `1min`, `5min`, or `1day`.\n- **outputsize**: The number of data points to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: Optional parameters to specify the date range for the data.\n- **fast_period**, **slow_period**, and **signal_period**: These parameters define the periods used for calculating the MACD and its signal line.\n\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each including the MACD value, the MACD signal line value, and the MACD histogram value, along with the corresponding datetime.\n\nThis endpoint is useful for traders and analysts looking to analyze market trends and make informed trading decisions. \n\nUsers might ask:\n- \"What is the MACD for AAPL over the last week?\"\n- \"Can I get the MACD values for EUR/USD at 15-minute intervals?\"\n- \"How do I retrieve the MACD for Bitcoin with a custom date range?\"",
  "GetTimeSeriesMacdSlope": "The `/macd_slope` endpoint is designed to provide traders with the MACD slope, which indicates the rate of change of the MACD line, helping to assess the momentum of a security's price. This can be crucial for making informed trading decisions.\n\nTo use this endpoint, you need to provide the following key parameters:\n\n- **symbol** (required): The ticker symbol of the instrument you are interested in, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval for the data points, with options like `1min`, `5min`, or `1day`.\n- **outputsize**: Specifies how many data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: Optional parameters to specify the time range for the data.\n- **series_type**: Indicates the price type (e.g., `close`, `open`) on which the MACD calculation is based.\n\nThe response will include an array of time series data points, each containing the MACD slope value, along with the corresponding datetime and other related slopes (like the MACD signal slope and MACD histogram slope). Additionally, metadata about the request, such as the symbol and interval, will be included.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the MACD slope for AAPL over the last week?\"\n- \"Can you show me the MACD slope for EUR/USD at 5-minute intervals?\"\n- \"What was the MACD slope for Bitcoin yesterday?\"",
  "GetTimeSeriesMacdExt": "The MACDEXT endpoint provides a customizable version of the Moving Average Convergence Divergence (MACD) indicator, which is widely used in trading to analyze price trends and momentum. This endpoint allows traders to specify various parameters to tailor the MACD calculation to their needs.\n\nKey input parameters include:\n- **symbol** (required): The ticker symbol of the financial instrument, such as `AAPL` for Apple Inc. \n- **interval** (required): The time interval between data points, with options ranging from `1min` to `1month`.\n- **fast_period**: The number of periods for the fast moving average, typically set to 12.\n- **slow_period**: The number of periods for the slow moving average, typically set to 26.\n- **signal_period**: The period for generating the signal line, usually set to 9.\n- **fast_ma_type** and **slow_ma_type**: Specify the type of moving averages used (e.g., SMA, EMA).\n- **outputsize**: The number of data points to retrieve, with a maximum of 5000.\n\nThe endpoint returns a JSON object containing the MACD values, including the MACD line, signal line, and histogram values, along with metadata about the request, such as the symbol and interval used.\n\nUsers might ask:\n- \"What is the MACD for Apple stock over the last week?\"\n- \"Can I get the MACD values for Bitcoin with a 5-minute interval?\"\n- \"How do I customize the MACD settings for my trading strategy?\"",
  "GetTimeSeriesMama": "The MAMA endpoint provides access to the MESA Adaptive Moving Average (MAMA), a technical indicator that adjusts to price movements based on the dominant market cycle. This allows traders to analyze market trends while balancing responsiveness and noise reduction.\n\nTo use this endpoint, you need to specify the following key parameters:\n\n- **symbol**: The ticker symbol of the instrument you want to analyze (e.g., \"AAPL\" for Apple Inc.).\n- **interval**: The time interval between data points, such as \"1min\" or \"1day\".\n- **outputsize**: The number of data points to retrieve, which can range from 1 to 5000, with a default of 30 if no date parameters are provided.\n\nOptional parameters include identifiers like **isin**, **figi**, and **cusip** for filtering specific instruments, as well as **start_date** and **end_date** for defining a specific time range for the data. You can also specify the **timezone** for the output, the **format** of the response (JSON or CSV), and whether to include additional data such as previous closing prices or OHLC values.\n\nThe endpoint returns a JSON object containing metadata about the request and an array of time series data points. Each data point includes the MAMA value and the corresponding datetime.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the MAMA for AAPL over the last week?\"\n- \"Can I get the MESA Adaptive Moving Average for EUR/USD at a 15-minute interval?\"\n- \"What were the MAMA values for Bitcoin over the past month?\"",
  "GetMarketCap": "The `/market_cap` endpoint provides historical market capitalization data for various financial instruments. Users can retrieve this data by specifying certain filters to narrow down their search.\n\nKey input parameters include:\n- **symbol** (required): The ticker symbol of the company (e.g., \"AAPL\" for Apple Inc.).\n- **figi**: The Financial Instrument Global Identifier for the instrument.\n- **isin**: The International Securities Identification Number.\n- **cusip**: The CUSIP identifier for the instrument.\n- **exchange**: The name of the exchange where the instrument is listed (e.g., \"NASDAQ\").\n- **mic_code**: The Market Identifier Code under ISO 10383.\n- **country**: The name or alpha code of the country (e.g., \"United States\").\n- **start_date**: The beginning date for the data retrieval in the format `YYYY-MM-DD`.\n- **end_date**: The end date for the data retrieval in the same format.\n- **page**: The page number for pagination of results.\n- **outputsize**: The number of records to return in the response.\n\nThe endpoint returns a JSON object that includes metadata about the company, such as its name, currency, exchange, and market capitalization values over the specified date range.\n\nUsers might ask questions like:\n- \"What is the market capitalization history for Apple Inc.?\"\n- \"Can I get the market cap data for a specific stock on the NASDAQ?\"\n- \"How has the market cap of a company changed over the past year?\"",
  "GetMarketMovers": "This API endpoint retrieves a list of the top gaining or losing stocks for a specified market. Users can choose from various markets, including stocks, ETFs, mutual funds, forex, and cryptocurrencies. The endpoint allows users to specify whether they want to see gainers or losers, the number of results to return (from 1 to 50), and can filter results by country or price threshold.\n\nKey input parameters include:\n- **market** (path parameter): Specifies the type of market (e.g., \"stocks\", \"forex\").\n- **direction** (query parameter): Indicates whether to retrieve \"gainers\" or \"losers\", with \"gainers\" as the default.\n- **outputsize** (query parameter): Defines how many results to return, defaulting to 30.\n- **country** (query parameter): Filters results by country, applicable to non-currency markets, defaulting to \"USA\".\n- **price_greater_than** (query parameter): Filters stocks to only include those priced above a specified value.\n- **dp** (query parameter): Sets the number of decimal places for price values, ranging from 0 to 11.\n\nThe endpoint returns a JSON object containing the status of the response and an array of market movers, where each entry includes details such as the stock symbol, name, exchange, last price, high and low prices for the day, trading volume, and percentage change since the previous day.\n\nExample user questions that this endpoint could answer include:\n- \"What are the top gaining stocks in the forex market today?\"\n- \"Can you show me the biggest losers in cryptocurrencies this week?\"\n- \"I want to see the top 10 gainers in US stocks with prices above $100.\"",
  "GetMarketState": "The `/market_state` endpoint allows users to check the current state of stock exchanges, including whether they are open or closed, and provides information on the time remaining until they open or close. By default, it returns data for all available stock exchanges.\n\nKey input parameters include:\n- **exchange**: Specify the name of the exchange (e.g., \"NYSE\") to filter results.\n- **code**: Provide the Market Identifier Code (MIC) for the exchange (e.g., \"XNYS\") to get specific exchange details.\n- **country**: Indicate the country where the exchange is located, using either the country name or its alpha code (e.g., \"United States\").\n\nThe endpoint returns a list of exchanges with details such as:\n- The exchange's full name and MIC.\n- The country where the exchange is based.\n- A boolean indicating if the market is currently open.\n- The time elapsed since the market opened or the time remaining until it opens or closes, formatted as `HH:MM:SS`.\n\nThis endpoint is useful for users looking to quickly ascertain the operational status of stock exchanges.\n\nExample questions a user might ask include:\n- \"Is the NYSE currently open?\"\n- \"What time does the London Stock Exchange close today?\"\n- \"How long until the Tokyo Stock Exchange opens?\"",
  "GetTimeSeriesMax": "The `/max` endpoint is designed to calculate the maximum value of a specified financial instrument over a defined time period. This is particularly useful for traders and analysts looking to identify potential resistance levels or extreme price movements in the market.\n\nTo use this endpoint, you need to provide the following key parameters:\n\n- **symbol** (required): The ticker symbol of the instrument you are interested in, such as `AAPL` for Apple Inc. or `EUR/USD` for the Euro to US Dollar exchange rate.\n- **interval** (required): The time interval between data points, which can be set to values like `1min`, `5min`, or `1day`.\n- **time_period**: This optional parameter specifies the number of periods over which the maximum value is calculated, with a default of 9.\n\nAdditional optional parameters include `start_date` and `end_date` for defining a specific date range, `exchange` to specify where the instrument is traded, and `format` to choose the response format (JSON or CSV).\n\nThe response will include the maximum values calculated for the specified instrument, along with metadata such as the exchange, currency, and the time period used for the calculation. \n\nHere are some questions a user might ask that this endpoint could answer:\n- \"What was the highest price of AAPL over the last week?\"\n- \"Can you show me the maximum value for EUR/USD in the last month?\"\n- \"What is the maximum price for Bitcoin over the last 24 hours?\"",
  "GetTimeSeriesMaxIndex": "The `/maxindex` endpoint is designed to retrieve the index of the highest value in a specified data series over a defined period. This information is particularly useful for analyzing extreme price movements in financial instruments.\n\nTo use this endpoint, you must provide the following key input parameters:\n\n- **symbol** (required): The ticker symbol of the financial instrument you are interested in, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval for the data points you want to analyze, with options ranging from `1min` to `1month`.\n- **outputsize**: This optional parameter allows you to specify the number of data points to retrieve, with a default value of 30.\n\nAdditional optional parameters include filters like **isin**, **figi**, and **cusip** for identifying the instrument, as well as **start_date** and **end_date** to narrow down the time range for the data. You can also specify the **timezone** for the output datetime, the **format** of the response (JSON or CSV), and whether to include previous closing prices or OHLC values.\n\nThe endpoint returns a JSON response containing the maximum index values along with metadata about the requested instrument, such as the exchange, currency, and the specific time periods analyzed.\n\nHere are a few example questions a user might ask that this endpoint could answer:\n- \"What is the maximum index value for AAPL over the last week?\"\n- \"Can you show me the highest price index for EUR/USD in the last month?\"\n- \"What was the maximum index for Bitcoin over the past 24 hours?\"",
  "GetTimeSeriesMcGinleyDynamic": "The **MCGINLEY_DYNAMIC** endpoint provides access to the McGinley Dynamic indicator, a smoothing tool that helps minimize lag between price action and the indicator itself. This indicator adapts its speed based on the volatility of the security, offering a more precise depiction of price trends and potential support or resistance levels compared to traditional moving averages.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval** (required): The time interval between data points, such as `1min`, `5min`, or `1day`.\n- **outputsize**: Specifies the number of data points to retrieve, with a default of 30.\n- **start_date** and **end_date**: Define the time range for the data requested.\n- **timezone**: Indicates the timezone for the output datetime, which can be set to local exchange time or UTC.\n- **time_period**: Specifies the number of periods to average over, typically set to 14 by default.\n\n### Returns:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each containing the datetime of the data point and the corresponding McGinley Dynamic value.\n- **status**: Indicates the response status (e.g., \"ok\").\n\n### Usage Context:\nThis endpoint is particularly useful for traders and analysts looking to analyze price trends using the McGinley Dynamic indicator. It allows for detailed customization of the data retrieved based on various parameters.\n\n### Example Questions:\n- \"What is the McGinley Dynamic value for AAPL over the last week?\"\n- \"Can I get the McGinley Dynamic indicator for EUR/USD at a 15-minute interval?\"\n- \"How does the McGinley Dynamic indicator behave for Bitcoin in the last month?\"",
  "GetTimeSeriesMedPrice": "The **MEDPRICE** endpoint provides users with the median price of a specified financial instrument, calculated as the midpoint between its high and low prices. This can be particularly useful for traders and analysts looking to understand price movements in a simplified manner.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.).\n- **interval** (required): Defines the time interval for the data points, with options ranging from `1min` to `1month`.\n- **outputsize**: Specifies the number of data points to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: Define the time range for the data, allowing for precise queries.\n- **timezone**: Determines the timezone for the output datetime, which can be set to local exchange time or UTC.\n\n### Returns:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, currency, and exchange details.\n- **values**: An array of time series data points, each including the datetime and the calculated median price (`medprice`).\n- **status**: Indicates the success of the request.\n\n### Example User Questions:\n- \"What is the median price for Apple Inc. over the last week?\"\n- \"Can I get the median price for EUR/USD in 15-minute intervals?\"\n- \"What was the median price of Bitcoin on August 22, 2024?\" \n\nThis endpoint is ideal for users seeking to analyze price trends and make informed trading decisions based on historical data.",
  "GetTimeSeriesMfi": "The `/mfi` endpoint retrieves the Money Flow Index (MFI), a technical indicator that helps traders assess buying and selling pressure for a specific financial instrument. This volume-weighted momentum oscillator can indicate whether an asset is overbought or oversold, which is crucial for making informed trading decisions.\n\nTo use this endpoint, you must provide the `symbol` parameter, which specifies the ticker of the instrument (e.g., `AAPL` for Apple Inc.). Additionally, you need to define the `interval` parameter, which determines the time gap between consecutive data points (e.g., `1min`, `1day`). You can also specify optional parameters such as `start_date` and `end_date` to limit the data to a specific time range, or `outputsize` to control the number of data points returned.\n\nThe endpoint returns a JSON object containing the MFI values along with metadata about the request, such as the symbol, interval, and exchange information. Each data point includes the datetime and the corresponding MFI value.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the Money Flow Index for AAPL over the last week?\"\n- \"Can you provide the MFI for EUR/USD with a 5-minute interval?\"\n- \"How has the MFI changed for Bitcoin in the past month?\"",
  "GetTimeSeriesMidPoint": "The **MIDPOINT** endpoint is designed to calculate the midpoint of a specified financial instrument's data series over a defined period. This indicator is particularly useful for smoothing out data fluctuations and identifying trends in market behavior.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`), which identifies the specific asset for which the midpoint is calculated.\n- **interval** (required): Defines the time interval between consecutive data points, with options ranging from `1min` to `1month`.\n- **time_period**: Specifies the number of periods to average over, with a range from `1` to `800`.\n- **start_date** and **end_date**: Optional parameters that allow users to specify a date range for the data retrieval.\n- **outputsize**: Determines how many data points to return, with a maximum of `5000`.\n- **series_type**: Indicates the price type (e.g., `close`, `open`) on which the midpoint calculation is based.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, currency, and exchange details.\n- **values**: An array of time series data points, each with a timestamp and the corresponding midpoint value.\n- **status**: Indicates the success of the request.\n\n### Example User Questions:\n- \"What is the midpoint value for AAPL over the last week?\"\n- \"Can you show me the midpoint trend for EUR/USD at 15-minute intervals?\"\n- \"How do I retrieve the midpoint data for Bitcoin over the past month?\" \n\nThis endpoint is particularly valuable for traders and analysts looking to analyze price trends and make informed trading decisions based on historical data.",
  "GetTimeSeriesMidPrice": "The **MIDPRICE** endpoint allows users to retrieve the midprice indicator for a specified financial instrument over a defined period. The midprice is calculated as the average of the high and low prices of the instrument, providing insights into price trends and potential support or resistance levels.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.).\n- **interval** (required): The time interval between data points, with options like `1min`, `5min`, `1day`, etc.\n- **outputsize**: Specifies the number of data points to retrieve, ranging from `1` to `5000`, with a default of `30`.\n- **start_date** and **end_date**: Define the time range for the data requested.\n- **timezone**: Determines the timezone for the output datetime, which can be set to local exchange time or UTC.\n- **time_period**: Indicates the number of periods to average over, with a range from `1` to `800`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a datetime and the corresponding midprice value.\n- **status**: Indicates the success of the request.\n\n### Usage Context:\nThis endpoint is particularly useful for traders and analysts looking to assess the price behavior of securities over time, helping them make informed trading decisions based on historical price data.\n\n### Example User Questions:\n- \"What is the midprice for AAPL over the last week?\"\n- \"Can I get the midprice data for EUR/USD at 15-minute intervals?\"\n- \"How do I retrieve midprice information for a specific date?\"",
  "GetTimeSeriesMin": "The `/min` endpoint is designed to calculate the minimum value of a specified financial instrument over a defined time period. This is particularly useful for traders and analysts who want to identify potential support levels or extreme price movements in the market.\n\nTo use this endpoint, you need to provide several key parameters:\n\n- **symbol**: The ticker symbol of the instrument you are interested in (e.g., `AAPL` for Apple Inc.).\n- **interval**: The time interval for the data points, which can range from `1min` to `1month`. This defines how frequently the minimum values are calculated.\n- **outputsize**: The number of data points you wish to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: These optional parameters allow you to specify a date range for the data you want to analyze.\n- **series_type**: This indicates which price type (e.g., close, open, high, low) the minimum value should be calculated from.\n\nThe endpoint returns a JSON object containing the minimum values over the specified intervals, along with metadata about the request, such as the symbol, interval, and exchange information. \n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the lowest price of AAPL over the last week?\"\n- \"Can you show me the minimum value of EUR/USD for the last month?\"\n- \"What was the minimum closing price of Bitcoin in the last 24 hours?\"",
  "GetTimeSeriesMinIndex": "The MININDEX endpoint is designed to retrieve the index of the lowest value in a specified data series over a defined time period. This can be particularly useful for analyzing extreme price movements in financial instruments.\n\nTo use this endpoint, you need to provide the following key parameters:\n\n- **symbol** (required): This is the ticker symbol of the financial instrument you are interested in, such as \"AAPL\" for Apple Inc. \n- **interval** (required): This defines the time interval between data points, with options ranging from \"1min\" to \"1month\".\n- **outputsize**: This optional parameter specifies how many data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: These parameters allow you to specify a date range for the data you want to analyze.\n- **timezone**: This determines the timezone for the output datetime, which can be set to local exchange time or UTC.\n\nThe endpoint returns a JSON object containing the index of the lowest value for the specified instrument over the selected time period, along with metadata about the request, such as the symbol, interval, and exchange information.\n\nHere are a few example questions a user might ask that this endpoint could answer:\n- \"What is the index of the lowest price for AAPL over the last week?\"\n- \"Can you show me the minimum index for EUR/USD in the last month?\"\n- \"How do I find the lowest value index for Bitcoin trading on a 15-minute interval?\"",
  "GetTimeSeriesMinMax": "The MINMAX API endpoint allows users to retrieve the minimum and maximum values of a specified financial instrument over a defined time period. This indicator is particularly useful for traders and analysts looking to identify potential support and resistance levels or to observe extreme price movements.\n\nTo use this endpoint, you need to provide the following key parameters:\n\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.).\n- **interval**: The time interval for the data points, which can range from `1min` to `1month`.\n- **outputsize**: The number of data points to retrieve, with a maximum of `5000`.\n- **start_date** and **end_date**: Optional parameters to specify the date range for the data.\n\nThe endpoint returns a JSON object containing metadata about the request (such as the symbol, interval, and exchange information) and an array of time series data points. Each data point includes the datetime, minimum value, and maximum value for that interval.\n\nThis endpoint is ideal for users who might ask questions like:\n- \"What were the highest and lowest prices for AAPL over the last week?\"\n- \"Can you show me the min and max values for EUR/USD in the last month?\"\n- \"What is the MINMAX indicator for Bitcoin over the past 24 hours?\"",
  "GetTimeSeriesMinMaxIndex": "The **MINMAXINDEX** endpoint is designed to provide users with the indices of the lowest and highest values within a specified data series over a defined period. This information is particularly useful for analyzing extreme price movements in financial instruments.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval** (required): The time interval for the data points, such as `1min`, `5min`, or `1day`.\n- **outputsize**: Specifies the number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date** and **end_date**: Optional parameters to define the specific time range for the data.\n- **timezone**: Determines the timezone for the output datetime, which can be set to local exchange time or UTC.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of data points, each including the datetime, the index of the lowest value (`minidx`), and the index of the highest value (`maxidx`) over the specified period.\n- **status**: Indicates the response status, typically \"ok\".\n\n### Example User Queries:\n- \"What are the indices of the highest and lowest prices for AAPL over the last week?\"\n- \"Can you provide the min and max indices for EUR/USD at 15-minute intervals?\"\n- \"How do I find the extreme price movements for a specific stock on NASDAQ?\" \n\nThis endpoint is particularly useful for traders and analysts looking to identify significant price fluctuations in various financial markets.",
  "GetTimeSeriesMinusDI": "The **MINUS_DI** endpoint calculates the Minus Directional Indicator (MINUS_DI), which is part of the Average Directional Index (ADX) and measures the strength of a security's downward price movement. \n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the financial instrument you want to analyze, such as \"AAPL\" for Apple Inc.\n- **interval** (required): The time interval for the data points, with options like \"1min\", \"5min\", \"1day\", etc.\n- **outputsize**: Specifies how many data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date** and **end_date**: Define the time range for the data you want to retrieve.\n- **timezone**: Indicates the timezone for the output datetime, which can be set to local exchange time or UTC.\n- **time_period**: The number of periods over which to average, with a default of 9.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, currency, and exchange details.\n- **values**: An array of time series data points, each containing the datetime and the corresponding MINUS_DI value.\n- **status**: Indicates the success of the response.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to assess the downward momentum of a security over a specified time frame, helping inform trading decisions.\n\n### Example Questions:\n- \"What is the MINUS_DI for AAPL over the last week?\"\n- \"Can you provide the downward price movement strength for EUR/USD at 15-minute intervals?\"\n- \"How has the MINUS_DI changed for Bitcoin in the past month?\"",
  "GetTimeSeriesMinusDM": "The **Minus Directional Movement (MINUS_DM)** endpoint is designed to provide users with the MINUS_DM values, which are part of the Average Directional Index (ADX) technical indicator. This indicator measures the extent of downward price movement for a specified financial instrument over a defined time period.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval** (required): The time interval between data points, which can be specified as options like `1min`, `5min`, `1day`, etc.\n- **outputsize**: Specifies how many data points to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: Define the time range for the data requested.\n- **timezone**: Determines the timezone for the output datetime.\n- **time_period**: Indicates the number of periods over which to average for the MINUS_DM calculation.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, currency, and exchange details.\n- **values**: An array of time series data points, each containing the datetime and the corresponding MINUS_DM value.\n- **status**: Indicates the response status.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who want to assess the downward price movement of a security over time, helping them make informed trading decisions based on technical analysis.\n\n### Example User Questions:\n- \"What is the MINUS_DM value for AAPL over the last week?\"\n- \"Can you provide the MINUS_DM data for EUR/USD at a 15-minute interval?\"\n- \"How has the MINUS_DM changed for Bitcoin in the past month?\"",
  "GetTimeSeriesMom": "The **MOM** endpoint allows users to retrieve the Momentum (MOM) indicator, which helps traders assess the rate of change in a security's price over a specified period. This indicator is useful for identifying potential price trends and reversals in the market.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.).\n- **interval** (required): The time interval between data points, with options such as `1min`, `5min`, `1day`, etc.\n- **outputsize**: Specifies the number of data points to retrieve, ranging from `1` to `5000`, with a default of `30`.\n- **start_date** and **end_date**: Define the time range for the data requested, allowing for precise control over the data period.\n- **time_period**: Indicates the number of periods to average over for the momentum calculation, with a default of `9`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a timestamp and the corresponding MOM value.\n- **status**: Indicates the success of the request.\n\n### Usage Context:\nThis endpoint is particularly beneficial for traders looking to analyze price momentum for specific securities over chosen intervals. It can be used to assess market trends and make informed trading decisions.\n\n### Example Questions:\n- \"What is the momentum indicator for AAPL over the last week?\"\n- \"Can I get the MOM values for EUR/USD at 5-minute intervals?\"\n- \"How has the momentum changed for Bitcoin in the last month?\"",
  "GetTimeSeriesMult": "The `/mult` endpoint is designed to perform arithmetic multiplication on two input data series, which is particularly useful for combining or normalizing various technical indicators or price data. \n\nTo use this endpoint, you must provide the following key parameters:\n\n1. **symbol** (required): The ticker symbol of the instrument you are interested in, such as `AAPL` for Apple Inc.\n2. **interval** (required): The time interval between data points, which can be specified as options like `1min`, `5min`, or `1day`.\n3. **series_type_1**: The type of price data for the first series, such as `open`, `close`, `high`, or `low`.\n4. **series_type_2**: The type of price data for the second series, similar to `series_type_1`.\n\nYou can also specify additional parameters such as `start_date`, `end_date`, `outputsize`, and others to refine your query further.\n\nThe endpoint returns a JSON response containing metadata about the request, including the symbol, interval, and exchange details, as well as an array of time series data points. Each data point includes the datetime and the resulting multiplication value.\n\nHere are some example questions a user might ask that this endpoint could satisfy:\n- \"What is the multiplied value of the opening price and closing price for AAPL over the last week?\"\n- \"Can you show me the multiplication of the high and low prices for EUR/USD at 5-minute intervals?\"\n- \"How do the open and close prices for ETH/BTC compare when multiplied together?\"",
  "GetMutualFundsFamily": "This API endpoint retrieves a list of mutual fund families, allowing users to filter the results based on specific criteria. The primary input parameters are:\n\n1. **fund_family**: This optional query parameter lets users specify the investment company that manages the mutual funds. For example, you might search for funds managed by \"Jackson National.\"\n\n2. **country**: This parameter allows users to filter the mutual fund families by country name or its alpha code (e.g., \"United States\" or \"US\"). This helps in narrowing down the search to specific geographical locations.\n\nWhen a request is made to this endpoint, it returns a JSON response containing the status of the request and a list of mutual fund families organized by country. For instance, the response may include families from India and the United States, showcasing various investment companies in those regions.\n\nHere are a few questions a user might ask that this endpoint could help answer:\n- \"What mutual fund families are available in the United States?\"\n- \"Can you show me the fund families managed by Jackson National?\"\n- \"What are the mutual fund families in India?\"",
  "GetMutualFundsList": "This API endpoint retrieves a list of mutual funds available through Twelve Data, sorted in descending order by total assets value. The information is refreshed daily, ensuring users have access to the most current data.\n\nKey input parameters include:\n- **symbol**: Filter the list by the fund's ticker symbol.\n- **figi**: Use the financial instrument global identifier to narrow down results.\n- **isin**: Filter by the international securities identification number.\n- **cusip**: Specify the CUSIP code for the desired fund.\n- **country**: Limit results to funds from a specific country, using either the full name or the alpha code (e.g., \"United States\" or \"US\").\n- **fund_family**: Filter by the investment company managing the fund.\n- **fund_type**: Specify the type of fund (e.g., \"Small Blend\").\n- **performance_rating**: Filter funds based on their performance rating, which ranges from 0 to 5.\n- **risk_rating**: Specify a risk rating from 0 to 5 to find funds that match your risk tolerance.\n- **page**: Indicate the page number for pagination.\n- **outputsize**: Set the number of records to return in the response.\n\nThe endpoint returns a JSON object containing the total count of matching funds and a list of mutual funds, each with details such as the fund's symbol, name, country of incorporation, managing fund family, type, performance and risk ratings, currency, exchange, and market identifier code.\n\nUsers might ask:\n- \"What mutual funds are available in the United States with a performance rating of 4 or higher?\"\n- \"Can you show me a list of mutual funds managed by Jackson National?\"\n- \"What are the top-rated small blend mutual funds based on risk ratings?\"",
  "GetMutualFundsType": "This API endpoint allows users to retrieve a list of mutual fund types based on specific criteria. It can filter the results by the type of fund and the country in which the funds are available.\n\nKey input parameters include:\n- **fund_type**: A string that specifies the type of mutual fund you are interested in, such as \"Jackson National.\" This parameter helps narrow down the results to specific fund categories.\n- **country**: A string that can be either the full name of a country (e.g., \"United States\") or its alpha code (e.g., \"US\"). This parameter filters the mutual fund types based on the specified country.\n\nUpon a successful request, the endpoint returns a JSON object containing:\n- A **result** field, which is an object mapping country names to an array of mutual fund types available in that country.\n- A **status** field indicating the response status, typically \"ok\" if the request was successful.\n\nThis endpoint is useful for users looking to explore mutual fund options in different countries or to find specific types of funds based on their interests.\n\nHere are some example questions a user might ask that this endpoint could satisfy:\n- \"What types of mutual funds are available in the United States?\"\n- \"Can you list the mutual fund types for Jackson National?\"\n- \"What mutual fund categories can I find in Singapore?\"",
  "GetMutualFundsWorld": "This API endpoint retrieves comprehensive information about a specific mutual fund. To use it, you need to provide the fund's symbol as a required query parameter. Additionally, you can filter the results using optional parameters such as the Financial Instrument Global Identifier (FIGI), International Securities Identification Number (ISIN), CUSIP, or country name.\n\nThe endpoint returns a detailed breakdown of the mutual fund, which includes:\n\n- **Summary**: Basic information like fund name, type, currency, and performance metrics such as year-to-date return and expense ratio.\n- **Performance**: Detailed performance data, including trailing returns, annual returns, and quarterly returns.\n- **Risk**: Metrics related to the fund's risk, including volatility measures and valuation metrics.\n- **Ratings**: Performance, risk, and return ratings on a scale from 0 to 5.\n- **Composition**: Insights into the fund's asset allocation, major market sectors, and top holdings.\n- **Purchase Info**: Information about investment minimums and associated costs.\n- **Sustainability**: ESG scores and indicators regarding the fund's sustainable investment practices.\n\nThis endpoint is useful for investors looking to evaluate a mutual fund's performance, risk profile, and sustainability practices.\n\nHere are some questions a user might ask that this endpoint could help answer:\n- \"What is the performance history of the mutual fund with the symbol 1535462D?\"\n- \"Can you provide the risk ratings and expense ratios for the mutual fund identified by ISIN LU1206782309?\"\n- \"What are the top holdings and asset allocation for the mutual fund with the CUSIP 120678230?\"",
  "GetMutualFundsWorldComposition": "This API endpoint retrieves detailed information about the portfolio composition of a specific mutual fund. It provides insights into various aspects such as sector allocations, top holdings, asset allocation, and bond breakdowns.\n\nTo use this endpoint, you need to specify the mutual fund using its symbol (a required parameter), which is the ticker that uniquely identifies the fund. Additionally, you can filter the results using optional parameters like FIGI, ISIN, or CUSIP for more precise identification, as well as a country name or code to narrow down the results geographically. You can also specify the number of decimal places for floating-point values in the response.\n\nThe response will include a comprehensive breakdown of the mutual fund's composition, detailing major market sectors, asset allocation percentages (for cash, stocks, bonds, etc.), top holdings with their respective weights, and a bond breakdown by maturity and credit quality.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the sector composition of the mutual fund with the symbol 1535462D?\"\n- \"Can you show me the top holdings of the mutual fund identified by the ISIN LU1206782309?\"\n- \"What is the asset allocation for the mutual fund with the CUSIP 120678230?\"",
  "GetMutualFundsWorldPerformance": "This API endpoint retrieves detailed performance metrics for a specified mutual fund. Users can obtain information such as trailing returns, annual returns, quarterly returns, and load-adjusted returns by providing specific identifiers for the mutual fund.\n\nKey input parameters include:\n- **symbol** (required): The ticker symbol of the mutual fund, which uniquely identifies it.\n- **figi**: The Financial Instrument Global Identifier, another way to specify the mutual fund.\n- **isin**: The International Securities Identification Number, used for identifying the fund internationally.\n- **cusip**: The CUSIP number, which is a unique identifier for securities in the U.S.\n- **country**: A filter to specify the country associated with the mutual fund, either by name or alpha code.\n- **dp**: This parameter allows users to set the number of decimal places for the returned floating values, with a default of 5.\n\nThe endpoint returns a structured response that includes the mutual fund's performance data, detailing various return metrics over different periods, and a status indicating the success of the request.\n\nUsers might ask:\n- \"What are the annual returns for the mutual fund with the symbol '1535462D'?\"\n- \"Can you provide the quarterly performance of the mutual fund identified by its ISIN 'LU1206782309'?\"\n- \"How does the load-adjusted return of the mutual fund compare to its category average?\"",
  "GetMutualFundsWorldPurchaseInfo": "This API endpoint provides essential information regarding the purchase of a mutual fund, including details on minimum investment amounts, pricing, and available brokerages. \n\nTo use this endpoint, you need to specify the mutual fund you are interested in by providing its symbol ticker (a required parameter). Additionally, you can filter the results using various identifiers such as the Financial Instrument Global Identifier (FIGI), International Securities Identification Number (ISIN), or CUSIP. You can also filter by country name or code and specify the number of decimal places for floating values in the response.\n\nWhen you successfully call this endpoint, it returns a JSON object containing:\n- **Purchase information** for the mutual fund, which includes:\n  - **Minimum investment amounts** for initial and additional investments, including specific amounts for IRA accounts.\n  - **Pricing details**, such as the Net Asset Value (NAV), the highest and lowest prices over the last year, and the fund price at the end of the last month.\n  - A list of **brokerages** where the mutual fund can be purchased.\n- A **status** indicating the success of the request.\n\nThis endpoint is useful for investors looking to gather comprehensive purchase-related information about specific mutual funds.\n\nHere are a few questions a user might ask that this endpoint could answer:\n- \"What is the minimum investment required for the mutual fund with the symbol '1535462D'?\"\n- \"Can you provide the pricing details for the mutual fund identified by ISIN 'LU1206782309'?\"\n- \"Which brokerages offer the mutual fund with the FIGI 'BBG00HMMLCH1'?\"",
  "GetMutualFundsWorldRatings": "This API endpoint retrieves the ratings of a specific mutual fund. To use this endpoint, you must provide the mutual fund's symbol as a required parameter. Additionally, you can filter the results using optional parameters such as the financial instrument global identifier (FIGI), international securities identification number (ISIN), CUSIP, or the country name or code. You can also specify the number of decimal places for the returned floating values.\n\nWhen you make a request to this endpoint, it will return a JSON object containing the mutual fund's ratings, which include performance, risk, and return ratings, each scored from 0 to 5. The response will also indicate the status of the request.\n\nHere are a few example questions this endpoint could help answer:\n- \"What are the performance ratings for the mutual fund with the symbol 1535462D?\"\n- \"Can you provide the risk rating for the mutual fund identified by the ISIN LU1206782309?\"\n- \"What ratings does the mutual fund with CUSIP 120678230 have?\"",
  "GetMutualFundsWorldRisk": "The `/mutual_funds/world/risk` endpoint is designed to provide essential risk metrics for a specified mutual fund. By using this API, users can retrieve various statistics that help assess the risk associated with investing in a particular mutual fund.\n\nTo use this endpoint, you need to provide at least one of the following key parameters:\n- **symbol**: The ticker symbol of the mutual fund (e.g., \"1535462D\").\n- **figi**: The Financial Instrument Global Identifier (e.g., \"BBG00HMMLCH1\").\n- **isin**: The International Securities Identification Number (e.g., \"LU1206782309\").\n- **cusip**: The CUSIP identifier for the instrument (e.g., \"120678230\").\n- **country**: The name or alpha code of the country associated with the mutual fund (e.g., \"United States\").\n- **dp**: The number of decimal places for the returned floating-point values, which can range from 0 to 11.\n\nUpon a successful request, the endpoint returns a JSON object containing the mutual fund's risk and volatility statistics, including metrics such as alpha, beta, Sharpe ratio, and standard deviation, along with their respective averages for the fund's category. This information is crucial for investors looking to evaluate the performance and risk profile of mutual funds.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What are the risk metrics for the mutual fund with the symbol 1535462D?\"\n- \"Can you provide the volatility statistics for the mutual fund identified by its ISIN LU1206782309?\"\n- \"How does the risk of this fund compare to others in the same category?\"",
  "GetMutualFundsWorldSummary": "This API endpoint provides a summary of a specific mutual fund, allowing users to retrieve essential information about the fund based on various identifiers. \n\nTo use this endpoint, you need to provide at least one of the following parameters:\n- **symbol**: The ticker symbol of the mutual fund (e.g., \"1535462D\"), which is a required parameter.\n- **figi**: The Financial Instrument Global Identifier (e.g., \"BBG00HMMLCH1\"), which is optional.\n- **isin**: The International Securities Identification Number (e.g., \"LU1206782309\"), which is also optional.\n- **cusip**: The CUSIP identifier for the fund (e.g., \"120678230\"), which is optional.\n- **country**: The name or alpha code of the country (e.g., \"United States\") to filter the funds, which is optional.\n- **dp**: The number of decimal places for floating values, which defaults to 5 and can range from 0 to 11.\n\nUpon a successful request, the endpoint returns a JSON object containing:\n- A **mutual_fund** object that includes details such as the fund's name, type, currency, year-to-date return, expense ratio, net asset value, minimum investment, turnover rate, and a brief overview of the fund.\n- A **status** field indicating the response status (e.g., \"ok\").\n\nThis endpoint is useful for users looking to quickly gather key information about a mutual fund, such as its performance metrics and management details.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the summary of the mutual fund with the ticker symbol 1535462D?\"\n- \"Can you provide details about the mutual fund with the ISIN LU1206782309?\"\n- \"What are the performance metrics for the mutual fund in the United States?\"",
  "GetMutualFundsWorldSustainability": "This API endpoint provides information about the sustainability and ESG (Environmental, Social, Governance) metrics of mutual funds. By making a GET request to this endpoint, users can retrieve detailed sustainability scores and related data for a specific mutual fund.\n\nTo use this endpoint, you need to provide at least one of the following key parameters:\n- **symbol**: The ticker symbol of the mutual fund (e.g., \"1535462D\").\n- **figi**: The Financial Instrument Global Identifier (e.g., \"BBG00HMMLCH1\").\n- **isin**: The International Securities Identification Number (e.g., \"LU1206782309\").\n- **cusip**: The CUSIP identifier for the instrument (e.g., \"120678230\").\n- **country**: Optionally filter the results by the country name or its alpha code (e.g., \"United States\").\n- **dp**: Specify the number of decimal places for floating values, which can range from 0 to 11.\n\nThe response will include a sustainability score, which is an asset-weighted average of normalized ESG scores for the fund's holdings, along with scores for the environmental, social, and governance pillars. It also indicates whether the fund employs socially responsible or ESG principles in its investment selection.\n\nHere are some questions a user might ask that this endpoint could answer:\n- \"What is the sustainability score for the mutual fund with the symbol 1535462D?\"\n- \"Can you provide the ESG metrics for the mutual fund identified by the ISIN LU1206782309?\"\n- \"How does the mutual fund perform in terms of environmental, social, and governance criteria?\"",
  "GetTimeSeriesNatr": "The NATR (Normalized Average True Range) API endpoint provides a way to retrieve volatility indicators for various financial instruments, expressed as a percentage of the instrument's price. This allows users to assess the average price movement over a specified period, making it easier to compare volatility across different securities.\n\nTo use this endpoint, you need to provide the following key parameters:\n\n- **symbol** (required): The ticker symbol of the instrument you want to analyze, such as \"AAPL\" for Apple Inc.\n- **interval** (required): The time interval for the data points, which can be set to values like \"1min\", \"1day\", or \"1week\".\n- **time_period**: This specifies the number of periods to average over, typically set to a default of 14.\n\nAdditional optional parameters include identifiers like **isin**, **figi**, and **cusip** for more precise instrument identification, as well as filters for **exchange**, **country**, and **type** of asset. You can also specify date ranges with **start_date** and **end_date** to limit the data to a specific timeframe.\n\nThe endpoint returns a JSON response containing:\n- A **meta** object with details about the request, including the symbol, interval, currency, and exchange information.\n- An array of **values** that includes timestamps and their corresponding NATR values, indicating the volatility for each time point.\n\nThis API is useful for traders and analysts looking to evaluate market volatility and make informed trading decisions.\n\nHere are some examples of questions a user might ask that this endpoint could satisfy:\n- \"What is the NATR for AAPL over the last week?\"\n- \"Can you provide the normalized average true range for EUR/USD for the past month?\"\n- \"How volatile has ETH/BTC been in the last 24 hours?\"",
  "GetTimeSeriesObv": "The `/obv` endpoint provides access to the On Balance Volume (OBV) indicator, which is a cumulative volume-based tool used by traders to assess buying and selling pressure, aiding in the identification of potential price trends and reversals.\n\nTo use this endpoint, you need to specify the following key parameters:\n\n- **symbol** (required): The ticker symbol of the financial instrument you are interested in, such as `AAPL` for Apple Inc. \n- **interval** (required): This defines the time interval between data points, with options like `1min`, `5min`, `1day`, etc.\n- **outputsize**: This optional parameter allows you to specify the number of data points to retrieve, ranging from `1` to `5000`, with a default of `30` if not specified.\n\nAdditional optional parameters include filters like **isin**, **figi**, or **cusip** for identifying the instrument, as well as **exchange**, **country**, and **type** to narrow down the search. You can also set date ranges with **start_date** and **end_date**, and choose the output format (JSON or CSV).\n\nThe response from this endpoint includes the OBV values over the specified time intervals, along with metadata about the instrument such as its currency, exchange, and the specific time series data points.\n\nHere are a few example questions a user might ask that this endpoint could answer:\n- \"What is the On Balance Volume for AAPL over the last week?\"\n- \"Can you show me the OBV for EUR/USD at a 15-minute interval?\"\n- \"What is the OBV trend for Bitcoin over the past month?\"",
  "GetTimeSeriesPercent_B": "The **PERCENT_B** endpoint provides traders with the Percent B (%B) value, which is a key component of the Bollinger Bands indicator. This indicator helps assess a security's price position relative to its Bollinger Bands, aiding in the identification of potential overbought or oversold conditions.\n\nTo use this endpoint, you need to provide the following key parameters:\n- **symbol** (required): The ticker symbol of the instrument you are interested in, such as \"AAPL\" for Apple Inc.\n- **interval** (required): The time interval for the data points, which can range from \"1min\" to \"1month\".\n- **outputsize**: The number of data points to retrieve, with a default of 30, but it can be set between 1 and 5000.\n- **start_date** and **end_date**: Optional parameters to specify the date range for the data.\n\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, currency, and exchange details.\n- **values**: An array of time series data points, each with a timestamp and the corresponding Percent B value.\n- **status**: Indicates the success of the request.\n\nThis endpoint is particularly useful for traders looking to analyze price movements and make informed trading decisions based on technical indicators.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the current Percent B value for Apple stock?\"\n- \"Can you show me the Percent B values for EUR/USD over the last week?\"\n- \"How does the Percent B indicator look for Bitcoin in the last month?\"",
  "GetTimeSeriesPivotPointsHL": "The **Pivot Points High Low (PIVOT_POINTS_HL)** endpoint is designed to calculate support and resistance levels for a specified financial instrument based on its highest high and lowest low over a defined time period. This indicator helps traders identify potential entry and exit points in the market.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL` for Apple).\n- **interval** (required): The time interval between data points, such as `1min`, `5min`, or `1day`.\n- **outputsize**: Specifies the number of data points to retrieve, ranging from `1` to `5000`, with a default of `30`.\n- **start_date** and **end_date**: Define the time range for the data requested.\n- **timezone**: Indicates the timezone for the output datetime, such as `America/New_York` or `UTC`.\n- **type**: Specifies the asset class of the instrument (e.g., `Common Stock`, `ETF`).\n- **prepost**: A boolean to include pre-market and post-market data, available for certain plans.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, currency, and exchange details.\n- **values**: An array of time series data points, each with a datetime, and indicators for high and low pivot points.\n- **status**: Indicates the success of the request.\n\n### Usage Context:\nThis endpoint is particularly useful for traders looking to analyze price movements and make informed decisions based on technical analysis.\n\n### Example Questions:\n- \"What are the pivot points for AAPL over the last week?\"\n- \"Can I get the high and low pivot points for EUR/USD at 15-minute intervals?\"\n- \"What are the support and resistance levels for Bitcoin in the last month?\"",
  "GetTimeSeriesPlusDI": "The `/plus_di` endpoint retrieves the Plus Directional Indicator (PLUS_DI), which is a key component of the Average Directional Index (ADX) used to measure the strength of upward price movements for a specified financial instrument. \n\nTo use this endpoint, you need to provide the following key parameters:\n\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.).\n- **interval** (required): The time interval for the data points, with options like `1min`, `5min`, `1day`, etc.\n- **outputsize**: The number of data points to return, ranging from 1 to 5000, with a default of 30 if no date parameters are specified.\n\nAdditional optional parameters include identifiers like **isin**, **figi**, and **cusip** for the instrument, as well as **start_date** and **end_date** to specify the time range for the data. You can also choose the output format (JSON or CSV) and whether to include pre-market and post-market data.\n\nThe response will include a status indicator, metadata about the request, and an array of time series data points, each containing the date and the calculated PLUS_DI value.\n\nHere are a few example questions a user might ask that this endpoint could answer:\n- \"What is the PLUS_DI for AAPL over the last week?\"\n- \"Can you provide the PLUS_DI values for EUR/USD at 15-minute intervals?\"\n- \"How has the PLUS_DI changed for Bitcoin in the last month?\"",
  "GetTimeSeriesPlusDM": "The `/plus_dm` endpoint retrieves the Plus Directional Movement (PLUS_DM) values, which are part of the Average Directional Index (ADX) indicator used to assess the strength of upward price movements for a specified financial instrument. \n\nTo use this endpoint, you must provide the following key parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.), which is required to identify which security's data you want to analyze.\n- **interval**: This defines the time period between data points (e.g., `1min`, `5min`, `1day`), and it is also a required parameter.\n- **outputsize**: This optional parameter specifies how many data points to retrieve, with a maximum of 5000.\n\nYou can also filter results based on additional parameters such as `isin`, `figi`, `cusip`, and specify the exchange, country, or asset type. The endpoint allows for date filtering through `start_date` and `end_date`, and you can choose the output format (JSON or CSV).\n\nThe response includes a status message, metadata about the requested symbol, and an array of time series data points that contain the datetime and corresponding PLUS_DM values. \n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the Plus Directional Movement for AAPL over the last week?\"\n- \"Can you show me the PLUS_DM values for ETH/BTC at 15-minute intervals?\"\n- \"How has the PLUS_DM changed for stocks on the NASDAQ exchange recently?\"",
  "GetTimeSeriesPpo": "The `/ppo` endpoint retrieves the Percentage Price Oscillator (PPO) values for a specified financial instrument, which helps traders identify potential trend reversals and trading opportunities based on moving averages. \n\nTo use this endpoint, you must provide the following key parameters:\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.).\n- **interval** (required): The time interval between data points, such as `1min`, `5min`, or `1day`.\n- **fast_period**: The number of periods for the fast moving average, typically set to 12.\n- **slow_period**: The number of periods for the slow moving average, usually set to 26.\n\nAdditional optional parameters include `start_date` and `end_date` for specifying the time range of data, `outputsize` to limit the number of data points returned, and `format` to choose between JSON or CSV response formats.\n\nThe endpoint returns a JSON object containing:\n- **meta**: Information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each containing the datetime and the corresponding PPO value.\n- **status**: The response status indicating whether the request was successful.\n\nExample user questions that this endpoint can answer include:\n- \"What is the PPO for AAPL over the last week?\"\n- \"Can you provide the PPO values for EUR/USD at 5-minute intervals?\"\n- \"How does the PPO for Bitcoin compare over the last month?\"",
  "GetPrice": "This API endpoint allows users to retrieve the real-time price of a specified financial instrument. To use this endpoint, you must provide a unique identifier for the instrument, such as its symbol (e.g., \"AAPL\" for Apple Inc.), but you can also filter by other identifiers like FIGI, ISIN, or CUSIP. Additionally, you can specify the exchange where the instrument is traded, the country of the instrument, and its asset class (e.g., ETF, Common Stock).\n\nThe endpoint returns a JSON object containing the latest price of the requested instrument. You can also customize the response format (JSON or CSV) and the number of decimal places for the price value. There are optional parameters available for advanced users, such as pre-market or after-hours pricing and the delimiter for CSV output.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the current price of AAPL stock?\"\n- \"Can you give me the latest price for the ETF SPY?\"\n- \"How much is the bond with ISIN US0378331005 trading for right now?\"",
  "GetPriceTarget": "The `/price_target` API endpoint provides users with analysts' projections for the future price of a specific security. To use this endpoint, you need to specify at least one of the following parameters: \n\n- **symbol**: The ticker symbol of the security (e.g., \"AAPL\" for Apple Inc.).\n- **figi**: The financial instrument global identifier (e.g., \"BBG01293F5X4\").\n- **isin**: The international securities identification number (e.g., \"US0378331005\").\n- **cusip**: The CUSIP number for the instrument (e.g., \"594918104\").\n- **country**: The name or alpha code of the country (e.g., \"United States\" or \"US\").\n- **exchange**: The name of the exchange where the instrument is traded (e.g., \"NASDAQ\").\n\nUpon a successful request, the endpoint returns a JSON object containing the price target information, including the highest, median, lowest, and average price targets provided by analysts, as well as the current price of the security. Additionally, it includes metadata about the security, such as its name, currency, exchange, and type.\n\nHere are some example questions that this endpoint can help answer:\n- \"What is the average price target for Apple Inc.?\"\n- \"Can you provide the price target projections for a security with the CUSIP 594918104?\"\n- \"What are the current price and future price targets for securities traded on NASDAQ?\"",
  "GetProfile": "The `/profile` endpoint is designed to provide general information about a company based on a specified financial instrument. To use this endpoint, you must provide at least one of the following parameters: the symbol ticker (like \"AAPL\" for Apple), the financial instrument global identifier (FIGI), the international securities identification number (ISIN), or the CUSIP. You can also filter results by the exchange where the instrument is traded, the Market Identifier Code (MIC), or the country of the instrument.\n\nWhen you successfully call this endpoint, it returns a comprehensive profile of the company, including details such as the company name, exchange, sector, industry, number of employees, website, and a brief description of its activities. Additional information like the CEO's name, address, and contact details may also be included.\n\nHere are a few questions you might ask that this endpoint could help answer:\n- \"What is the profile of Apple Inc.?\"\n- \"Can you provide details about the company associated with the ticker symbol AAPL?\"\n- \"What information do you have on the company traded on NASDAQ with ISIN US0378331005?\"",
  "GetQuote": "The **Quote** endpoint allows users to efficiently retrieve the latest market quote for a specified financial instrument. To use this endpoint, you must provide the **symbol** of the instrument, which is a required parameter. Additionally, you can filter the results using various optional parameters such as **figi**, **isin**, or **cusip** to specify the instrument more precisely.\n\nKey input parameters include:\n- **symbol**: The ticker symbol of the instrument (e.g., \"AAPL\" for Apple Inc.).\n- **interval**: The time interval for the quote, with options ranging from \"1min\" to \"1month\".\n- **exchange**: The exchange where the instrument is traded (e.g., \"NASDAQ\").\n- **type**: The asset class of the instrument (e.g., \"ETF\", \"Common Stock\").\n- **format**: The desired response format, either JSON or CSV.\n\nThe endpoint returns a comprehensive set of data, including the latest price, volume, opening and closing prices, and various metrics such as the percentage change and average volume. It also provides additional information like whether the market is currently open and 52-week price metrics.\n\nExample questions a user might ask include:\n- \"What is the latest quote for Apple Inc.?\"\n- \"Can I get the current price and trading volume for a specific ETF?\"\n- \"What was the opening price for Tesla on the NASDAQ today?\"",
  "GetRecommendations": "The `/recommendations` endpoint provides insights into analyst recommendations for financial instruments, categorizing them as Strong Buy, Buy, Hold, or Sell, and returning an overall recommendation score. This endpoint is particularly useful for investors looking to gauge market sentiment regarding specific stocks or securities.\n\nTo use this endpoint, you must provide at least one of the following parameters to filter the recommendations:\n\n- **symbol**: A string representing the stock ticker (e.g., \"AAPL\" for Apple Inc.).\n- **figi**: The Financial Instrument Global Identifier for the instrument.\n- **isin**: The International Securities Identification Number for the instrument.\n- **cusip**: The Committee on Uniform Securities Identification Procedures number for the instrument.\n- **country**: The country where the instrument is traded (e.g., \"United States\").\n- **exchange**: The name of the exchange where the instrument is listed (e.g., \"NASDAQ\").\n\nThe response includes metadata about the instrument, such as its name, currency, and exchange details, as well as a breakdown of analyst recommendations over the current month and previous months. It also provides a rating score from 0 to 10, indicating the overall sentiment (with ranges defining Strong Sell to Strong Buy).\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What are the latest analyst recommendations for Apple Inc.?\"\n- \"Can you provide the recommendation score for stocks traded on the NASDAQ?\"\n- \"What is the consensus rating for a stock with the ISIN US0378331005?\"",
  "GetRevenueEstimate": "The `/revenue_estimate` endpoint provides analysts' estimates for a company's future quarterly and annual sales, specifically total revenue projections. To use this endpoint, you need to specify at least one of the following identifiers for the company: a stock symbol (e.g., \"AAPL\"), a financial instrument global identifier (FIGI), an international securities identification number (ISIN), or a CUSIP. You can also filter results by country name or code, exchange name, and specify the number of decimal places for the returned values.\n\nWhen you make a request, the endpoint returns a structured response that includes the estimated revenue data for the specified company. This data includes the average, low, and high revenue estimates from analysts, the number of analysts contributing to the estimate, and sales growth compared to the previous year's revenue.\n\nHere are a few example questions that this endpoint can help answer:\n- \"What is the revenue estimate for Apple Inc. for the next quarter?\"\n- \"Can you provide the sales growth estimate for a company with the ISIN US0378331005?\"\n- \"What are the analyst estimates for the upcoming annual revenue of a company traded on NASDAQ?\"",
  "GetTimeSeriesRoc": "The ROC (Rate of Change) API endpoint allows users to retrieve the percentage change in a security's price over a specified period. This indicator is useful for traders looking to identify potential price trends and reversals in various financial instruments.\n\nTo use this endpoint, you must provide the following key parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.), which is required to specify which security's data you want to analyze.\n- **interval**: A required parameter that defines the time gap between consecutive data points (e.g., `1min`, `1day`), which determines the granularity of the data returned.\n- **outputsize**: This optional parameter specifies the number of data points to retrieve, with a maximum of 5000.\n\nAdditional parameters allow for further customization, such as filtering by **isin**, **figi**, or **cusip**, specifying the **exchange** where the instrument is traded, and adjusting the **timezone** for the output datetime. You can also choose to include previous closing prices, adjust for splits and dividends, and specify the type of price series (e.g., close, open).\n\nThe endpoint returns a JSON response containing:\n- **meta**: General information about the request, including the symbol, interval, currency, and exchange details.\n- **values**: An array of time series data points, each containing the datetime and the corresponding ROC value.\n- **status**: The response status indicating whether the request was successful.\n\nHere are some example questions a user might ask that this endpoint can answer:\n- \"What is the rate of change for AAPL over the last week?\"\n- \"Can you show me the ROC values for EUR/USD at 15-minute intervals?\"\n- \"How has the ROC for Bitcoin changed over the past month?\"",
  "GetTimeSeriesRocp": "The ROCP (Rate of Change Percentage) endpoint allows users to calculate the percentage change in a security's price over a specified period, which can provide insights into market momentum and potential trend reversals. \n\nTo use this endpoint, you need to specify the following key parameters:\n- **symbol** (required): The ticker symbol of the instrument you are interested in, such as \"AAPL\" for Apple Inc.\n- **interval** (required): The time interval for the data points, which can range from \"1min\" to \"1month\".\n- **outputsize**: The number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: Optional parameters to specify the date range for the data.\n- **series_type**: Indicates the price type (e.g., \"close\", \"open\") on which the ROCP is calculated.\n\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, currency, and exchange details.\n- **values**: An array of time series data points, each containing the datetime and the calculated ROCP value.\n- **status**: Indicates the success of the request.\n\nThis endpoint is useful for financial analysts and traders who want to assess the momentum of a security or track its price changes over time. \n\nHere are a few examples of questions a user might ask that this endpoint could answer:\n- \"What is the ROCP for AAPL over the last week?\"\n- \"Can you show me the percentage change for EUR/USD in the last month?\"\n- \"How has the ROCP for Bitcoin changed in the last 24 hours?\"",
  "GetTimeSeriesRocr": "The ROCR (Rate of Change Ratio) endpoint allows users to retrieve the Rate of Change Ratio for a specified financial instrument, which helps traders identify potential price trends and reversals based on the ratio of the current price to its price from a specified number of periods ago.\n\nTo use this endpoint, you need to provide the following key parameters:\n\n1. **symbol** (required): The ticker symbol of the instrument you are interested in, such as \"AAPL\" for Apple Inc.\n2. **interval** (required): The time interval for the data points, which can range from \"1min\" to \"1month\".\n3. **time_period**: This specifies the number of periods to average over, with a range from 1 to 800.\n4. **start_date** and **end_date**: Optional parameters to define the specific time range for the data you want to retrieve.\n5. **outputsize**: This determines how many data points to return, with a maximum of 5000.\n\nThe endpoint returns a JSON object containing the requested ROCR values along with metadata about the instrument, such as the exchange it is traded on and the currency. The response includes an array of time series data points, each with a timestamp and the corresponding ROCR value.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the Rate of Change Ratio for AAPL over the last week?\"\n- \"Can you show me the ROCR values for EUR/USD at 15-minute intervals?\"\n- \"What was the ROCR for Bitcoin over the past month?\"",
  "GetTimeSeriesRocr100": "The ROCR100 endpoint provides the Rate of Change Ratio 100 (ROCR100) indicator, which measures the percentage change in a security's price over a specified period, expressed as a ratio to 100. This indicator is useful for analyzing momentum and identifying potential trend reversals in financial markets.\n\nTo use this endpoint, you need to provide the following key parameters:\n\n- **symbol** (required): The ticker symbol of the instrument you want to analyze (e.g., `AAPL` for Apple Inc.).\n- **interval** (required): The time interval for the data points, which can be set to values like `1min`, `5min`, `1day`, etc.\n- **outputsize**: The number of data points to retrieve, which can range from 1 to 5000, with a default of 30 if no date parameters are specified.\n- **start_date** and **end_date**: Optional parameters to specify the date range for the data you wish to retrieve.\n\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, currency, and exchange details.\n- **values**: An array of time series data points, each containing the datetime and the corresponding ROCR100 value.\n- **status**: The response status indicating whether the request was successful.\n\nThis endpoint is particularly useful for traders and analysts looking to assess the momentum of specific securities over time.\n\nHere are a few example questions a user might ask that this endpoint could answer:\n- \"What is the ROCR100 for Apple Inc. over the last week?\"\n- \"Can you show me the ROCR100 values for Bitcoin for the past month?\"\n- \"How has the ROCR100 changed for Tesla stock at 15-minute intervals?\"",
  "GetTimeSeriesRsi": "The `/rsi` endpoint provides access to the Relative Strength Index (RSI), a momentum oscillator used by traders to assess the speed and change of price movements, helping to identify overbought or oversold conditions and potential trend reversals.\n\nTo use this endpoint, you need to specify the following key parameters:\n\n1. **symbol** (required): The ticker symbol of the financial instrument you want to analyze, such as `AAPL` for Apple or `EUR/USD` for currency pairs.\n2. **interval** (required): The time interval for the data points, with options ranging from `1min` to `1month`.\n3. **outputsize**: The number of data points to retrieve, which can be set from `1` to `5000`, with a default of `30` if no date parameters are specified.\n\nAdditional optional parameters include:\n- **start_date** and **end_date** for filtering the data within a specific time range.\n- **series_type** to determine which price type (e.g., close, open) the RSI is calculated from.\n- **timezone** to specify the output time format.\n- **adjust** to set how prices are adjusted for splits and dividends.\n\nThe response will include a status message, metadata about the requested symbol, and an array of time series data points containing the RSI values along with their corresponding timestamps.\n\nThis endpoint is useful for questions like:\n- \"What is the current RSI for AAPL over the last week?\"\n- \"Can you provide the RSI values for EUR/USD at 15-minute intervals?\"\n- \"How has the RSI for Bitcoin changed over the past month?\"",
  "GetTimeSeriesRvol": "The RVOL endpoint provides traders with the Relative Volume (RVOL) of a specified security, which compares its current trading volume to its average trading volume over a defined period. This metric is useful for identifying unusual market activity, potential breakouts, and assessing the strength of price movements.\n\nTo use this endpoint, you need to provide the following key parameters:\n\n- **symbol** (required): The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval for the data points, which can be set to values like `1min`, `5min`, or `1day`.\n- **outputsize**: The number of data points to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: Optional parameters to specify the time range for the data.\n- **timezone**: Defines the timezone for the output datetime, which can be set to local exchange time or UTC.\n\nThe endpoint returns a JSON object containing the RVOL values over the specified intervals, along with metadata about the instrument, such as its exchange and currency.\n\nUsers might ask questions like:\n- \"What is the relative volume for AAPL over the last week?\"\n- \"Can you show me the RVOL data for EUR/USD in the last month?\"\n- \"How does the RVOL for Bitcoin compare to its average trading volume?\"",
  "GetSourceSanctionedEntities": "This API endpoint retrieves a list of sanctioned entities based on a specified sanction source, such as OFAC (Office of Foreign Assets Control), UK, EU, or AU. The key input parameter is the `source`, which must be provided in the URL path and indicates the specific sanctions authority you are querying.\n\nWhen you make a request to this endpoint, it returns a JSON response containing a list of sanctioned entities. Each entity includes details such as the symbol (ticker), name, market identifier code (MIC), and the country of origin. Additionally, the response provides information about the sanctions themselves, including the source, program, notes, and the specific sanction lists they belong to, along with the publication date of those lists.\n\nThis endpoint is useful for users looking to understand which entities are under sanctions from different authorities. \n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What entities are currently sanctioned by OFAC?\"\n- \"Can you provide a list of sanctioned organizations from the EU?\"\n- \"How many sanctioned entities are there from the UK?\"",
  "GetTimeSeriesSar": "The SAR endpoint provides access to the Parabolic SAR (Stop and Reverse) indicator, which is a trend-following tool used by traders to identify potential support and resistance levels based on price movements over time. This can assist in determining optimal entry and exit points for trades.\n\nTo use this endpoint, you need to specify the following key input parameters:\n\n- **symbol** (required): The ticker symbol of the financial instrument you are interested in, such as \"AAPL\" for Apple Inc. \n- **interval** (required): The time interval between data points, which can range from \"1min\" to \"1month\".\n- **outputsize**: The number of data points to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: Optional parameters to define a specific time range for the data.\n- **timezone**: Specifies the timezone for the output datetime, which can be set to local exchange time or UTC.\n\nThe endpoint returns a JSON object containing the SAR values over the specified time period, along with metadata such as the symbol, interval, and exchange information. Each data point includes the datetime and the corresponding SAR value.\n\nThis endpoint is particularly useful for traders looking to analyze price trends and make informed trading decisions. \n\nHere are a few example questions a user might ask that this endpoint could answer:\n- \"What is the Parabolic SAR for AAPL over the last week?\"\n- \"Can you provide the SAR values for EUR/USD with a 15-minute interval?\"\n- \"What were the SAR levels for Bitcoin in the last month?\"",
  "GetTimeSeriesSarExt": "The `/sarext` endpoint provides access to the Parabolic SAR Extended (SAREXT) indicator, which is a customizable technical analysis tool used by traders to identify potential entry and exit points in the market. This endpoint allows users to specify various parameters to tailor the indicator's calculations to their needs.\n\nKey input parameters include:\n\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.).\n- **interval** (required): The time interval between data points, with options like `1min`, `5min`, `1day`, etc.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, defaulting to 30 if no date parameters are set.\n- **start_date** and **end_date**: Define the time range for the data requested.\n- **adjust**: Specifies how prices should be adjusted (e.g., for splits or dividends).\n- **acceleration_long** and **acceleration_short**: These parameters control the acceleration values for long and short positions, respectively.\n\nThe endpoint returns a JSON object containing metadata about the request, including the symbol, interval, and exchange information, along with an array of time series data points. Each data point includes the date and time of the entry and the corresponding SAREXT value.\n\nThis endpoint is useful for traders looking to analyze market trends and make informed trading decisions based on the SAREXT indicator.\n\nUsers might ask questions like:\n- \"What is the SAREXT value for AAPL over the last week?\"\n- \"Can I get the SAREXT data for EUR/USD with a 15-minute interval?\"\n- \"How do I customize the SAREXT parameters for my trading strategy?\"",
  "GetTimeSeriesSma": "The `/sma` endpoint retrieves the Simple Moving Average (SMA) for a specified financial instrument over a given time period. This technical indicator helps traders identify trends and potential support or resistance levels by calculating the average price of the instrument over the defined interval.\n\nTo use this endpoint, you must provide the `symbol` of the instrument (like `AAPL` for Apple Inc.) and specify an `interval` (such as `1min`, `1day`, etc.) that determines the frequency of the data points. You can also include optional parameters such as `start_date` and `end_date` to limit the time range of the data, as well as `outputsize` to specify how many data points to return (from 1 to 5000, with a default of 30).\n\nThe response will include a status message, metadata about the requested symbol and interval, and an array of time series data points, each containing the date and the corresponding SMA value.\n\nHere are a few example questions a user might ask that this endpoint could answer:\n- \"What is the Simple Moving Average for AAPL over the last week?\"\n- \"Can you provide the SMA for EUR/USD at a 15-minute interval?\"\n- \"What was the SMA for Bitcoin over the last month?\"",
  "GetSplits": "The `/splits` endpoint provides information about stock splits for a specified company over the last decade or more. When you request data from this endpoint, you need to provide the ticker symbol of the company whose stock split information you want to retrieve. You can also filter the results using various identifiers such as FIGI, ISIN, or CUSIP, as well as specify the exchange where the stock is traded or the country of the instrument.\n\nKey parameters include:\n- **symbol**: The ticker symbol of the company (e.g., `AAPL` for Apple Inc.).\n- **figi**: The Financial Instrument Global Identifier for more precise filtering.\n- **isin**: The International Securities Identification Number for the instrument.\n- **cusip**: The CUSIP identifier for the stock.\n- **exchange**: The stock exchange where the instrument is listed (e.g., `NASDAQ`).\n- **country**: The country where the stock is traded.\n- **range**: The time range for the data (e.g., `last`, `1y`, `full`).\n- **start_date** and **end_date**: Optional parameters to specify the date range for the stock splits.\n\nThe response will include metadata about the instrument, such as its name, currency, and exchange details, along with a list of stock splits. Each split entry contains the date of the split, a description (e.g., \"4-for-1 split\"), and the split ratio.\n\nUsers might ask questions like:\n- \"What were the stock splits for Apple Inc. over the last five years?\"\n- \"Can you provide the split history for a stock with the ticker symbol AAPL?\"\n- \"What is the split ratio for Tesla's stock on August 31, 2020?\"",
  "GetSplitsCalendar": "The `/splits_calendar` endpoint allows users to retrieve stock split data presented in a calendar format for a specified date range. Users can customize their query by providing various parameters to filter the results based on specific financial instruments.\n\nKey input parameters include:\n- **symbol**: The ticker symbol of the stock (e.g., `AAPL` for Apple).\n- **figi**: The Financial Instrument Global Identifier for the stock.\n- **isin**: The International Securities Identification Number.\n- **cusip**: The CUSIP identifier for the stock.\n- **exchange**: The exchange where the stock is traded (e.g., `NASDAQ`).\n- **mic_code**: The Market Identifier Code according to ISO standards.\n- **country**: The country where the stock is traded (e.g., `United States`).\n- **start_date**: The beginning date for filtering split events (format: `YYYY-MM-DD`).\n- **end_date**: The ending date for filtering split events (format: `YYYY-MM-DD`).\n- **outputsize**: The number of data points to retrieve, with a maximum of 500.\n- **page**: The page number for pagination of results.\n\nThe endpoint returns a list of stock splits, including details such as the split date, stock symbol, exchange name, split description, and the ratio of the split (e.g., a `4-for-1 split`).\n\nHere are a few questions a user might ask that this endpoint could satisfy:\n- \"What were the stock splits for Apple between January 1, 2024, and December 31, 2024?\"\n- \"Can you show me the split events for stocks traded on NASDAQ in 2024?\"\n- \"What is the split ratio for Microsoft shares during the first half of 2024?\"",
  "GetTimeSeriesSqrt": "The `/sqrt` endpoint calculates the square root of a specified input value, which is particularly useful in advanced mathematical analyses or financial market calculations. \n\nTo use this endpoint, you need to provide the following key parameters:\n\n- **symbol** (required): This is the ticker symbol of the financial instrument you are interested in, such as `AAPL` for Apple Inc.\n- **interval** (required): This defines the time interval for the data points you want to retrieve, with options like `1min`, `5min`, or `1day`.\n- **outputsize**: This specifies how many data points to return, with a maximum of 5000.\n- **start_date** and **end_date**: These optional parameters allow you to filter the data for a specific date range.\n- **series_type**: This indicates the price type (e.g., close, open) on which the square root calculation is based.\n\nThe endpoint returns a JSON response containing metadata about the request, including the symbol, interval, and exchange details, along with an array of time series data points. Each data point includes the datetime and the calculated square root value.\n\nHere are a few examples of questions you might ask that this endpoint can answer:\n- \"What is the square root of the closing prices for AAPL over the last week?\"\n- \"Can you provide the square root values for the EUR/USD exchange rate at 1-minute intervals?\"\n- \"What are the square root values for Bitcoin over the past month?\"",
  "GetStatistics": "The `/statistics` endpoint provides a comprehensive overview of a company's key financial statistics and valuation metrics. This information is crucial for investors and analysts looking to assess the financial health and performance of a specific company.\n\nTo use this endpoint, you must provide a **symbol** parameter, which is the ticker symbol of the financial instrument you are interested in (e.g., `AAPL` for Apple Inc.). You can also filter the results using optional parameters such as **figi** (Financial Instrument Global Identifier), **isin** (International Securities Identification Number), **cusip** (Committee on Uniform Securities Identification Procedures), **exchange** (the trading venue), **mic_code** (Market Identifier Code), and **country** (where the instrument is traded).\n\nUpon a successful request, the endpoint returns a JSON object containing various statistics, including:\n\n- **Valuation metrics** such as market capitalization, enterprise value, and price-to-earnings ratios.\n- **Financials** detailing revenue, profit margins, and cash flow information.\n- **Stock statistics** like shares outstanding and average trading volumes.\n- **Stock price summary** including the 52-week high and low prices.\n- **Dividends and splits** information, which covers dividend rates and payout details.\n\nThis endpoint is particularly useful for users who might ask questions like:\n- \"What are the current financial statistics for Apple Inc.?\"\n- \"Can you provide the valuation metrics for a specific stock?\"\n- \"What is the market capitalization of a company traded on NASDAQ?\"",
  "GetTimeSeriesStdDev": "The `/stddev` endpoint calculates the Standard Deviation (STDDEV) of a specified financial instrument's price data over a given time period. This indicator is commonly used to assess the volatility of an asset, helping traders identify potential trading opportunities and manage risks.\n\nTo use this endpoint, you need to provide the following key parameters:\n\n1. **symbol** (required): The ticker symbol of the instrument you are interested in, such as `AAPL` for Apple or `EUR/USD` for the Euro to US Dollar exchange rate.\n2. **interval** (required): The time interval between data points, which can be specified in various formats like `1min`, `5min`, `1day`, etc.\n3. **time_period**: This parameter defines the number of periods over which the standard deviation is calculated, with a default of 9.\n4. **series_type**: Indicates which price type (e.g., `close`, `open`, `high`, `low`, `volume`) is used for the calculation.\n\nThe endpoint returns a JSON response containing the standard deviation values along with metadata about the request, including the symbol, interval, and exchange information. The data is structured as an array of time series points, each with a timestamp and the corresponding standard deviation value.\n\nHere are a few example questions a user might ask that this endpoint could help answer:\n- \"What is the standard deviation of Apple's stock price over the last week?\"\n- \"Can you show me the volatility of the EUR/USD exchange rate for the past month?\"\n- \"How has the standard deviation of Bitcoin changed over the last 24 hours?\"",
  "GetTimeSeriesStoch": "The STOCH endpoint provides access to the Stochastic Oscillator, a momentum indicator used in trading to assess potential overbought or oversold conditions of a security. By comparing a security's closing price to its price range over a specified period, traders can identify possible trend reversals.\n\nTo use this endpoint, you need to provide the following key parameters:\n- **symbol** (required): The ticker symbol of the instrument you want to analyze (e.g., \"AAPL\" for Apple).\n- **interval** (required): The time interval between data points, which can range from \"1min\" to \"1month\".\n- **fast_k_period**, **slow_k_period**, and **slow_d_period**: These parameters define the time periods for the fast %K line, slow %K line, and slow %D line of the Stochastic Oscillator, respectively.\n\nYou can also specify optional parameters such as the exchange, country, and date range for the data, as well as the desired output format (JSON or CSV).\n\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each including the datetime, slow_k, and slow_d values, which represent the calculated Stochastic Oscillator values.\n\nThis endpoint is useful for traders looking to analyze market conditions based on the Stochastic Oscillator. \n\nHere are some example questions a user might ask:\n- \"What is the Stochastic Oscillator value for AAPL over the last week?\"\n- \"Can you show me the Stochastic Oscillator for EUR/USD with a 5-minute interval?\"\n- \"What are the slow %K and %D values for Bitcoin over the past month?\"",
  "GetTimeSeriesStochF": "The `/stochf` endpoint provides access to the Stochastic Fast (STOCHF) indicator, which is a technical analysis tool used to measure momentum by comparing a security's closing price to its price range over a specified period. This indicator is particularly responsive to price changes, making it useful for traders looking for quick signals, although it may also generate false signals.\n\nTo use this endpoint, you need to provide several key parameters:\n\n- **symbol** (required): The ticker symbol of the financial instrument you want to analyze (e.g., `AAPL` for Apple Inc.).\n- **interval** (required): The time frame for the data points, such as `1min`, `5min`, or `1day`.\n- **fast_k_period**: The period for the fast %K line, which can range from 1 to 800.\n- **fast_d_period**: The period for the fast %D line, also ranging from 1 to 800.\n- **timezone**: Specifies the timezone for the output datetime, which can be set to the exchange's local time or UTC.\n\nThe endpoint returns a JSON object containing the requested time series data points, including the calculated fast %K and fast %D values, along with metadata about the instrument, such as its currency and exchange.\n\nHere are a few example questions that this endpoint can help answer:\n- \"What is the current Stochastic Fast indicator for Apple Inc. at a 1-minute interval?\"\n- \"Can you provide the fast %K and %D values for EUR/USD over the last hour?\"\n- \"How does the Stochastic Fast indicator behave for Bitcoin in the last 30 minutes?\"",
  "GetTimeSeriesStochRsi": "The STOCHRSI endpoint provides users with the Stochastic Relative Strength Index (STOCHRSI), a technical indicator that enhances the traditional RSI by applying the Stochastic formula to its values. This indicator is particularly useful for identifying overbought or oversold conditions and potential trend reversals in financial markets.\n\nTo use this endpoint, you need to specify the following key input parameters:\n\n- **symbol** (required): The ticker symbol of the financial instrument you want to analyze, such as `AAPL` for Apple Inc. \n- **interval** (required): The time interval for the data points, which can be set to values like `1min`, `5min`, `1day`, etc.\n- **rsi_length**: The period length for calculating the RSI component, typically set to a default of 14.\n- **stoch_length**: The period length for computing the stochastic oscillator of the RSI, also defaulting to 14.\n- **k_period**: The smoothing period for the %K line, defaulting to 3.\n- **d_period**: The smoothing period for the %D line, which is a moving average of %K, also defaulting to 3.\n\nThe endpoint returns a JSON object containing the calculated STOCHRSI values, including the K and D values over the specified time series, along with metadata about the request such as the symbol, interval, and exchange information.\n\nHere are some example questions a user might ask that this endpoint can answer:\n- \"What is the current Stochastic RSI for Apple stock?\"\n- \"Can you provide the STOCHRSI values for Bitcoin over the last week?\"\n- \"How do the K and D values of the STOCHRSI for Tesla compare over the past month?\"",
  "GetStocks": "The `/stocks` endpoint allows users to retrieve a list of stock symbols available through the Twelve Data API. This list is updated daily and provides essential details about various financial instruments.\n\nKey input parameters include:\n- **symbol**: Specify the ticker symbol (e.g., \"AAPL\") to get data for a specific stock.\n- **figi**: Filter results by the Financial Instrument Global Identifier (FIGI).\n- **isin**: Use the International Securities Identification Number (ISIN) for filtering.\n- **cusip**: Provide the CUSIP code to identify a specific financial security.\n- **exchange**: Filter stocks by the exchange name (e.g., \"NASDAQ\").\n- **country**: Specify the country name or code (e.g., \"United States\") to narrow down results.\n- **type**: Define the asset class, such as \"Common Stock\" or \"ETF\".\n- **format**: Choose the response format, either JSON or CSV.\n- **show_plan**: Include information about the access plan for the symbol.\n- **include_delisted**: Optionally include identifiers for delisted stocks.\n\nThe endpoint returns a JSON object containing an array of stock instruments, each with attributes like symbol, name, currency, exchange, and more. The response also indicates the status of the request.\n\nUsers might ask:\n- \"What are the available stock symbols for Apple?\"\n- \"Can you provide a list of stocks traded on the NASDAQ?\"\n- \"What details can you give me about stocks in the United States?\"",
  "GetTimeSeriesSub": "The `/sub` endpoint allows users to perform arithmetic subtraction between two input data series, which is particularly useful for analyzing and normalizing multiple technical indicators or price data. This endpoint is commonly used in financial applications to derive insights from time series data.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.).\n- **interval** (required): The time interval between data points, with options such as `1min`, `5min`, `1day`, etc.\n- **outputsize**: Specifies the number of data points to retrieve, ranging from `1` to `5000`, with a default of `30`.\n- **start_date** and **end_date**: Define the time range for the data requested.\n- **series_type_1** and **series_type_2**: Indicate which price types (e.g., `open`, `close`, `high`, `low`, `volume`) to use for the subtraction operation.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each containing a timestamp and the calculated subtraction value (`sub`).\n- **status**: Indicates the success of the request.\n\n### Usage Context:\nThis endpoint is ideal for users looking to analyze the difference between two price types over a specified time period, such as traders wanting to compare opening prices against closing prices.\n\n### Example User Questions:\n- \"What is the difference between the opening and closing prices of AAPL over the last week?\"\n- \"Can you show me the subtraction of the high prices from the low prices for EUR/USD in the last month?\"\n- \"How does the daily closing price of a stock compare to its opening price over the past year?\"",
  "GetTimeSeriesSum": "The `/sum` endpoint is designed to calculate the summation of a specified data series over a defined period. This is particularly useful for data analysis or when combined with other indicators. \n\nTo use this endpoint, you need to provide the following key parameters:\n\n- **symbol** (required): The ticker symbol of the instrument you want to analyze, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval between data points, which can be set to values like `1min`, `5min`, or `1day`.\n- **outputsize**: This parameter specifies how many data points to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: These optional parameters allow you to define a specific date range for the data you want to sum.\n- **series_type**: This indicates the price type (e.g., `close`, `open`) on which the summation is calculated.\n\nThe endpoint returns a JSON response containing the calculated sum values along with metadata about the request, such as the symbol, interval, and exchange information. Each data point in the response includes the datetime and the corresponding sum value.\n\nHere are a few example questions that this endpoint could help answer:\n- \"What is the sum of the closing prices for AAPL over the last week?\"\n- \"Can you provide the total trading volume for EUR/USD for the past month?\"\n- \"How much has the sum of the daily closing prices for ETH/BTC changed in the last 30 days?\"",
  "GetTimeSeriesSuperTrend": "The `/supertrend` endpoint provides access to the Supertrend indicator, a trend-following tool that helps traders identify potential entry and exit points in trending markets based on price, time, and volatility. \n\nTo use this endpoint, you need to specify several key parameters:\n\n1. **symbol** (required): The ticker symbol of the instrument you want to analyze, such as `AAPL` for Apple or `EUR/USD` for currency pairs.\n2. **interval** (required): The time interval between data points, with options ranging from `1min` to `1month`.\n3. **period**: The period used for calculating the Supertrend, which can be set between `1` and `800`.\n4. **multiplier**: This factor adjusts the sensitivity of the Supertrend indicator, with a default value of `3`.\n5. **outputsize**: The number of data points to retrieve, with a maximum of `5000`.\n\nAdditional optional parameters allow for filtering by identifiers like ISIN, FIGI, or CUSIP, as well as specifying the exchange, country, asset type, and time zone for the output data.\n\nThe endpoint returns a JSON object containing the Supertrend values over the specified time series, including metadata about the symbol, interval, currency, and exchange details. Each data point includes the datetime and the calculated Supertrend value.\n\nHere are some example questions a user might ask that this endpoint could satisfy:\n- \"What is the Supertrend value for AAPL over the last week?\"\n- \"Can you provide the Supertrend indicator for EUR/USD with a 15-minute interval?\"\n- \"How does the Supertrend for Bitcoin compare over the last month?\"",
  "GetTimeSeriesSuperTrendHeikinAshiCandles": "The `/supertrend_heikinashicandles` endpoint provides a combined analysis of the Supertrend indicator and Heikin Ashi Candles, which are used in trading to identify trends and potential entry or exit points. This endpoint allows users to retrieve time series data for a specified financial instrument, visualizing price action in a smoothed manner.\n\nKey input parameters include:\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL`).\n- **interval** (required): The time interval for the data points, such as `1min`, `5min`, or `1day`.\n- **outputsize**: The number of data points to retrieve, which can range from `1` to `5000`, with a default of `30`.\n- **start_date** and **end_date**: Optional parameters to specify the time range for the data.\n- **period**: The period used for calculating the Supertrend indicator, which can be set between `1` and `800`.\n- **multiplier**: A factor that adjusts the sensitivity of the indicator, with a default value of `3`.\n\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, currency, and exchange details.\n- **values**: An array of time series data points, each including the datetime, Supertrend value, and Heikin Ashi values (high, open, close, low).\n\nThis endpoint is useful for traders looking to analyze market trends and make informed decisions based on technical indicators. \n\nUsers might ask:\n- \"What is the Supertrend value for AAPL over the last week?\"\n- \"Can I get Heikin Ashi data for EUR/USD at a 15-minute interval?\"\n- \"How do the Supertrend and Heikin Ashi indicators compare for Bitcoin today?\"",
  "GetSymbolSearch": "The `/symbol_search` endpoint is designed to help users find financial instruments by searching for their symbols. This can include ticker symbols, ISINs, FIGIs, and other identifiers. The endpoint returns a list of matching symbols ranked by relevance, with the most pertinent results appearing first.\n\nTo use this endpoint, you need to provide a required parameter called `symbol`, which is the identifier you wish to search for (e.g., \"AAPL\" for Apple Inc.). You can also specify an optional parameter `outputsize` to determine how many results you want to receive, with a maximum limit of 120. Additionally, if you want to know which subscription plan the symbol is available under, you can set the `show_plan` parameter to true.\n\nThe response will include a status indicating success and a list of matching symbols, each containing details such as the instrument's name, the exchange it trades on, its type, and the currency used for trading. If you requested plan information, the response will also include details about the access level for the symbol.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the ticker symbol for Alcoa Corp?\"\n- \"Can you find me the ISIN for a specific stock?\"\n- \"How many results can I get for the symbol AAPL?\"",
  "GetTimeSeriesT3ma": "The T3MA endpoint provides access to the Triple Exponential Moving Average (T3MA), a technical indicator designed to smooth price data by applying three exponential moving averages. This helps reduce lag and offers a more accurate representation of market trends.\n\nTo use this endpoint, you need to provide the following key parameters:\n- **symbol** (required): The ticker symbol of the instrument you want to analyze, such as `AAPL` for Apple or `EUR/USD` for currency pairs.\n- **interval** (required): The time interval for the data points, with options like `1min`, `5min`, or `1day`.\n- **time_period**: Specifies the number of periods to average over, ranging from 1 to 800.\n- **v_factor**: A value between 0 and 1 that adjusts the indicator's volatility.\n\nYou can also filter results by additional parameters such as **isin**, **figi**, **cusip**, **exchange**, and **country**, among others. The endpoint returns a JSON object containing the T3MA values over the specified time series, along with metadata about the request.\n\nThis endpoint is useful for users looking to analyze market trends through advanced smoothing techniques. \n\nHere are some example questions a user might ask:\n- \"What is the T3MA for AAPL over the last week?\"\n- \"Can I get the T3MA values for EUR/USD at a 15-minute interval?\"\n- \"How do I adjust the T3MA calculation for different time periods and volatility factors?\"",
  "GetTaxInfo": "The `/tax_info` endpoint provides tax information for a specified financial instrument. To use this endpoint, you need to provide at least one of the following identifiers for the instrument: a ticker symbol (e.g., `SKYQ`), an ISIN (e.g., `US5949181045`), a FIGI (e.g., `BBG019XJT9D6`), or a CUSIP (e.g., `594918104`). Additionally, you can specify the exchange name (e.g., `Nasdaq`) or the Market Identifier Code (MIC) of the exchange (e.g., `XNAS`) where the instrument is traded.\n\nWhen you make a request to this endpoint, it returns a JSON response that includes metadata about the instrument, such as its name, exchange, and country, along with the relevant tax information. The tax information will indicate the applicable tax status for the instrument, which may include values like `us_1446f`, `spanish_ftt`, or `uk_stamp_duty`, among others.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the tax information for the instrument with ticker symbol SKYQ?\"\n- \"Can you provide the tax status for the ISIN US5949181045?\"\n- \"What are the tax implications for the instrument traded on Nasdaq?\"",
  "GetTechnicalIndicators": "The `/technical_indicators` endpoint provides a list of available technical indicators used in financial analysis. When you make a GET request to this endpoint, it returns a structured array of objects, each representing a different technical indicator.\n\nKey input parameters are not required for this endpoint, making it straightforward to use. The response includes several important details for each indicator, such as:\n\n- **full_name**: The complete name of the indicator (e.g., \"Moving Average Convergence Divergence\").\n- **description**: A brief explanation of what the indicator does.\n- **type**: The category of the indicator (e.g., \"Momentum Indicators\").\n- **enable**: A boolean indicating if the indicator is approved for use.\n- **overlay**: A boolean indicating if the indicator should be plotted over price bars.\n- **output_values**: An array detailing the output parameters of the indicator, including their display type and color.\n- **parameters**: Input parameters needed to calculate the indicator, along with their default values and ranges.\n\nThis endpoint is useful for developers looking to integrate various technical indicators into their applications without needing to know the specifics of each indicator beforehand.\n\nHere are some example questions a user might ask that this endpoint could help answer:\n- \"What technical indicators are available for financial analysis?\"\n- \"Can you provide a list of indicators along with their descriptions and usage?\"\n- \"Which indicators can be plotted over price bars?\"",
  "GetTimeSeriesTema": "The TEMA (Triple Exponential Moving Average) endpoint provides users with a technical analysis tool that applies three exponential moving averages to price data, offering a smoother representation of trends while minimizing lag. This endpoint is particularly useful for traders and analysts looking to evaluate market trends over specific time intervals.\n\nTo utilize this endpoint, users must provide the following key parameters:\n\n1. **symbol** (required): The ticker symbol of the financial instrument (e.g., `AAPL` for Apple Inc.).\n2. **interval** (required): The time interval between data points, with options ranging from `1min` to `1month`.\n3. **outputsize**: Specifies the number of data points to retrieve, with a maximum of 5000.\n4. **series_type**: Indicates the price type used for calculations (e.g., `close`, `open`, `high`, `low`, `volume`).\n5. **time_period**: The period used for the TEMA calculation, defaulting to 9.\n\nAdditionally, users can filter results by various identifiers such as ISIN, FIGI, CUSIP, and specify the exchange, country, or asset class of the instrument.\n\nThe endpoint returns a JSON object containing the TEMA values along with metadata about the request, including the symbol, interval, currency, and the exchange where the instrument is traded. The response includes an array of time series data points, each with a timestamp and the corresponding TEMA value.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the TEMA for AAPL over the last week?\"\n- \"Can I get the TEMA values for EUR/USD at 15-minute intervals?\"\n- \"What is the Triple Exponential Moving Average for Bitcoin for the last month?\"",
  "GetTimeSeries": "The `/time_series` endpoint is designed to retrieve both metadata and time series data for a specified financial instrument. Users can request this data by providing a unique symbol (like a stock ticker or currency pair) and specifying a time interval for the data points, such as \"1min\" or \"1day\". \n\nKey input parameters include:\n- **symbol** (required): The ticker symbol of the instrument (e.g., `AAPL` for Apple).\n- **interval** (required): The time gap between data points, which can range from \"1min\" to \"1month\".\n- **outputsize**: The number of data points to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: Optional parameters to specify a date range for the data.\n- **timezone**: Determines the timezone for the output timestamps.\n\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the requested instrument, including its symbol, interval, currency, exchange, and asset type.\n- **values**: An array of time series data points, each containing the open, high, low, and close prices, as well as volume information for non-currency instruments.\n\nThis endpoint is useful for financial analysts, traders, or anyone interested in historical price data for various instruments. \n\nUsers might ask:\n- \"What are the historical prices for AAPL over the last month?\"\n- \"Can I get the time series data for EUR/USD with a 5-minute interval?\"\n- \"What was the trading volume for Bitcoin on a specific date?\"",
  "GetTimeSeriesCross": "The `/time_series/cross` endpoint is designed to provide users with time series data for financial instruments, specifically focusing on the cross rates between a base currency and a quote currency. This API returns both metadata about the requested instruments and an array of time series data points that include Open, High, Low, and Close prices, all ordered by time in descending order. It supports various types of instruments, including stocks, forex, and cryptocurrencies.\n\nTo use this endpoint, you must specify the following key input parameters:\n- **Base Currency (`base`)**: The symbol of the base currency (e.g., \"JPY\").\n- **Quote Currency (`quote`)**: The symbol of the quote currency (e.g., \"BTC\").\n- **Interval (`interval`)**: The time interval between data points, which can be set to values like \"1min\", \"1day\", or \"1week\".\n- **Output Size (`outputsize`)**: The number of data points to retrieve, with a maximum of 5000.\n- **Format (`format`)**: The desired response format, either JSON or CSV.\n\nThe endpoint returns a JSON object containing:\n- **Meta Information**: General details about the base and quote instruments, including their symbols and exchanges.\n- **Values**: An array of time series data points, each containing the datetime, open, high, low, and close prices for the specified interval.\n\nThis endpoint is particularly useful for users interested in analyzing price movements over time for different currency pairs or financial instruments.\n\nUsers might ask:\n- \"What are the historical price movements for JPY against BTC over the last month?\"\n- \"Can I get the time series data for USD/EUR in 15-minute intervals?\"\n- \"What were the open and close prices for ETH against USD on a daily basis last week?\"",
  "GetTimeSeriesTRange": "The TRANGE endpoint provides the True Range (TRANGE) indicator, which is a measure of price movement volatility over a specified period. This indicator is valuable for traders as it helps identify potential trading opportunities and manage risk.\n\nTo use this endpoint, you need to specify the following key parameters:\n\n- **symbol** (required): The ticker symbol of the financial instrument you are interested in, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval between data points, which can be set to values like `1min`, `5min`, `1day`, etc.\n- **outputsize**: This optional parameter defines how many data points to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: These optional parameters allow you to filter the data for a specific date range.\n- **timezone**: You can specify the timezone for the output datetime, which can be set to local exchange time or UTC.\n\nThe response from this endpoint includes an array of time series data points, each containing the datetime and the corresponding TRANGE value. Additionally, metadata about the instrument, such as its exchange and asset class, is provided.\n\nThis endpoint is useful for users looking to analyze market volatility and make informed trading decisions. \n\nHere are a few example questions a user might ask that this endpoint could satisfy:\n- \"What is the True Range for AAPL over the last week?\"\n- \"Can you provide the TRANGE data for EUR/USD at 5-minute intervals?\"\n- \"What was the TRANGE for Bitcoin yesterday?\"",
  "GetTimeSeriesTrima": "The TRIMA endpoint provides access to the Triangular Moving Average (TRIMA), a technical indicator used to smooth out price data over a specified period. This indicator gives more weight to prices in the middle of the range, offering a balanced view of price action for various financial instruments.\n\nTo use this endpoint, you need to specify the following key parameters:\n- **symbol** (required): The ticker symbol of the instrument you are interested in, such as \"AAPL\" for Apple Inc.\n- **interval** (required): The time interval between data points, with options ranging from \"1min\" to \"1month\".\n- **time_period**: This defines the number of periods to average over, with a range from 1 to 800.\n\nYou can also provide additional optional parameters, such as **start_date** and **end_date** to filter the data by specific time frames, or **outputsize** to control the number of data points returned (from 1 to 5000).\n\nThe response from this endpoint includes:\n- A **meta** object containing details about the request, including the symbol, interval, currency, and exchange information.\n- An array of **values**, each containing the datetime and the corresponding TRIMA value for that period.\n- A **status** field indicating the success of the request.\n\nThis endpoint is useful for traders and analysts looking to analyze price trends and make informed decisions based on historical data.\n\nHere are some example questions a user might ask that this endpoint could answer:\n- \"What is the Triangular Moving Average for AAPL over the last week?\"\n- \"Can you provide the TRIMA values for EUR/USD at 15-minute intervals?\"\n- \"How has the TRIMA changed for Bitcoin in the last month?\"",
  "GetTimeSeriesTsf": "The `/tsf` endpoint provides a Time Series Forecast (TSF) indicator, which uses linear regression analysis to project future price levels of financial instruments. This is particularly useful for traders looking to identify potential support, resistance, and trend directions.\n\nTo use this endpoint, you need to specify the following key input parameters:\n\n- **symbol** (required): The ticker symbol of the financial instrument you want to analyze (e.g., `AAPL` for Apple Inc.).\n- **interval** (required): The time interval between data points, which can be set to options like `1min`, `5min`, `1day`, etc.\n- **outputsize**: The number of data points to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: Optional parameters to define a specific date range for the forecast data.\n\nThe endpoint returns a JSON response containing:\n\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a timestamp and the corresponding TSF value.\n- **status**: Indicates the success of the request.\n\nThis endpoint is particularly useful for users interested in financial forecasting. Here are some example questions a user might ask:\n\n1. \"What is the projected price level for AAPL over the next week?\"\n2. \"Can you show me the time series forecast for EUR/USD at 15-minute intervals?\"\n3. \"What are the TSF values for Bitcoin over the last month?\"",
  "GetTimeSeriesTypPrice": "The TYPPRICE endpoint provides users with the Typical Price indicator, which is calculated as the average of a security's high, low, and close prices. This indicator offers a simplified view of price action for various financial instruments.\n\nTo use this endpoint, you need to specify the following key input parameters:\n\n- **symbol** (required): The ticker symbol of the instrument you are interested in (e.g., \"AAPL\" for Apple Inc.).\n- **interval** (required): The time interval for the data points, with options ranging from \"1min\" to \"1month\".\n- **outputsize**: The number of data points to retrieve, which can be set between 1 and 5000, with a default of 30 if no date parameters are provided.\n\nAdditional optional parameters include identifiers like **isin**, **figi**, and **cusip** for more precise instrument selection, as well as date filters (**start_date** and **end_date**) to specify the time range for the data. You can also choose the **timezone** for the output, the format of the response (JSON or CSV), and whether to include previous closing prices or OHLC values in the output.\n\nThe endpoint returns a JSON object containing the requested time series data, including the Typical Price values along with metadata about the request, such as the instrument's exchange and currency.\n\nHere are some example questions a user might ask that this endpoint could satisfy:\n- \"What is the typical price for AAPL over the last week?\"\n- \"Can I get the typical price for EUR/USD in 15-minute intervals?\"\n- \"What was the typical price for Bitcoin on August 22, 2024?\"",
  "GetTimeSeriesUltOsc": "The ULTOSC endpoint provides access to the Ultimate Oscillator (ULTOSC), a momentum indicator that helps traders identify potential overbought or oversold conditions in financial instruments. By combining short, intermediate, and long-term price movements, it aids in spotting trend reversals.\n\nTo use this endpoint, you need to specify the following key parameters:\n- **symbol** (required): The ticker symbol of the instrument you want to analyze, such as \"AAPL\" for Apple Inc.\n- **interval** (required): The time interval for the data points, with options like \"1min\", \"5min\", \"1day\", etc.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30 if no date parameters are provided.\n- **time_period_1**, **time_period_2**, **time_period_3**: These define the periods used in the ULTOSC calculation, with default values of 7, 14, and 28 respectively.\n\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, currency, and exchange details.\n- **values**: An array of time series data points, each including the datetime and the calculated ULTOSC value.\n- **status**: Indicates the success of the request.\n\nThis endpoint is useful for traders looking to analyze market trends and make informed decisions based on the ULTOSC indicator.\n\nHere are some example questions a user might ask:\n- \"What is the Ultimate Oscillator value for AAPL over the last week?\"\n- \"Can you provide the ULTOSC for EUR/USD at a 15-minute interval?\"\n- \"How do I retrieve ULTOSC data for a specific date?\"",
  "GetTimeSeriesVar": "The `/var` endpoint provides access to the Variance (VAR) indicator, which measures the dispersion of a data series from its mean. This indicator is commonly used in financial contexts to assess volatility and identify potential trading opportunities, making it a valuable tool for risk management.\n\nTo use this endpoint, you need to specify the following key input parameters:\n\n- **symbol** (required): The ticker symbol of the financial instrument you are interested in, such as `AAPL` for Apple or `EUR/USD` for a currency pair.\n- **interval** (required): The time interval for the data points, with options ranging from `1min` to `1month`.\n- **outputsize**: This parameter allows you to define the number of data points to retrieve, with a maximum of 5000.\n\nAdditional optional parameters include:\n- **start_date** and **end_date**: To specify the date range for the data.\n- **series_type**: To indicate which price type (e.g., close, open) the VAR calculation should be based on.\n- **timezone**: To set the timezone for the output datetime.\n\nThe endpoint returns a JSON object containing the VAR values over the specified time series, along with metadata about the instrument, such as its exchange and currency.\n\nUsers might ask questions like:\n- \"What is the variance for AAPL over the last month?\"\n- \"Can you provide the VAR for EUR/USD at a 5-minute interval?\"\n- \"How volatile has the BTC/USD pair been in the last week?\"",
  "GetTimeSeriesVwap": "The VWAP (Volume Weighted Average Price) endpoint provides users with the average trading price of a financial instrument, weighted by the volume of trades, which is essential for trading analysis and execution evaluation. \n\nTo use this endpoint, you need to specify the following key input parameters:\n\n- **symbol** (required): The ticker symbol of the instrument you are interested in, such as \"AAPL\" for Apple Inc.\n- **interval** (required): The time interval for the data points, which can range from \"1min\" to \"1month\".\n- **outputsize**: The number of data points to retrieve, with a maximum of 5000.\n- **start_date** and **end_date**: Optional parameters to define the specific date range for the data.\n- **timezone**: Specifies the timezone for the output datetime display.\n\nThe endpoint returns a JSON object that includes the VWAP values along with the corresponding datetime, as well as additional metadata about the request, such as the instrument's exchange and currency.\n\nHere are a few example questions a user might ask that this endpoint can answer:\n- \"What is the VWAP for AAPL over the last week?\"\n- \"Can you provide the VWAP data for EUR/USD for the past month?\"\n- \"How does the VWAP for Bitcoin compare over different time intervals?\"",
  "GetTimeSeriesWclPrice": "The `/wclprice` endpoint provides access to the Weighted Close Price (WCLPRICE) indicator, which calculates an average of a security's high, low, and close prices, with a greater emphasis on the close price. This indicator offers a balanced perspective on price movements for various financial instruments.\n\nTo use this endpoint, you need to specify the following key parameters:\n- **symbol** (required): The ticker symbol of the instrument you want to analyze, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval for the data points, with options like `1min`, `1day`, or `1week`.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30 if no date parameters are set.\n\nYou can also filter the results by other identifiers such as ISIN, FIGI, or CUSIP, specify the exchange, or set the timezone for the output. Additionally, you can request data for specific date ranges using `start_date` and `end_date`, or for a specific date using the `date` parameter.\n\nThe response includes:\n- A **meta** object with details about the request, including the symbol, interval, currency, and exchange information.\n- An array of **values** containing time series data points, each with a timestamp and the corresponding WCLPRICE value.\n- A status message indicating the success of the request.\n\nThis endpoint is useful for users looking to analyze price trends over time for various financial instruments. \n\nHere are a few example questions a user might ask that this endpoint can answer:\n- \"What is the weighted close price for AAPL over the last week?\"\n- \"Can you provide the WCLPRICE for EUR/USD at 5-minute intervals?\"\n- \"What was the WCLPRICE for Bitcoin on October 27, 2021?\"",
  "GetTimeSeriesWillR": "The `/willr` endpoint provides access to the Williams %R (WILLR) momentum oscillator, which helps traders assess whether a security is overbought or oversold by comparing its closing price to its high and low range over a specified period. \n\nTo use this endpoint, you need to provide the following key parameters:\n- **symbol** (required): The ticker symbol of the instrument you want to analyze, such as `AAPL` for Apple or `EUR/USD` for a currency pair.\n- **interval** (required): The time interval for the data points, which can range from `1min` to `1month`.\n- **time_period**: This specifies the number of periods to average over, with a default of 14.\n\nAdditional optional parameters include filters for the instrument's ISIN, FIGI, or CUSIP, as well as options for output size, date range, timezone, and response format.\n\nWhen you make a request to this endpoint, it returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, currency, and exchange details.\n- **values**: An array of time series data points, each including the datetime and the corresponding Williams %R value.\n- **status**: Indicates the success of the request.\n\nThis endpoint is particularly useful for traders looking to identify potential trend reversals based on momentum analysis.\n\nHere are a few example questions a user might ask that this endpoint could satisfy:\n- \"What is the Williams %R for AAPL over the last week?\"\n- \"Can you show me the momentum oscillator values for EUR/USD at a 15-minute interval?\"\n- \"How is the Williams %R indicator performing for Bitcoin today?\"",
  "GetTimeSeriesWma": "The WMA (Weighted Moving Average) endpoint allows users to retrieve the weighted moving average of a specified financial instrument over a defined time period. This indicator gives more importance to recent prices, making it a useful tool for analyzing price trends.\n\nTo use this endpoint, you need to provide the following key parameters:\n\n- **symbol** (required): The ticker symbol of the instrument you want to analyze, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval between data points, with options like `1min`, `5min`, or `1day`.\n- **time_period**: This specifies the number of periods to average over, ranging from 1 to 800.\n- **series_type**: Indicates the price type used for the calculation, such as `close`, `open`, `high`, or `low`.\n\nAdditional optional parameters include filters for ISIN, FIGI, CUSIP, exchange, and country, as well as settings for output size, date range, and response format.\n\nThe endpoint returns a JSON object containing the WMA values along with metadata about the request, such as the symbol, interval, and exchange details. The data points include timestamps and corresponding WMA values, allowing for detailed analysis of price movements.\n\nHere are a few example questions a user might ask that this endpoint could answer:\n- \"What is the weighted moving average for AAPL over the last week?\"\n- \"Can you provide the WMA for EUR/USD at 15-minute intervals?\"\n- \"What was the WMA value for Bitcoin today?\""
}