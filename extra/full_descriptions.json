{
  "GetTimeSeriesAcos": "This API endpoint, `/acos`, is a GET request that returns the Arccosine (ACOS) indicator for a specified financial instrument. The ACOS indicator calculates the inverse cosine of a given input value, which is typically used in trigonometric and harmonic pattern analysis within financial markets.\n\nThe key input parameters for this endpoint include:\n\n- `symbol`: This is the ticker symbol of the instrument, such as `AAPL` for Apple Inc. This is a required parameter.\n- `interval`: This specifies the time gap between two consecutive data points in the time series. It is also a required parameter.\n- `outputsize`: This specifies the number of data points to retrieve. It can range from 1 to 5000, with a default of 30 when no date parameters are set.\n- `start_date` and `end_date`: These parameters can be used to specify the start and end dates for the data selection.\n- `format`: This specifies the format of the response data, which can be either JSON or CSV.\n\nThe endpoint returns an object containing metadata about the request (such as the symbol, interval, and currency of the instrument) and an array of values. Each value in the array is an object containing the datetime and the calculated ACOS value.\n\nHere are a few examples of questions a user might ask that this endpoint could satisfy:\n\n- \"What is the Arccosine indicator for Apple Inc. over the past month?\"\n- \"Can I get the ACOS values for the EUR/USD pair for the last 100 data points?\"\n- \"What are the ACOS values for the ETH/BTC pair between August 9, 2019, 15:50:00 and August 9, 2019, 15:55:00?\"",
  "GetTimeSeriesAd": "This API endpoint retrieves the Accumulation/Distribution (AD) technical indicator for a specified financial instrument. The AD indicator is a volume-based tool used in chart analysis to identify potential buying or selling pressure in a security. It measures the cumulative flow of money into and out of a financial instrument by comparing its closing price to its price range, while considering trading volume.\n\nThe key input parameters for this endpoint include the symbol ticker of the instrument, the interval between two consecutive points in the time series, and the number of data points to retrieve. You can also filter the data by various identifiers such as the international securities identification number (ISIN), the FIGI, or the CUSIP of the instrument. Other optional parameters allow you to specify the exchange where the instrument is traded, the country, the asset class, and the timezone for the output datetime.\n\nThe endpoint returns a JSON object that includes general information about the request, such as the symbol, interval, currency, and exchange of the instrument. It also provides the AD values for each time point in the specified interval.\n\nHere are some questions a user might ask that this endpoint could satisfy:\n- \"What is the Accumulation/Distribution indicator for Apple stock over the past 30 minutes?\"\n- \"Can I get the AD values for the EUR/USD pair with a 15-minute interval?\"\n- \"How can I retrieve the AD indicator for a specific cryptocurrency over a specified date range?\"",
  "GetTimeSeriesAdd": "This API endpoint, `/add`, is a GET method that retrieves the result of an arithmetic addition of two input data series for a specified financial instrument. This operation is typically used to combine multiple technical indicators or price data.\n\nThe key required parameters for this endpoint are:\n- `symbol`: The ticker symbol of the instrument for which data is requested, such as 'AAPL' for Apple Inc.\n- `interval`: The time gap between consecutive data points in the time series, with options ranging from '1min' to '1month'.\n\nThe endpoint also accepts a variety of optional parameters to further filter and format the data. For example, you can specify the `start_date` and `end_date` to limit the time range for the data. You can also choose the `format` of the response data, either 'JSON' or 'CSV'. \n\nThe response from this endpoint includes general information about the request, such as the symbol, interval, and currency of the instrument, as well as an array of time series data points. Each data point includes a datetime and the result of the arithmetic addition for that time.\n\nHere are a few examples of questions a user might ask that this endpoint could satisfy:\n- \"What is the arithmetic addition of two data series for Apple Inc. over the past month?\"\n- \"Can I get the combined technical indicators for the EUR/USD pair for the last week?\"\n- \"How has the arithmetic addition of price data for ETH/BTC changed over a specified time range?\"",
  "GetTimeSeriesAdOsc": "The `GET /adosc` endpoint provides the Accumulation/Distribution Oscillator (ADOSC) values for a specified financial instrument. The ADOSC is a momentum indicator used to identify buying or selling pressure and potential trend reversals by comparing short-term and long-term price and volume trends.\n\nThe key required parameters for this endpoint are the `symbol` of the instrument and the `interval` between two consecutive points in the time series. The `symbol` can be a ticker like `AAPL` or `EUR/USD`, and the `interval` can be values like `1min`, `5min`, `15min`, etc. \n\nThe endpoint also allows for optional parameters like `isin`, `figi`, `cusip`, `exchange`, `mic_code`, `country`, `type`, `timezone`, `start_date`, `end_date`, `date`, `order`, `prepost`, `format`, `delimiter`, `dp`, `previous_close`, `adjust`, `fast_period`, `slow_period`, and `include_ohlc` to further customize the request.\n\nThe response from this endpoint includes general information about the request in the `meta` field, such as the symbol, interval, currency, exchange timezone, exchange, mic code, type, and indicator. The `values` field contains an array of time series data points, each with a datetime and an ADOSC value.\n\nHere are a few examples of questions this endpoint could answer:\n- \"What are the ADOSC values for Apple's stock at 1-minute intervals?\"\n- \"Can I get the ADOSC values for the EUR/USD pair at 15-minute intervals?\"\n- \"What were the ADOSC values for the ETH/BTC pair on a specific date?\"",
  "GetTimeSeriesAdx": "The `/adx` endpoint provides the Average Directional Index (ADX) for a specified financial instrument, which helps traders assess the strength of a market trend. This endpoint is useful for determining whether a market is trending or ranging, regardless of the trend's direction.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval between data points, such as `1min`, `1h`, or `1day`.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the date range for the data. If `timezone` is specified, these dates are interpreted in that timezone.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** Information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of data points, each with a timestamp and the corresponding ADX value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is ideal for traders and analysts looking to evaluate the strength of a trend for a specific financial instrument over a given time period.\n\n### Example Questions:\n1. \"What is the ADX value for Apple stock on a 1-minute interval?\"\n2. \"How strong is the trend for EUR/USD over the past week?\"\n3. \"Can I get the ADX for Bitcoin with data points every 15 minutes?\"",
  "GetTimeSeriesAdxr": "The `/adxr` endpoint provides the Average Directional Movement Index Rating (ADXR) for a specified financial instrument. The ADXR is a smoothed version of the ADX, which measures trend strength over time. This endpoint is useful for traders and analysts who want to assess the stability and strength of trends in financial markets.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument, such as `AAPL` for Apple Inc. This identifies the specific asset for which the ADXR data is requested.\n- **interval** (required): Specifies the time interval for the data points, such as `1min`, `1h`, or `1day`. This determines the frequency of the data returned.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000. Defaults to 30 if no date parameters are set.\n- **start_date** and **end_date**: Define the time range for the data. If specified, data is retrieved for this period.\n- **format**: Determines the format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of data points, each with a timestamp and the corresponding ADXR value.\n- **status**: Indicates the success of the request, typically \"ok\".\n\n### Example Queries:\n- \"What is the ADXR for Apple Inc. on a daily basis?\"\n- \"Can I get the ADXR values for EUR/USD for the past week with 1-hour intervals?\"\n- \"How strong is the trend for Ethereum against Bitcoin over the last month?\"",
  "GetAnalystRatingsLight": "The `/analyst_ratings/light` endpoint provides a streamlined version of analyst ratings for financial instruments, applicable to both US and international markets. This endpoint is useful for retrieving concise information about how analyst firms rate specific stocks or financial instruments.\n\n### Key Input Parameters:\n- **symbol (required)**: The stock ticker symbol for which you want to retrieve analyst ratings. For example, \"AAPL\" for Apple Inc.\n- **figi**: The Financial Instrument Global Identifier, which uniquely identifies the instrument.\n- **isin**: The International Securities Identification Number, another unique identifier for securities.\n- **cusip**: The Committee on Uniform Securities Identification Procedures number, used mainly in the US.\n- **exchange**: The name of the exchange where the instrument is traded.\n- **rating_change**: Filters ratings by the type of change, such as \"Upgrade\" or \"Downgrade\".\n- **outputsize**: Specifies the number of records to return, with a default of 30.\n- **country**: Filters results by country name or code.\n\n### What It Returns:\nThe response includes metadata about the instrument, such as its name, symbol, currency, exchange, and type. It also provides a list of ratings, detailing the date of the rating, the firm issuing it, the type of rating change, and both current and prior ratings. The response status indicates whether the request was successful.\n\n### Example Questions:\n1. \"What are the latest analyst ratings for Apple Inc.?\"\n2. \"Has there been any recent upgrade or downgrade in ratings for a specific stock?\"\n3. \"Can I get a summary of analyst ratings for a company traded on NASDAQ?\"",
  "GetAnalystRatingsUsEquities": "The \"/analyst_ratings/us_equities\" API endpoint provides detailed information on ratings issued by analyst firms for U.S. equities. To use this endpoint, you must specify the stock symbol of the equity you are interested in. Additionally, you can filter results using identifiers such as FIGI, ISIN, or CUSIP, and by exchange name or rating change action (e.g., \"Upgrade\", \"Downgrade\"). You can also specify the number of records you wish to retrieve.\n\nUpon a successful request, the endpoint returns a JSON response containing metadata about the equity, including its symbol, name, currency, and exchange details. It also provides a list of analyst ratings, detailing the date of the rating, the firm and analyst issuing it, the type of rating change, current and prior ratings, and any changes in price targets.\n\nThis endpoint is particularly useful for investors or analysts looking to track the latest analyst opinions and target price adjustments for specific U.S. stocks.\n\nExample questions this endpoint could answer include:\n- \"What are the latest analyst ratings for Apple Inc.?\"\n- \"Has there been a recent upgrade or downgrade for Tesla's stock?\"\n- \"What is the current price target set by analysts for Microsoft?\"",
  "GetApiUsage": "The `/api_usage` endpoint provides information about the current usage of the Twelve Data API. It is designed to help users monitor their API request activity and understand how close they are to reaching their plan's request limit.\n\nKey input parameters include:\n- `format`: This optional parameter specifies the output format, which can be either `JSON` (default) or `CSV`.\n- `delimiter`: When the output format is set to `CSV`, this parameter specifies the delimiter to be used, with a default value of `;`.\n\nThe endpoint returns a JSON object containing:\n- `timestamp`: The current timestamp in UTC, indicating when the data was retrieved.\n- `current_usage`: The number of API requests made in the last minute.\n- `plan_limit`: The maximum number of requests allowed per minute according to the user's subscription plan.\n\nThis endpoint is useful for users who need to track their API usage in real-time to avoid exceeding their plan limits.\n\nExample questions a user might ask that this endpoint could satisfy:\n- \"How many API requests have I made in the last minute?\"\n- \"What is my current API usage compared to my plan's limit?\"\n- \"Can I get my API usage data in CSV format?\"",
  "GetTimeSeriesApo": "The \"APO\" endpoint provides data on the Absolute Price Oscillator (APO), a momentum indicator that helps traders identify potential price trends and reversals by measuring the difference between two moving averages. This endpoint requires a symbol ticker (e.g., `AAPL`, `EUR/USD`) and an interval (e.g., `1min`, `1day`) to specify the frequency of data points. Users can also filter by identifiers like ISIN, FIGI, or CUSIP, and specify additional parameters such as the number of data points (`outputsize`), exchange, and date range (`start_date`, `end_date`).\n\nThe response includes metadata about the request, such as the symbol, interval, and exchange information, along with an array of time series data points that contain the datetime and APO value. The endpoint can return data in JSON or CSV format, and users can customize the moving average type and periods.\n\nExample questions this endpoint could answer:\n- \"What is the Absolute Price Oscillator for Apple stock over the last week?\"\n- \"Can I get the APO values for EUR/USD on a 15-minute interval?\"\n- \"How does the APO for Tesla stock look over the past month using an EMA?\"",
  "GetTimeSeriesAroon": "The `/aroon` endpoint provides the Aroon indicator, which is used to detect the presence and strength of trends in financial markets by measuring the time elapsed since the highest high and lowest low within a specified period. This endpoint is particularly useful for traders and analysts looking to identify trend reversals or the strength of a current trend.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This is a required parameter.\n- **interval**: Specifies the time interval between data points (e.g., `1min`, `1day`). This is a required parameter.\n- **outputsize**: Determines the number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **time_period**: The number of periods over which to calculate the Aroon indicator, defaulting to 14.\n- **start_date** and **end_date**: Define the date range for the data retrieval.\n- **format**: The format of the response data, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of data points, each including the datetime, Aroon up, and Aroon down values.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"How can I find out if there's a strong trend in Apple's stock over the last month?\"\n2. \"What are the Aroon up and down values for EUR/USD on a 15-minute interval?\"\n3. \"Can I get the Aroon indicator values for Bitcoin over the past week?\"",
  "GetTimeSeriesAroonOsc": "The `/aroonosc` endpoint provides the Aroon Oscillator values for a specified financial instrument. The Aroon Oscillator is a technical indicator used to assess the strength of a trend and potential reversals by calculating the difference between the Aroon Up and Aroon Down lines.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval for the data points, options include `1min`, `5min`, `1h`, `1day`, etc.\n- **outputsize**: Number of data points to retrieve, ranging from 1 to 5000, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: Define the date range for the data retrieval.\n- **timezone**: Specifies the timezone for the output datetime, defaulting to the exchange's local time.\n- **format**: The response format, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of data points, each with a datetime and the corresponding Aroon Oscillator value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to evaluate the trend strength of a financial instrument over a specified time period. It can help in making informed decisions about potential market entry or exit points.\n\n### Example Questions:\n1. What is the Aroon Oscillator value for Apple Inc. on a 1-minute interval?\n2. How can I get the Aroon Oscillator for EUR/USD over the past week?\n3. What does the Aroon Oscillator indicate for Bitcoin trading on a daily basis?",
  "GetTimeSeriesAsin": "The `/asin` endpoint provides the Arcsine (ASIN) indicator, which calculates the inverse sine of a given input value. This is particularly useful for trigonometric and harmonic pattern analysis in financial markets. The endpoint requires a `symbol` parameter, which is the ticker of the financial instrument (e.g., `AAPL`, `EUR/USD`), and an `interval` parameter, which specifies the time gap between data points (e.g., `1min`, `1day`).\n\nOptional parameters include identifiers like `isin`, `figi`, `cusip`, and others that help specify the instrument more precisely. You can also filter data by `start_date` and `end_date`, choose the `outputsize` to limit the number of data points, and select the `timezone` for the output datetime. The `format` parameter allows you to choose between JSON and CSV for the response format.\n\nThe endpoint returns a JSON object containing metadata about the instrument, such as its symbol, interval, currency, and exchange details, along with an array of values that include the ASIN calculation and corresponding timestamps.\n\nThis endpoint can answer questions such as:\n- \"What is the arcsine indicator for Apple stock over the last week?\"\n- \"How does the ASIN indicator for EUR/USD look on a 1-hour interval?\"\n- \"Can I get the ASIN values for a specific date range for Bitcoin trading data?\"",
  "GetTimeSeriesAtan": "The `/atan` endpoint provides the Arctangent (ATAN) indicator for a specified financial instrument. This endpoint is primarily used for trigonometric and harmonic pattern analysis in financial markets. \n\nTo use this endpoint, you must specify the `symbol` parameter, which is the ticker symbol of the instrument you are interested in, such as `AAPL` for Apple Inc. You also need to specify the `interval`, which defines the time gap between consecutive data points, such as `1min` or `1day`. Additional optional parameters include `isin`, `figi`, `cusip` for identifying the instrument, `exchange` for specifying the trading exchange, and `start_date` and `end_date` for defining the time range of the data.\n\nThe endpoint returns a JSON object containing metadata about the request, such as the symbol, interval, and exchange information, as well as an array of data points. Each data point includes the datetime and the calculated ATAN value.\n\nThis endpoint can help answer questions like:\n- \"What is the arctangent value for Apple's stock over the past week?\"\n- \"How does the ATAN indicator for EUR/USD change over a 1-hour interval?\"\n- \"Can I get the ATAN values for a specific date range for Tesla's stock?\"",
  "GetTimeSeriesAtr": "The \"ATR\" endpoint provides the Average True Range (ATR) for a specified financial instrument, which is a key indicator used to measure market volatility. To use this endpoint, you must specify the `symbol` of the instrument (e.g., \"AAPL\" for Apple Inc.) and the `interval` for the data points (e.g., \"1min\", \"1day\"). The endpoint can also filter results using identifiers like `isin`, `figi`, or `cusip`, and allows for additional parameters such as `start_date` and `end_date` to define the time range for the data. You can customize the output with options like `outputsize` to limit the number of data points, `timezone` to adjust the time zone of the data, and `format` to choose between JSON or CSV output.\n\nThe endpoint returns a JSON object containing metadata about the request and an array of time series data points, each with a timestamp and the corresponding ATR value. This information helps traders and analysts assess the volatility of a market over a specified period.\n\nExample questions this endpoint could answer include:\n- \"What is the average true range for Apple stock over the last month?\"\n- \"How has the volatility of the EUR/USD currency pair changed in the past week?\"\n- \"Can I get the ATR for Bitcoin in 15-minute intervals for the past day?\"",
  "GetTimeSeriesAvg": "The `/avg` endpoint is designed to calculate the arithmetic mean, or average, of a data series over a specified period. This is commonly used to smooth out fluctuations in data, such as stock prices or currency exchange rates. The endpoint requires a `symbol` parameter, which is the ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.), and an `interval` parameter, which specifies the time gap between consecutive data points (e.g., `1min`, `1day`). \n\nYou can also filter the data using identifiers like `isin`, `figi`, or `cusip`, and specify additional parameters such as `outputsize` to determine the number of data points returned. The `start_date` and `end_date` parameters allow you to define a specific time range for the data. The response includes metadata about the request and an array of time series data points, each with a timestamp and the calculated average value.\n\nThis endpoint can answer questions like:\n- \"What is the average stock price of Apple over the last 30 days?\"\n- \"How has the average exchange rate for EUR/USD changed in the past week?\"\n- \"Can I get the average value of Bitcoin for every hour today?\"",
  "GetTimeSeriesAvgPrice": "The `/avgprice` endpoint provides the average price of a security by calculating the mean of its open, high, low, and close prices over specified intervals. This endpoint is useful for traders and analysts who want a simplified view of price movements for a given financial instrument.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This is required to specify which security's data you want.\n- **interval**: The time interval for the data points (e.g., `1min`, `1day`). This is required to define the granularity of the data.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000. Defaults to 30 if no date range is specified.\n- **start_date** and **end_date**: Define the date range for the data. If provided, they override the default output size.\n- **format**: The format of the response, either `JSON` or `CSV`.\n\n### What It Returns:\nThe endpoint returns a JSON object containing:\n- **meta**: Information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a timestamp and the calculated average price.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for financial analysts and traders who need to analyze the average price trends of a security over time. It supports a wide range of intervals and can be filtered by various identifiers like ISIN, FIGI, or CUSIP.\n\n### Example Questions:\n1. \"What is the average price of Apple stock every minute for the last hour?\"\n2. \"Can I get the average price for EUR/USD over the past week?\"\n3. \"How does the average price of Bitcoin compare across different exchanges?\"",
  "GetBalanceSheet": "The `/balance_sheet` endpoint provides a detailed balance sheet for a specified company, summarizing its assets, liabilities, and shareholders' equity. This endpoint is useful for financial analysis and understanding a company's financial health.\n\n### Key Input Parameters:\n- **symbol**: This is the ticker symbol of the company for which you want the balance sheet. It is a required parameter, and for preferred stocks, a dot (.) delimiter is used (e.g., `BRK.A`).\n- **figi, isin, cusip**: These are optional identifiers that can be used to specify the financial instrument more precisely.\n- **exchange, mic_code, country**: Optional parameters to filter the data based on the exchange, market identifier code, or country where the instrument is traded.\n- **period**: Specifies whether the balance sheet data should be annual or quarterly, with \"annual\" as the default.\n- **start_date and end_date**: Define the date range for the balance sheet data in the format `YYYY-MM-DD`.\n- **outputsize**: Limits the number of records returned, with a default of 6.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta Information**: Includes details such as the company name, currency, exchange, and period type.\n- **Balance Sheet Data**: An array of records detailing the company's assets, liabilities, and shareholders' equity, broken down into current and non-current categories.\n\n### Usage Context:\nThis endpoint is particularly useful for investors, analysts, and financial professionals who need to assess a company's financial position and make informed decisions based on its balance sheet data.\n\n### Example Questions:\n1. \"What are the latest quarterly assets and liabilities for Apple Inc.?\"\n2. \"Can I get the annual balance sheet for a company traded on NASDAQ?\"\n3. \"How can I find the total shareholders' equity for a specific company using its ISIN?\"",
  "GetBalanceSheetConsolidated": "This API endpoint provides the consolidated balance sheet of a specified company, detailing its assets, liabilities, and shareholders' equity. The primary input parameter is the `symbol`, which is the ticker symbol of the company you are interested in. This parameter is required to fetch the data. Additional optional parameters include `figi`, `isin`, and `cusip`, which are various identifiers for financial instruments. You can also filter the data by `exchange`, `mic_code`, `country`, and specify the `period` (annual or quarterly) and date range (`start_date` and `end_date`) for the balance sheet data. The `outputsize` parameter controls the number of records returned.\n\nThe response includes detailed balance sheet data, such as total assets, liabilities, equity, and specific financial metrics for the company over the specified period. The data is structured to show both current and non-current assets and liabilities, as well as detailed equity information.\n\nThis endpoint could be useful for questions like:\n- \"What are the total assets and liabilities of Apple for the last quarter?\"\n- \"Can I see the annual balance sheet for a company traded on the NYSE?\"\n- \"What is the equity breakdown for a company with the ticker BRK.A?\"",
  "advanced": "The `/batch` endpoint allows users to send multiple requests for various financial instruments, intervals, and endpoints in a single batch operation. This is a POST request that accepts a JSON or XML body, where each key-value pair represents a unique request ID and the corresponding requested URL. This setup enables efficient data retrieval by bundling multiple requests together.\n\nUpon successful execution, the endpoint returns a JSON response containing the results for each individual request, identified by their unique request IDs. The response includes the status of each request and the corresponding data, such as stock prices or currency exchange rates. Importantly, if any request within the batch encounters an error (like invalid symbols or unsupported intervals), it does not affect the processing of other requests. Errors are reported individually, allowing users to address specific issues without disrupting the entire batch.\n\nThe number of concurrent requests and the total credits consumed are determined by the user's subscription plan. If the batch exceeds available credits, only partial data is returned until the quota is exhausted.\n\nThis endpoint is useful in scenarios where:\n- A user needs to retrieve data for multiple stocks or currencies simultaneously.\n- A user wants to compare different financial instruments over various intervals in one go.\n- A user needs to efficiently manage API credits by consolidating requests.\n\nExample questions this endpoint could address:\n- \"How can I get the latest stock prices for multiple companies at once?\"\n- \"Can I retrieve exchange rates for several currency pairs in a single request?\"\n- \"How do I batch requests to check stock data across different intervals?\"",
  "GetTimeSeriesBBands": "The `/bbands` endpoint provides Bollinger Bands data for a specified financial instrument. Bollinger Bands are technical indicators used to measure market volatility and identify potential overbought or oversold conditions by placing bands above and below a moving average.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval between data points (e.g., `1min`, `1day`).\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000.\n- **start_date and end_date:** Define the date range for the data.\n- **ma_type:** Type of moving average used (e.g., `SMA`, `EMA`).\n- **sd:** Number of standard deviations for the bands.\n- **time_period:** Number of periods to average over.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each containing the `datetime`, `upper_band`, `middle_band`, and `lower_band` values.\n- **status:** The status of the response.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to assess market conditions and make informed trading decisions based on volatility indicators.\n\n### Example Questions:\n1. \"What are the Bollinger Bands for Apple stock over the past month with daily intervals?\"\n2. \"Can you provide the Bollinger Bands for EUR/USD for the last 100 minutes?\"\n3. \"How do the Bollinger Bands look for Bitcoin using a 15-minute interval?\"",
  "GetTimeSeriesBeta": "The `/beta` endpoint provides the Beta indicator for a specified financial instrument, which measures the instrument's sensitivity to market movements. This endpoint is useful for assessing the systematic risk of a security by comparing its price changes to a benchmark index.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for data points, with options ranging from `1min` to `1month`.\n- **outputsize:** The number of data points to retrieve, defaulting to 30 if no date parameters are set.\n- **start_date and end_date:** Specify the date range for the data, formatted as `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`.\n- **timezone:** Determines the timezone for the output datetime, defaulting to the exchange's local time.\n- **series_type_1 and series_type_2:** Specify the price types used in the Beta calculation, such as `open` or `close`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of data points, each with a datetime and the calculated Beta value.\n- **status:** The response status, typically \"ok\" if successful.\n\n### Example Questions:\n1. What is the Beta value for Apple Inc. over the past month at daily intervals?\n2. How does the Beta of the EUR/USD currency pair compare over a 15-minute interval?\n3. Can I get the Beta indicator for Bitcoin against Ethereum for the last week?",
  "GetBonds": "The `/bonds` endpoint provides a list of bonds available through the Twelve Data API. This list is updated daily and can be filtered using several query parameters. \n\nKey input parameters include:\n- `symbol`: A specific bond ticker symbol to retrieve data for.\n- `exchange`: The name of the exchange to filter bonds by.\n- `country`: The name or alpha code of the country to filter bonds by.\n- `format`: The desired format of the response, either JSON or CSV.\n- `page` and `outputsize`: These control pagination, determining which page of results to return and how many bonds to include per page, respectively.\n\nThe endpoint returns a JSON object containing a list of bonds, each with details such as the bond's symbol, name, country, currency, exchange, market identifier code (MIC), and type. It also includes the total count of matching instruments and the status of the response.\n\nThis endpoint could answer questions like:\n- \"What bonds are available on the NYSE?\"\n- \"Can I get a list of US Treasury bonds?\"\n- \"How can I find bonds traded in the United States?\"",
  "GetTimeSeriesBop": "The `/bop` endpoint provides the Balance of Power (BOP) indicator for a specified financial instrument. This indicator helps traders assess the balance between buying and selling pressure by analyzing the instrument's open, high, low, and close prices. \n\nTo use this endpoint, you must specify the `symbol` parameter, which is the ticker of the instrument (e.g., `AAPL`, `EUR/USD`). You also need to define the `interval`, which determines the time gap between data points, such as `1min`, `5min`, `1day`, etc. Optional parameters include `isin`, `figi`, `cusip` for filtering by identification numbers, and `exchange`, `mic_code`, `country`, `type` for specifying trading details. You can further refine your query with `start_date`, `end_date`, or `date` to select a specific time range, and adjust the output with parameters like `outputsize`, `order`, `format`, and `timezone`.\n\nThe endpoint returns a JSON object containing metadata about the request, including the symbol, interval, and exchange details, as well as an array of time series data points with BOP values and their corresponding datetimes.\n\nThis endpoint can answer questions such as:\n- \"What is the Balance of Power indicator for Apple stock over the last week?\"\n- \"Can I get BOP data for EUR/USD at 15-minute intervals?\"\n- \"How does the BOP indicator look for Bitcoin trading on a specific date?\"",
  "GetCashFlow": "The `/cash_flow` endpoint provides detailed cash flow information for a specified company, showing the net amount of cash and cash equivalents moving in and out of the business. This endpoint is useful for financial analysis and understanding a company's liquidity and cash management.\n\n### Key Input Parameters:\n- **symbol** (required): The stock ticker symbol of the company. This is necessary to identify the company for which you want to retrieve cash flow data. For preferred stocks, use a dot (.) delimiter, such as `BRK.A`.\n- **figi**: The Financial Instrument Global Identifier, an optional parameter to specify the financial instrument.\n- **isin**: The International Securities Identification Number, another optional identifier for the financial instrument.\n- **cusip**: The Committee on Uniform Securities Identification Procedures number, used to identify securities.\n- **exchange**: The stock exchange where the instrument is traded.\n- **mic_code**: The Market Identifier Code, which specifies the exchange under the ISO 10383 standard.\n- **country**: The country where the instrument is traded.\n- **period**: Specifies whether the cash flow data should be annual or quarterly, with \"annual\" as the default.\n- **start_date** and **end_date**: Define the date range for the cash flow data, formatted as `YYYY-MM-DD`.\n- **outputsize**: The number of records to return, with a default of 6.\n\n### What the Endpoint Returns:\nThe response includes metadata about the company, such as its name, currency, and exchange details, along with detailed cash flow data. This data is divided into sections for operating, investing, and financing activities, each with specific financial metrics like net income, capital expenditures, and cash flow from financing activities. It also includes the end cash position, income tax paid, interest paid, and free cash flow.\n\n### Example Questions:\n1. \"What is the cash flow statement for Apple Inc. for the last quarter?\"\n2. \"Can I get the annual cash flow data for a company traded on NASDAQ?\"\n3. \"How much free cash flow did a company generate in the fiscal year 2021?\"",
  "GetCashFlowConsolidated": "The `/cash_flow/consolidated` endpoint provides a consolidated cash flow report for a specified company, detailing the net cash and cash equivalents moving into and out of the business. This report includes cash flows from operating, investing, and financing activities, and offers insights into the company's financial health over a specified period.\n\n### Key Input Parameters:\n- **symbol (required):** The stock ticker symbol of the company. For preferred stocks, use a dot (.) delimiter (e.g., `BRK.A`).\n- **period:** Specifies whether the cash flow data should be annual or quarterly. Defaults to annual.\n- **start_date and end_date:** Define the date range for the cash flow data in the format `YYYY-MM-DD`.\n- **figi, isin, cusip:** Optional identifiers to specify the financial instrument.\n- **exchange, mic_code, country:** Optional parameters to filter the data based on where the instrument is traded.\n- **outputsize:** Determines the number of records returned, with a default of 6.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **cash_flow:** An array of cash flow data objects for each fiscal period, detailing cash flows from operating, investing, and financing activities.\n- **status:** A string indicating the response status, typically \"ok\".\n\n### Usage Context:\nThis endpoint is useful for financial analysts, investors, and business managers who need to assess a company's liquidity, operational efficiency, and investment strategies over time.\n\n### Example Questions:\n1. \"What is the annual cash flow for Apple in the last fiscal year?\"\n2. \"Can I see the quarterly cash flow data for Tesla from January to June 2023?\"\n3. \"What are the cash flows from operating activities for Microsoft over the past two years?\"",
  "GetTimeSeriesCci": "The `/cci` endpoint provides the Commodity Channel Index (CCI) for a specified financial instrument. The CCI is a momentum oscillator used by traders to identify overbought or oversold conditions by measuring the deviation of a security's price from its average relative to its typical price range.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval between data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize:** Number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date and end_date:** Specify the date range for the data.\n- **exchange, mic_code, country, type:** Additional filters to specify the trading location, market identifier, country, and asset class.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta Information:** Details about the request, including the symbol, interval, currency, exchange, and the technical indicator used.\n- **Values:** An array of time series data points, each with a datetime and the corresponding CCI value.\n- **Status:** Indicates the success of the request.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to evaluate the momentum of a security over a specified period and identify potential buy or sell signals based on CCI values.\n\n### Example Questions:\n1. \"What is the CCI for Apple stock over the last week with daily intervals?\"\n2. \"Can I get the CCI values for EUR/USD for the past month at 1-hour intervals?\"\n3. \"How can I retrieve the CCI for Bitcoin against Ethereum for the last 24 hours with 15-minute intervals?\"",
  "GetTimeSeriesCeil": "The `/ceil` endpoint provides the Ceiling (CEIL) indicator for financial instruments, which rounds data values up to the nearest integer. This is useful for data analysis and calculations involving time series data. \n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval for data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000, with a default of 30 unless date parameters are specified.\n- **start_date and end_date:** Define the date range for data retrieval.\n- **series_type:** The price type used for the calculation, defaulting to `close`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of data points, each with a datetime and the corresponding CEIL value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for analysts and traders who need to process financial data with specific rounding requirements. It can be used to prepare data for further technical analysis or visualization.\n\n### Example Questions:\n1. \"What are the rounded-up closing prices for Apple stock every minute over the past hour?\"\n2. \"Can I get the CEIL values for EUR/USD with a 5-minute interval for the last week?\"\n3. \"How does the CEIL indicator look for Bitcoin trading on a daily basis this month?\"",
  "GetTimeSeriesCmo": "The `/cmo` endpoint provides access to the Chande Momentum Oscillator (CMO) data for a specified financial instrument. This momentum indicator helps traders assess the relative strength of price movements to identify overbought or oversold conditions and potential trend reversals.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000.\n- **start_date / end_date:** Define the time range for the data.\n- **series_type:** The price type used for calculation, defaulting to `close`.\n- **time_period:** The number of periods over which to average, with a default of 9.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta Information:** Details about the request, including symbol, interval, and exchange details.\n- **Values:** An array of time series data points, each with a timestamp and CMO value.\n- **Status:** The response status, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"What is the Chande Momentum Oscillator for Apple stock over the last month?\"\n2. \"Can I get the CMO values for EUR/USD on a 5-minute interval?\"\n3. \"How does the CMO for Bitcoin compare over different time periods?\"",
  "GetCommodities": "The `/commodities` endpoint provides a list of commodity pairs available through the Twelve Data API. This list is updated daily and can be filtered by specific criteria.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol for a specific commodity pair you want to retrieve, such as \"XAU/USD\" for gold.\n- **category**: Allows filtering by the category of the commodity, such as \"Precious Metal\".\n- **format**: Specifies the format of the response, either \"JSON\" or \"CSV\". The default is \"JSON\".\n- **delimiter**: If the response format is CSV, this parameter sets the delimiter used in the data, with the default being a semicolon (\";\").\n\n### Response:\nThe endpoint returns a list of commodities, each containing:\n- **symbol**: The currency pair symbol.\n- **name**: The full name of the commodity.\n- **category**: The category to which the commodity belongs.\n- **description**: A short description of the commodity.\n\n### Usage Context:\nThis endpoint is useful for retrieving and filtering a comprehensive list of commodities, which can be used for market analysis or trading purposes.\n\n### Example Questions:\n1. \"What are the available precious metals I can trade?\"\n2. \"Can I get a list of all commodities in CSV format?\"\n3. \"What is the full name and description of the XAU/USD commodity?\"",
  "GetTimeSeriesCoppock": "The `/coppock` endpoint provides access to the Coppock Curve, a technical indicator used to identify potential long-term trend reversals in financial markets, particularly in bottoming markets. This endpoint is useful for traders and analysts looking to assess momentum changes in a security's price over time.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument you are interested in, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for the data points, which can range from `1min` to `1month`.\n- **outputsize:** Specifies the number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date and end_date:** Define the time range for the data retrieval.\n- **series_type:** The price type (e.g., `close`, `open`) on which the Coppock Curve is calculated.\n- **wma_period, long_roc_period, short_roc_period:** Parameters that define the periods used in the Coppock Curve calculation.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and type of asset.\n- **values:** An array of time series data points, each with a timestamp and the corresponding Coppock value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Examples:\n1. \"What is the Coppock Curve value for Apple stock over the past month?\"\n2. \"How does the Coppock Curve for EUR/USD look on a daily basis?\"\n3. \"Can I get the Coppock indicator for Bitcoin over the last week with 15-minute intervals?\"\n\nThis endpoint is particularly valuable for those analyzing long-term trends and seeking to identify potential market bottoms.",
  "GetTimeSeriesCorrel": "The `/correl` endpoint provides the Correlation (CORREL) indicator, which measures the statistical relationship between two securities. This can help traders identify potential diversification opportunities or pairs trading candidates. \n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This is required.\n- **interval**: The time interval between data points (e.g., `1min`, `1day`). This is required.\n- **series_type_1** and **series_type_2**: The price types used for the correlation calculation (e.g., `open`, `close`).\n- **time_period**: The number of periods to average over, with a range from 1 to 800.\n\n### Optional Parameters:\n- **outputsize**: Number of data points to retrieve, ranging from 1 to 5000.\n- **exchange**, **mic_code**, **country**, **type**: Filters for exchange, market identifier, country, and asset class.\n- **start_date** and **end_date**: Specify the date range for the data.\n- **timezone**: The timezone for the output datetime.\n- **format**: The format of the response data, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a datetime and the correlation value.\n- **status**: The status of the response, typically \"ok\".\n\n### Example Questions:\n1. \"How can I find the correlation between the opening and closing prices of AAPL over the last month?\"\n2. \"What is the correlation coefficient for EUR/USD using 5-minute intervals?\"\n3. \"Can I get the correlation data for a specific date range for the NASDAQ exchange?\"",
  "GetTimeSeriesCos": "The `/cos` endpoint provides the cosine values for a specified financial instrument over a selected time interval. This endpoint is useful for analyzing trigonometric and harmonic patterns in financial markets.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between data points, which can range from `1min` to `1month`.\n- **outputsize:** The number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date and end_date:** Specify the date range for the data, formatted as `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`.\n- **exchange, mic_code, country, type:** Optional filters to specify the exchange, market code, country, and asset class of the instrument.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** Metadata about the request, including the symbol, interval, currency, exchange details, and asset class.\n- **values:** An array of objects, each containing a `datetime` and the corresponding `cos` value.\n\n### Usage Context:\nThis endpoint is particularly useful for traders and analysts looking to apply mathematical transformations to financial data for pattern recognition and market analysis.\n\n### Example Questions:\n1. \"What are the cosine values for Apple's stock over the past week at 1-hour intervals?\"\n2. \"Can I get the cosine transformation of EUR/USD for the last 30 days?\"\n3. \"How does the cosine indicator look for Bitcoin trading on the NASDAQ exchange?\"",
  "GetTimeSeriesCosh": "The `/cosh` endpoint is designed to calculate the hyperbolic cosine (COSH) of a given financial instrument's price data over a specified time interval. This mathematical function is often used in advanced financial analysis and market calculations.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument, such as `AAPL` for Apple or `EUR/USD` for a currency pair.\n- **interval (required):** The time interval for the data points, such as `1min`, `1h`, or `1day`.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the time range for the data, formatted as `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing metadata about the request and an array of data points. Each data point includes the calculated hyperbolic cosine value and the corresponding datetime.\n\n### Usage Context:\nThis endpoint is useful for analysts and developers who need to incorporate hyperbolic cosine calculations into their financial models or trading algorithms. It supports a wide range of financial instruments and time intervals, making it versatile for different analytical needs.\n\n### Example Questions:\n1. \"How can I calculate the hyperbolic cosine of Apple's stock price every minute for the past hour?\"\n2. \"What is the hyperbolic cosine of the EUR/USD currency pair over the last day?\"\n3. \"Can I get the COSH values for Bitcoin prices in a CSV format for the last month?\"",
  "GetCountries": "The `/countries` endpoint provides a list of countries available in the Twelve Data API, including detailed information about each country. When you make a GET request to this endpoint, it returns an array of countries, each with the following details: the country's ISO 3166 two-letter and three-letter codes, numeric code, full name, official name, capital city, and currency.\n\nThis endpoint does not require any input parameters, making it straightforward to use for retrieving comprehensive country data.\n\nThe response is structured in JSON format and includes a \"data\" array where each item represents a country with the specified attributes.\n\nHere are a few natural-language questions that this endpoint could answer:\n- \"What are the ISO codes and currencies of all countries?\"\n- \"Can I get a list of countries with their capitals and official names?\"\n- \"What is the currency used in each country according to the Twelve Data API?\"",
  "GetCrossListings": "The `/cross_listings` endpoint is designed to retrieve a list of cross-listed symbols for a given financial instrument. Cross listings refer to the same security being listed on multiple exchanges. \n\nTo use this endpoint, you must provide the `symbol` parameter, which is the ticker symbol of the instrument you are interested in. Optionally, you can specify the `exchange` where the instrument is traded, the `mic_code` which is the Market Identifier Code under the ISO 10383 standard, and the `country` of the stock exchange.\n\nThe endpoint returns a JSON object containing a `result` field. This includes a `count` of how many cross listings were found and a `list` of objects detailing each cross listing. Each object in the list provides the ticker symbol, the name of the company, the exchange where it is traded, and the MIC code.\n\nThis endpoint can help answer questions such as:\n- \"What are the cross listings for NVIDIA?\"\n- \"On which exchanges is a specific stock like NVDA listed?\"\n- \"Can I find the cross listings for a stock traded on NASDAQ?\"",
  "GetTimeSeriesCrsi": "The `/crsi` endpoint provides the Connors RSI (CRSI) indicator for a specified financial instrument. CRSI is a composite indicator that combines the Relative Strength Index (RSI), Rate of Change (ROC), and Up/Down Length to offer insights into market momentum and potential trend reversals.\n\n### Key Input Parameters:\n- **symbol**: This is a required parameter specifying the ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval**: Another required parameter that defines the time interval between data points, such as `1min`, `1day`, etc.\n- **outputsize**: Specifies the number of data points to retrieve, with a range from 1 to 5000. Defaults to 30 if no date parameters are set.\n- **rsi_period, up_down_length, percent_rank_period**: These parameters define the periods used in calculating the CRSI components, with default values of 3, 2, and 100, respectively.\n\n### Optional Parameters:\n- **isin, figi, cusip**: Alternative identifiers for the instrument.\n- **exchange, mic_code, country, type**: Additional filters based on the trading location and asset class.\n- **start_date, end_date, date**: Specify the date range for the data.\n- **timezone**: Determines the timezone for the output datetime.\n- **order**: Sets the sorting order of the output, either ascending or descending.\n- **format**: Specifies the response format, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a datetime and the corresponding CRSI value.\n- **status**: Indicates the success of the request.\n\n### Usage Scenarios:\n- \"What is the Connors RSI for Apple Inc. over the past week with daily intervals?\"\n- \"How can I retrieve the CRSI for EUR/USD with a 15-minute interval?\"\n- \"Can I get the CRSI values for a specific date range for Tesla stock?\"\n\nThis endpoint is particularly useful for traders and analysts looking to assess market momentum and identify potential trend reversals using the Connors RSI indicator.",
  "GetCryptocurrencies": "The `/cryptocurrencies` endpoint provides a list of cryptocurrencies available through the Twelve Data API. This list is updated daily and can be filtered based on several parameters. \n\nKey input parameters include:\n- `symbol`: The ticker symbol of the cryptocurrency pair you are interested in, such as \"BTC/USD\".\n- `exchange`: The name of the exchange where the cryptocurrency pair is traded, like \"Binance\".\n- `currency_base`: The base currency of the pair, for example, \"BTC\".\n- `currency_quote`: The quote currency of the pair, such as \"USD\".\n- `format`: Specifies the format of the response, either \"JSON\" or \"CSV\".\n- `delimiter`: Defines the separator used in the CSV response, defaulting to a semicolon.\n\nThe endpoint returns an array of cryptocurrency details, including the pair's symbol, available exchanges, base currency, and quote currency.\n\nThis endpoint can answer questions like:\n- \"Which exchanges offer trading for BTC/USD?\"\n- \"What cryptocurrencies are available for trading on Binance?\"\n- \"Can I get a list of cryptocurrency pairs with Bitcoin as the base currency?\"",
  "GetCryptocurrencyExchanges": "The `/cryptocurrency_exchanges` endpoint provides a list of cryptocurrency exchanges available through the Twelve Data API. This list is refreshed on a daily basis, ensuring up-to-date information. The endpoint allows you to specify the format of the response, either as JSON or CSV. If you choose CSV, you can also define the delimiter used in the file, with the default being a semicolon (`;`).\n\nWhen you make a request to this endpoint, it returns an array of exchanges, each with details such as the exchange's name. This is particularly useful for developers or analysts who need to integrate exchange data into their applications or reports.\n\nHere are some example questions this endpoint could answer:\n- \"What cryptocurrency exchanges are currently supported by the Twelve Data API?\"\n- \"Can I get a list of cryptocurrency exchanges in CSV format?\"\n- \"How can I download the list of exchanges with a specific delimiter in the CSV file?\"",
  "GetCurrencyConversion": "The `/currency_conversion` endpoint provides real-time exchange rates and converts a specified amount from one currency to another, supporting both forex and cryptocurrency pairs. To use this endpoint, you must specify the `symbol` parameter, which defines the currency pair you are interested in, such as `EUR/USD` for forex or `BTC/ETH` for cryptocurrencies. Additionally, you need to provide the `amount` parameter, which is the quantity of the base currency you wish to convert.\n\nOptionally, you can specify a `date` to use historical exchange rates, choose the `format` of the response (either `JSON` or `CSV`), set a `delimiter` for CSV output, define the number of decimal places with `dp`, and adjust the `timezone` for the output timestamp.\n\nThe endpoint returns the requested currency symbol, the real-time exchange rate, the converted amount, and a timestamp of the rate in Unix format.\n\nThis endpoint can answer questions like:\n- \"What is the current exchange rate and converted amount for 100 euros to US dollars?\"\n- \"How much is 0.5 Bitcoin in Ethereum today?\"\n- \"What was the exchange rate for USD/JPY on January 1, 2020?\"",
  "GetTimeSeriesDema": "The `/dema` endpoint provides the Double Exponential Moving Average (DEMA) for a specified financial instrument. This technical indicator is used to identify trends by giving more weight to recent price data, thus reducing lag. It is particularly useful for traders looking to make timely entry or exit decisions.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval for data points, such as `1min`, `1day`, etc.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Specify the date range for the data. These can be used with the `timezone` parameter to adjust for different time zones.\n- **series_type:** The price type on which the DEMA is calculated, defaulting to `close`.\n- **time_period:** The number of periods over which to average, with a default of 9.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with a datetime and corresponding DEMA value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"What is the DEMA for Apple stock over the past week with a daily interval?\"\n2. \"Can I get the 15-minute interval DEMA for EUR/USD for the last 100 data points?\"\n3. \"How does the DEMA for Bitcoin look over the past month with a 1-hour interval?\"",
  "GetDirectHolders": "The \"Direct Holders\" API endpoint provides information about the direct stockholders of a specific financial instrument, as recorded in the company's share registry. To use this endpoint, you must specify the stock's symbol ticker, such as \"AAPL\" for Apple Inc. This is the primary required parameter. You can also filter the results using other identifiers like FIGI, ISIN, CUSIP, or specify details about the exchange, such as the exchange name, MIC code, or the country where the instrument is traded.\n\nWhen you call this endpoint, it returns a JSON object containing metadata about the financial instrument, including its name, currency, and exchange details. Additionally, it provides a list of direct holders, detailing each entity's name, the date the information was reported, the number of shares they own, the total value of these shares, and the percentage of the total shares they hold.\n\nThis endpoint can answer questions such as:\n- \"Who are the major direct shareholders of Apple Inc.?\"\n- \"What percentage of shares does Vanguard Group hold in a specific company?\"\n- \"How many shares does a particular institution own in a given stock?\"",
  "GetTimeSeriesDiv": "The `/div` endpoint is designed to calculate the Division (DIV) indicator, which performs arithmetic division between two specified data series for a given financial instrument. This is typically used to normalize or combine multiple technical indicators or price data.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval for data points (e.g., `1min`, `1day`).\n- **series_type_1 and series_type_2:** Specify the price types for the division operation, such as `open`, `close`, `high`, `low`, or `volume`.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000.\n- **start_date and end_date:** Define the date range for the data.\n- **timezone:** Determines the timezone for the output datetime.\n- **format:** Specifies the response format, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with a datetime and the calculated DIV value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to perform technical analysis by dividing two data series to derive insights or normalize data.\n\n### Example Questions:\n1. How can I calculate the division of the opening and closing prices for Apple stock on a minute-by-minute basis?\n2. What is the DIV indicator for EUR/USD over the past week using hourly intervals?\n3. Can I get the division of high and low prices for Bitcoin in JSON format?",
  "GetDividends": "The `/dividends` endpoint provides information on the dividends paid out by a financial instrument over the last 10+ years. To use this endpoint, you must specify the `symbol` parameter, which is the ticker symbol of the instrument (e.g., `BRK.A` for preferred stocks). Additional optional parameters include `figi`, `isin`, `cusip`, `exchange`, `mic_code`, and `country`, which allow for more specific filtering based on identifiers and trading locations. You can also specify a `range` to limit the timeframe of the data, or use `start_date` and `end_date` for custom date ranges. The `adjust` parameter indicates whether the data should be adjusted, with the default set to `true`.\n\nThe response includes metadata about the instrument, such as its symbol, name, currency, and exchange details, as well as a list of dividend records, each containing the ex-date and the dividend amount.\n\nThis endpoint can answer questions like:\n- \"What dividends has Apple Inc. paid over the last 5 years?\"\n- \"Can I get the dividend history for a specific stock using its CUSIP?\"\n- \"What are the recent dividends for a company traded on NASDAQ?\"",
  "GetDividendsCalendar": "The `/dividends_calendar` endpoint provides a calendar of dividend data for financial instruments within a specified date range. This endpoint is useful for investors or analysts who want to track upcoming or past dividend payments for stocks traded on various exchanges.\n\nKey input parameters include:\n- `exchange`: Specifies the exchange where the instrument is traded, such as NASDAQ.\n- `mic_code`: The Market Identifier Code, which uniquely identifies the trading venue.\n- `country`: The country where the instrument is traded.\n- `start_date` and `end_date`: Define the date range for the dividend data in the format `YYYY-MM-DD`.\n- `outputsize`: Limits the number of data points returned, ranging from 1 to 500, with a default of 100 if no date range is specified.\n- `page`: Allows pagination of results, starting at page 1 by default.\n\nThe endpoint returns a list of dividend details, including the ticker symbol, exchange, ex-dividend date, and the dividend amount.\n\nExample questions this endpoint could answer:\n- \"What are the upcoming dividends for companies listed on NASDAQ in February 2024?\"\n- \"Can I get a list of dividends for stocks traded in the US between January and March 2023?\"\n- \"What is the dividend payment amount for Microsoft on its next ex-dividend date?\"",
  "GetTimeSeriesDpo": "The `/dpo` endpoint provides the Detrended Price Oscillator (DPO) values for a specified financial instrument. The DPO is a momentum oscillator that helps traders identify cyclical patterns and overbought or oversold conditions by removing the underlying trend from price data.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` or `EUR/USD`.\n- **interval (required):** The time interval between data points, options include `1min`, `5min`, `1h`, `1day`, etc.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000.\n- **start_date and end_date:** Specify the date range for the data.\n- **series_type:** The price type on which the DPO is calculated, such as `close`, `open`, etc.\n- **time_period:** Number of periods for averaging, with a default of 9.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with a datetime and corresponding DPO value.\n- **status:** The status of the response, typically \"ok\".\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to analyze price momentum and identify potential trading opportunities by examining cyclical price patterns.\n\n### Example Questions:\n1. \"What are the DPO values for Apple stock on a 1-hour interval?\"\n2. \"How can I analyze the cyclical patterns of the EUR/USD currency pair using DPO?\"\n3. \"Can I get the DPO for Bitcoin with daily intervals over the past month?\"",
  "GetTimeSeriesDx": "The `/dx` endpoint provides the Directional Movement Index (DX) for a specified financial instrument, which is a component of the Average Directional Index (ADX) used to measure the strength of positive and negative directional movements in a security's price. This endpoint is useful for traders and analysts looking to assess the momentum of a stock, currency pair, or other financial instruments.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument you want to analyze, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Specify the date range for the data. If not provided, the endpoint defaults to the most recent data.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta Information:** Details about the request, including the symbol, interval, currency, and exchange information.\n- **Values:** An array of time series data points, each containing a timestamp and the corresponding DX value.\n- **Status:** Indicates the success of the request.\n\n### Usage Context:\nThis endpoint is particularly useful for traders who need to evaluate the strength of price movements over time to make informed trading decisions. It can be used in conjunction with other technical indicators to develop trading strategies.\n\n### Example Questions:\n1. \"What is the Directional Movement Index for Apple stock on a 5-minute interval?\"\n2. \"Can I get the DX values for EUR/USD over the past week?\"\n3. \"How strong are the directional movements for Bitcoin in the last month?\"",
  "GetEarliestTimestamp": "The `/earliest_timestamp` endpoint is designed to provide the earliest available DateTime for a specified financial instrument at a given time interval. This endpoint is particularly useful for users who need to determine the starting point of historical data for an instrument.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument (e.g., \"AAPL\").\n- **interval (required):** The time interval for which the earliest timestamp is requested. Options include \"1min\", \"5min\", \"15min\", \"30min\", \"45min\", \"1h\", \"2h\", \"4h\", \"1day\", \"1week\", and \"1month\".\n- **figi, isin, cusip (optional):** Alternative identifiers for the financial instrument, allowing for more specific queries.\n- **exchange (optional):** The exchange where the instrument is traded, which can help narrow down the search.\n- **mic_code (optional):** The Market Identifier Code for the exchange.\n- **timezone (optional):** Specifies the timezone for the output DateTime. It can be set to \"Exchange\" for local time, \"UTC\", or any IANA timezone name like \"America/New_York\".\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **datetime:** The earliest available DateTime for the specified instrument and interval.\n- **unix_time:** The corresponding UNIX timestamp of the earliest DateTime.\n\n### Usage Context:\nThis endpoint is useful for financial analysts, traders, or data scientists who need to establish the starting point of data availability for a specific instrument and interval. It helps in planning data retrieval and analysis tasks by providing the initial data point.\n\n### Example Questions:\n1. \"What is the first available data point for Apple stock on a daily interval?\"\n2. \"When did trading data for a specific instrument start on the Nasdaq exchange?\"\n3. \"Can I find out the earliest timestamp for a security using its ISIN?\"",
  "GetEarnings": "The `/earnings` endpoint provides earnings data for a specified company, including both estimated and actual earnings per share (EPS). This data is available for the entire history of the company. The primary input parameter required is the `symbol`, which is the ticker symbol of the company. Additional filters can be applied using identifiers such as FIGI, ISIN, CUSIP, and others to refine the search. You can also specify the period to get either the latest or next earnings data, and control the number of records returned with the `outputsize` parameter.\n\nThe response includes metadata about the company, such as its symbol, name, and trading exchange, along with a list of earnings data. Each earnings entry provides details like the release date, time, EPS estimate, EPS actual, the difference between them, and the percentage surprise.\n\nThis endpoint is useful for financial analysts or investors looking to analyze a company's earnings performance over time or compare expected versus actual earnings.\n\nExample questions this endpoint can answer:\n- \"What were Apple's earnings for the last quarter?\"\n- \"How did Tesla's actual earnings compare to estimates over the past year?\"\n- \"Can I get the earnings history for Microsoft in CSV format?\"",
  "GetEarningsCalendar": "The \"Earnings Calendar\" endpoint provides a schedule of earnings announcements for companies within a specified date range. By default, it returns earnings data for the current day, but you can specify a custom period using the `start_date` and `end_date` parameters. The endpoint allows filtering by `exchange`, `mic_code` (Market Identifier Code), and `country` to narrow down the results to specific markets or regions. The response can be formatted as either JSON or CSV, with an optional `delimiter` for CSV outputs. \n\nThe response includes detailed earnings information such as the company symbol, full name, trading currency, exchange, and country. It also provides earnings-related data like estimated and actual earnings per share (EPS), the difference between them, and the percentage surprise.\n\nThis endpoint is useful for financial analysts, investors, or anyone interested in tracking company earnings announcements over a specific period or within specific markets.\n\nExample questions this endpoint could answer:\n- \"What are the earnings announcements for companies on the NYSE this week?\"\n- \"Can I get a list of earnings surprises for companies in the United States for the last month?\"\n- \"How did the actual earnings compare to estimates for companies traded under the MIC code XNYS today?\"",
  "GetEarningsEstimate": "The \"Earnings Estimate\" API endpoint provides analysts' projections for a company's future earnings per share (EPS) on a quarterly and annual basis. To use this endpoint, you must specify the company's stock symbol, which is a required parameter. You can also filter the request using other identifiers such as FIGI, ISIN, or CUSIP, and specify the country or exchange where the stock is traded.\n\nUpon a successful request, the endpoint returns a JSON object containing meta-information about the company, such as its name, the currency in which it is traded, and the exchange details. The main content includes a list of earnings estimates, detailing the average, lowest, and highest EPS estimates from analysts, the number of analysts contributing to the estimate, and comparisons to estimates from the previous year.\n\nThis endpoint is useful for investors and analysts who want to assess market expectations for a company's financial performance. \n\nExample questions that this endpoint could answer include:\n- \"What are the projected earnings per share for Apple Inc. for the next quarter?\"\n- \"How many analysts have provided EPS estimates for Tesla this year?\"\n- \"What is the average earnings estimate for Microsoft compared to last year's projections?\"",
  "GetEdgarFilingsArchive": "The `/edgar_filings/archive` endpoint provides access to both real-time and historical filings, forms, and exhibits from the SEC's EDGAR system. This endpoint is particularly useful for retrieving detailed filing information for a specific financial instrument or company.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the company for which the filings are requested, e.g., \"AAPL\".\n- **figi, isin, cusip:** Optional identifiers to filter the filings by specific financial instrument identifiers.\n- **exchange, mic_code:** Optional filters to narrow down filings based on the exchange or market identifier code.\n- **country:** Filter filings by the country name or alpha code.\n- **form_type:** Specify the type of form, such as `8-K` or `EX-1.1`, to filter the results.\n- **filled_from, filled_to:** Date range filters to retrieve filings submitted within a specific timeframe.\n- **page, page_size:** Pagination controls to manage the number of records returned per request.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta Information:** Details about the company, such as its symbol, exchange, and issue type.\n- **Values:** A list of filings, each with details like the CIK code, filing date, form type, and links to the filing documents.\n\n### Usage Context:\nThis endpoint is ideal for analysts, investors, or researchers who need to access comprehensive filing data for financial analysis or compliance purposes.\n\n### Example Questions:\n1. \"How can I find all recent SEC filings for Apple?\"\n2. \"What 8-K forms have been filed by companies listed on NASDAQ?\"\n3. \"Can I get a list of filings for a company with a specific CUSIP code?\"",
  "GetTimeSeriesEma": "The `/ema` endpoint provides the Exponential Moving Average (EMA) for a specified financial instrument. EMA is a technical indicator that gives more weight to recent prices, helping traders identify trends and make informed trading decisions.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval for the data points (e.g., `1min`, `1day`).\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the time range for the data. Dates can be specified in formats like `2006-01-02` or `2006-01-02 15:04:05`.\n- **series_type:** The price type used for calculating the indicator (e.g., `close`, `open`).\n- **time_period:** The number of periods over which the EMA is calculated, ranging from 1 to 800.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and technical indicator details.\n- **values:** An array of time series data points, each with a timestamp and the corresponding EMA value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to calculate the EMA for various financial instruments to assess market trends and potential trading opportunities.\n\n### Example Questions:\n1. \"What is the 15-minute EMA for Apple stock over the past week?\"\n2. \"Can I get the daily EMA for EUR/USD for the last month?\"\n3. \"How does the EMA of Bitcoin compare over different time periods?\"",
  "GetEod": "The `/eod` endpoint provides the latest End of Day (EOD) price for a specified financial instrument. This endpoint is useful for retrieving the closing price of a stock or other financial asset at the end of a trading day.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument you are interested in, such as \"AAPL\" for Apple Inc.\n- **figi, isin, cusip:** Optional identifiers that can be used to specify the instrument more precisely.\n- **exchange:** The exchange where the instrument is traded.\n- **mic_code:** The Market Identifier Code, which is a standardized code for exchanges.\n- **country:** The country where the instrument is traded.\n- **type:** The asset class of the instrument, such as \"ETF\" or \"Common Stock\".\n- **date:** If specified, returns the EOD data for that particular date.\n- **prepost:** A boolean indicating whether to include pre-market and post-market data, available for certain subscription plans.\n- **dp:** Specifies the number of decimal places for the returned price values, ranging from 0 to 11.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **symbol:** The symbol of the instrument.\n- **exchange:** The exchange where the instrument is traded.\n- **mic_code:** The market identifier code.\n- **currency:** The currency in which the instrument is denominated.\n- **datetime:** The date and time of the EOD data.\n- **close:** The closing price of the instrument at the end of the day.\n\n### Usage Context:\nThis endpoint is particularly useful for financial analysts, traders, and investors who need to track the daily closing prices of financial instruments for analysis or decision-making.\n\n### Example Questions:\n1. What was the closing price of Apple Inc. on the NASDAQ at the end of yesterday?\n2. Can I get the end-of-day price for a specific stock using its ISIN?\n3. How do I find the EOD price for an ETF traded on a specific exchange?",
  "GetEpsRevisions": "The \"EPS Revisions\" API endpoint provides information on analysts' revisions of a company's expected future earnings per share (EPS) for both quarterly and annual periods. It specifically focuses on changes made over the past week and month. To use this endpoint, you must specify a company using one of several identifiers: the company's stock symbol, FIGI, ISIN, or CUSIP. Additionally, you can filter results by country or exchange.\n\nKey input parameters include:\n- **symbol**: The stock ticker symbol of the company (required).\n- **figi**: The Financial Instrument Global Identifier.\n- **isin**: The International Securities Identification Number.\n- **cusip**: The Committee on Uniform Securities Identification Procedures number.\n- **country**: The country name or alpha code to filter results.\n- **exchange**: The name of the stock exchange to filter results.\n\nThe endpoint returns a JSON object containing:\n- **meta**: Information about the company, such as its name, trading currency, and exchange details.\n- **eps_revision**: An array of EPS revision data, detailing the number of upward and downward revisions over the last week and month for different periods (current quarter, next quarter, current year, next year).\n- **status**: The status of the response, indicating success or failure.\n\nThis endpoint is useful for investors or analysts looking to track changes in EPS forecasts, which can indicate shifts in market sentiment or company performance expectations.\n\nExample questions this endpoint could answer:\n- \"How have analysts revised Apple's EPS estimates over the past month?\"\n- \"What are the recent EPS revisions for a company traded on NASDAQ?\"\n- \"Can I see the EPS revision trends for a company identified by its ISIN?\"",
  "GetEpsTrend": "The `/eps_trend` API endpoint provides a historical analysis of estimated Earnings Per Share (EPS) changes over a specified period for a financial instrument. This is useful for investors and analysts looking to understand how EPS estimates have evolved over time for a particular stock or financial instrument.\n\n### Key Input Parameters:\n- **symbol**: A required parameter that specifies the stock ticker symbol of the instrument you are interested in (e.g., \"AAPL\" for Apple Inc.).\n- **figi**: An optional parameter allowing you to specify the instrument using its Financial Instrument Global Identifier.\n- **isin**: An optional parameter to filter by the International Securities Identification Number.\n- **cusip**: An optional parameter to filter using the Committee on Uniform Securities Identification Procedures number.\n- **country**: An optional parameter to filter by the country name or alpha code.\n- **exchange**: An optional parameter to filter by the exchange name.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: Metadata about the instrument, including its name, currency, exchange, and type.\n- **eps_trend**: An array of EPS trend data, detailing estimates for different periods (e.g., current quarter, next quarter) and how these estimates have changed over the past 7, 30, 60, and 90 days.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for financial analysts and investors who want to track changes in EPS estimates over time to make informed investment decisions.\n\n### Example Questions:\n1. \"What are the historical EPS estimate changes for Apple Inc. over the last quarter?\"\n2. \"How has the EPS estimate for a company listed on NASDAQ changed over the past 90 days?\"\n3. \"Can I see the EPS trend for a company identified by its ISIN?\"",
  "GetEtf": "The `/etfs` endpoint provides a list of Exchange-Traded Funds (ETFs) available through the Twelve Data API. This list is updated daily and can be filtered using various parameters to narrow down the search results.\n\n### Key Input Parameters:\n- **symbol**: Specify the ticker symbol of the ETF you are interested in.\n- **figi**: Use the Financial Instrument Global Identifier to filter ETFs.\n- **isin**: Filter by the International Securities Identification Number.\n- **cusip**: Use the CUSIP number to find specific ETFs.\n- **exchange**: Filter ETFs by the exchange name where they are traded.\n- **mic_code**: Use the Market Identifier Code to specify the trading market.\n- **country**: Filter ETFs by the country of origin.\n- **format**: Choose the response format, either JSON (default) or CSV.\n- **include_delisted**: Include delisted ETFs in the results if set to true.\n\n### Response:\nThe endpoint returns an array of ETF objects, each containing details such as the symbol, full name, currency, exchange, country, and identifiers like FIGI and ISIN. It also provides information on the level of access and the plan associated with the ETF.\n\n### Usage Context:\nThis endpoint is useful for financial analysts, investors, or developers who need to access up-to-date information on ETFs for research, portfolio management, or application development.\n\n### Example Questions:\n1. \"What ETFs are available on the NYSE?\"\n2. \"Can I get a list of ETFs traded in the United States?\"\n3. \"How can I find the ISIN for the SPY ETF?\"",
  "GetETFsFamily": "The `/etfs/family` endpoint provides a list of exchange-traded fund (ETF) families. It allows users to filter the results based on specific criteria, such as the country where the ETFs are based or the investment company managing the fund. \n\nKey input parameters include:\n- **country**: This parameter filters the ETF families by the country name or its alpha code, allowing users to narrow down the list to specific geographic regions.\n- **fund_family**: This parameter filters the results by the name of the investment company that manages the ETF, enabling users to find funds managed by specific companies.\n\nThe endpoint returns a JSON object containing:\n- A **result** object, which is a list of ETF families categorized by country. Each entry includes the names of the investment companies managing the ETFs.\n- A **status** string indicating the success of the request, typically returning \"ok\" if successful.\n\nThis endpoint is useful for users seeking information on ETF families available in specific countries or managed by particular investment companies.\n\nExample questions this endpoint could answer:\n- \"What ETF families are available in the United States?\"\n- \"Which investment companies manage ETFs in India?\"\n- \"Can I get a list of ETF families managed by Aviva SpA?\"",
  "GetETFsList": "The `/etfs/list` endpoint provides a list of exchange-traded funds (ETFs) available through Twelve Data, sorted in descending order by their total assets value. This list is updated daily to ensure current information.\n\nKey input parameters include:\n- **symbol**: Filters the list by a specific ETF symbol or ticker.\n- **figi**: Filters by the Financial Instrument Global Identifier.\n- **isin**: Filters by the International Securities Identification Number.\n- **cusip**: Filters by the CUSIP number, a unique identifier for securities.\n- **country**: Filters ETFs by the country of incorporation or by using an alpha code.\n- **fund_family**: Filters by the investment company managing the fund.\n- **fund_type**: Filters by the type of fund.\n- **page**: Specifies the page number for pagination, with a default of 1.\n- **outputsize**: Determines the number of records returned per page, defaulting to 50.\n\nThe response includes:\n- A **count** of the total number of matching ETFs.\n- A **list** of ETFs, each with details such as symbol, full name, country, market identifier code (MIC), fund family, and fund type.\n- A **status** indicating the success of the request.\n\nThis endpoint can answer questions like:\n- \"What are the top ETFs managed by iShares in the United States?\"\n- \"Can I get a list of ETFs with a specific ISIN?\"\n- \"How many large blend ETFs are available in the market?\"",
  "GetETFsType": "The `/etfs/type` endpoint is designed to provide a list of different types of exchange-traded funds (ETFs). It allows users to filter the list based on specific criteria, such as the country and the type of fund. \n\nKey input parameters include:\n- `country`: This parameter allows users to filter the ETF types by specifying a country name or its alpha code. This helps in narrowing down the results to ETFs available in a particular geographic region.\n- `fund_type`: This parameter lets users filter the results by specifying the type of fund they are interested in, such as equity, bond, or sector-specific funds.\n\nThe endpoint returns a JSON object containing:\n- `result`: An object where each key is a country, and the value is an array of ETF types available in that country.\n- `status`: A string indicating the success of the request, typically returning \"ok\" if the request is successful.\n\nThis endpoint can be useful for financial analysts, investors, or researchers looking to explore or compare the types of ETFs available in different countries or within specific fund categories.\n\nExample questions this endpoint could answer:\n- \"What types of ETFs are available in the United States?\"\n- \"Can I see a list of property-related ETFs in Singapore?\"\n- \"What are the different types of sector equity ETFs in Europe?\"",
  "GetETFsWorld": "This API endpoint provides comprehensive data about a specific Exchange-Traded Fund (ETF), including its summary, performance, risk metrics, and composition details. To retrieve this information, you must provide the ETF's symbol ticker as a query parameter. Optionally, you can filter the data by using identifiers such as FIGI, ISIN, or CUSIP, or by specifying a country. The endpoint also allows you to set the number of decimal places for floating-point values, ranging from 0 to 11, with a default of 5.\n\nUpon a successful request, the API returns detailed information about the ETF, including its summary (such as name, fund family, and type), performance metrics (like trailing and annual returns), risk measures (including volatility and valuation metrics), and composition (such as sector and country allocations, asset allocation, and top holdings).\n\nThis endpoint is useful for financial analysts, investors, or anyone interested in detailed ETF data for research or decision-making purposes.\n\n### Example Questions:\n1. \"What are the performance and risk metrics of the iShares Core S&P 500 ETF?\"\n2. \"Can I get a breakdown of the top holdings and sector allocations for a specific ETF?\"\n3. \"How does the expense ratio and net asset value of an ETF compare to others in its category?\"",
  "GetETFsWorldComposition": "The `/etfs/world/composition` endpoint provides detailed information about the composition of a specific Exchange-Traded Fund (ETF). By querying this endpoint, you can retrieve data on the ETF's sector allocations, country allocations, asset allocations, top holdings, and bond breakdown. This includes the percentage of the portfolio dedicated to different sectors, countries, and asset types, as well as details on the top holdings and bond characteristics such as average maturity and credit quality.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the ETF you want to analyze.\n- **figi, isin, cusip:** Optional identifiers to filter the ETF by its FIGI, ISIN, or CUSIP.\n- **country:** Optionally filter the composition data by a specific country name or code.\n- **dp:** Specify the number of decimal places for floating-point values, with a default of 5.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Major Market Sectors:** Breakdown of the ETF's exposure to various sectors and their respective weights.\n- **Country Allocation:** Distribution of the ETF's assets across different countries.\n- **Asset Allocation:** Percentage of the portfolio in cash, stocks, bonds, and other asset types.\n- **Top Holdings:** List of top securities held by the ETF, including their symbols, names, and weights.\n- **Bond Breakdown:** Details on the bond holdings, including average maturity, duration, and credit quality.\n\n### Usage Context:\nThis endpoint is useful for investors and analysts who want to understand the underlying components of an ETF, assess its diversification, and evaluate its exposure to different market segments.\n\n### Example Questions:\n1. What is the sector composition of the ETF with the symbol \"SPY\"?\n2. How is the ETF \"VOO\" allocated across different countries?\n3. Can you provide the top holdings and their weights for the ETF with ISIN \"US4642872000\"?",
  "GetETFsWorldPerformance": "The `/etfs/world/performance` endpoint provides detailed performance data for a specified Exchange Traded Fund (ETF). It returns both trailing and annual returns, allowing users to analyze the ETF's performance over different periods.\n\n### Key Input Parameters:\n- **symbol**: This is a required parameter. It specifies the ticker symbol of the ETF for which performance data is requested.\n- **figi**: An optional parameter to filter the ETF by its Financial Instrument Global Identifier.\n- **isin**: An optional parameter to filter by the International Securities Identification Number.\n- **cusip**: An optional parameter to filter by the CUSIP number of the ETF.\n- **country**: An optional parameter to filter results by the country name or its alpha code.\n- **dp**: Specifies the number of decimal places for floating-point values in the response, with a default of 5 and a range from 0 to 11.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Trailing Returns**: Performance data over various periods, including the fund's return and the average return of the same category.\n- **Annual Total Returns**: Yearly performance data, detailing the fund's return and the category average for each year.\n- **Status**: Indicates the success of the response, typically \"ok\".\n\n### Usage Context:\nThis endpoint is useful for investors or analysts seeking to evaluate the historical performance of an ETF, compare it against category averages, and make informed investment decisions.\n\n### Example Questions:\n- \"What are the trailing returns for the ETF with the symbol 'XYZ'?\"\n- \"How did the ETF with ISIN 'US1234567890' perform annually over the past few years?\"\n- \"Can I see the performance of an ETF filtered by its CUSIP number?\"",
  "GetETFsWorldRisk": "The `/etfs/world/risk` endpoint provides detailed risk metrics for a specified Exchange-Traded Fund (ETF). To use this endpoint, you must provide the ETF's symbol as a required query parameter. Optionally, you can also filter the request by using identifiers such as FIGI, ISIN, or CUSIP, or specify a country to narrow down the results. Additionally, you can define the precision of floating-point numbers with the `dp` parameter, which accepts values from 0 to 11.\n\nUpon a successful request, the endpoint returns a JSON object containing various risk metrics of the ETF. These include volatility measures like alpha, beta, mean annual return, R-squared, standard deviation, Sharpe ratio, and Treynor ratio, along with their respective category averages. It also provides valuation metrics such as price-to-earnings, price-to-book, price-to-sales, and price-to-cashflow ratios. The response includes a status field indicating the success of the request.\n\nThis endpoint is useful for investors or analysts looking to assess the risk profile of an ETF in comparison to its category or market benchmarks.\n\nExample questions this endpoint could answer:\n- \"What are the risk metrics for the ETF with the symbol 'SPY'?\"\n- \"How does the volatility of a specific ETF compare to its category average?\"\n- \"Can I get the valuation metrics for an ETF identified by its ISIN?\"",
  "GetETFsWorldSummary": "The `/etfs/world/summary` endpoint provides a brief summary of an Exchange Traded Fund (ETF) based on specific identifiers. This endpoint is accessed via a GET request and requires the `symbol` parameter, which is the ticker symbol of the ETF you are interested in. Optional parameters include `figi`, `isin`, `cusip`, and `country`, which allow you to filter the ETF by its financial instrument global identifier, international securities identification number, CUSIP, or country, respectively. Additionally, you can specify the `dp` parameter to determine the number of decimal places for floating values, with a default of 5.\n\nThe response includes detailed information about the ETF, such as its name, fund family, type, currency, inception date, year-to-date return, net expense ratio, yield, net asset value (NAV), last price, turnover rate, and net assets. It also provides an overview of the fund's investment strategy.\n\nThis endpoint is useful for users who want to quickly gather key financial and operational details about a specific ETF.\n\nExample questions this endpoint can answer:\n- \"What are the key details of the iShares Core S&P 500 ETF?\"\n- \"Can you provide a summary of the ETF with the symbol IVV?\"\n- \"What is the year-to-date return and expense ratio of a specific ETF?\"",
  "GetExchangeRate": "The `/exchange_rate` endpoint provides real-time exchange rates for specified currency pairs, which can include both forex and cryptocurrencies. To use this endpoint, you must specify the `symbol` parameter, which indicates the currency pair you are interested in, such as `EUR/USD` for forex or `BTC/ETH` for cryptocurrencies.\n\nOptionally, you can specify a `date` parameter to retrieve the exchange rate from a specific date and time. This date should be in the format `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`. The `format` parameter allows you to choose between `JSON` or `CSV` output, with `JSON` being the default. If you choose `CSV`, you can also specify a `delimiter` for the file, with the default being a semicolon (`;`). The `dp` parameter lets you define the number of decimal places for the rate, defaulting to 5. Additionally, you can set the `timezone` parameter to adjust the output datetime to a specific timezone, such as `UTC` or any IANA timezone.\n\nUpon a successful request, the endpoint returns the exchange rate for the specified currency pair, including the symbol, the rate itself, and a Unix timestamp indicating when the rate was recorded.\n\nExample questions this endpoint could answer include:\n- \"What is the current exchange rate for EUR/USD?\"\n- \"Can I get the exchange rate for BTC/ETH on a specific date?\"\n- \"How can I download the exchange rate data in CSV format with a custom delimiter?\"",
  "GetExchangeSchedule": "The `/exchange_schedule` endpoint provides details about stock exchanges, including their trading hours. You can filter the results by specifying parameters such as the exchange name (`mic_name`), the market identifier code (`mic_code`), and the country (`country`). Additionally, you can specify a `date` to get the schedule for a particular day, using formats like an exact date (e.g., \"2021-10-27\"), human-readable keywords like \"today\" or \"yesterday,\" or a full datetime string in UTC.\n\nThe response includes information about the exchange, such as its official name, market identifier code, country, and time zone. It also details the trading sessions, including their names, types, and opening and closing times.\n\nThis endpoint is useful for:\n1. Finding out the trading hours for a specific exchange on a given date.\n2. Checking the schedule of an exchange in a particular country.\n3. Understanding the trading sessions for an exchange like NASDAQ or NYSE.\n\nExample questions this endpoint could answer:\n- \"What are the trading hours for NASDAQ today?\"\n- \"What is the exchange schedule for the NYSE on October 27, 2021?\"\n- \"Can I get the trading sessions for exchanges in the United States?\"",
  "GetExchanges": "The `/exchanges` endpoint provides a list of stock or ETF exchanges available through the Twelve Data API. This list is updated daily and can be filtered based on several parameters to refine the search results.\n\nKey input parameters include:\n- **type**: Specifies the asset class, such as \"ETF\" or \"Common Stock\", to filter exchanges that support specific types of instruments.\n- **name**: Allows filtering by the exchange name, for example, \"NASDAQ\".\n- **code**: Filters by the Market Identifier Code (MIC), such as \"XNGS\", which is a standardized code for exchanges.\n- **country**: Filters exchanges by country name or alpha code, like \"United States\".\n- **format**: Determines the format of the response, either \"JSON\" or \"CSV\".\n- **show_plan**: A boolean to include information about the availability of symbols in different subscription plans.\n\nThe endpoint returns an array of exchange objects, each containing details such as the exchange name, MIC code, country, timezone, and access levels related to subscription plans.\n\nThis endpoint is useful for:\n- Finding which exchanges are available for a specific asset class.\n- Identifying exchanges by their name or country.\n- Retrieving exchange information in a specific data format.\n\nExample questions a user might ask:\n- \"Which exchanges support ETFs in the United States?\"\n- \"What is the MIC code for the NASDAQ exchange?\"\n- \"Can I get a list of all stock exchanges in CSV format?\"",
  "GetTimeSeriesExp": "The `/exp` endpoint provides the exponential value of a given input, which is often used in mathematical analysis or financial market calculations. This endpoint is particularly useful for retrieving time series data of exponential values for a specified financial instrument.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the financial instrument, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval between consecutive data points, options include `1min`, `5min`, `1day`, etc.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date** and **end_date**: Define the date range for the data retrieval.\n- **timezone**: Specifies the timezone for the output datetime, such as `UTC` or `America/New_York`.\n- **series_type**: The price type on which the exponential calculation is based, such as `close` or `open`.\n- **format**: The format of the response data, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each containing a datetime and the calculated exponential value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for analysts and traders who need to perform advanced calculations on financial data, such as determining trends or making predictions based on exponential growth models.\n\n### Example Questions:\n1. \"What is the exponential value of Apple's stock over the past week with a daily interval?\"\n2. \"Can I get the exponential calculations for the EUR/USD currency pair for the last month in UTC?\"\n3. \"How do I retrieve the exponential values for Bitcoin trading data every hour?\"",
  "GetTimeSeriesFloor": "The `/floor` endpoint provides the FLOOR technical indicator data for a specified financial instrument. This indicator rounds input data down to the nearest integer, which is useful for various data analysis or calculation tasks.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This parameter is required.\n- **interval**: The time interval for the data points, such as `1min`, `1day`, etc. This parameter is required.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000. Defaults to 30 if no date parameters are set.\n- **start_date** and **end_date**: Specify the date range for the data. If provided, these dates are considered in the context of the specified timezone.\n- **timezone**: Determines the timezone for the output datetime, which can be `Exchange`, `UTC`, or a specific IANA timezone.\n- **format**: The format of the response data, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and other metadata.\n- **values**: An array of time series data points, each with a datetime and the calculated floor value.\n- **status**: The status of the response, typically \"ok\".\n\n### Example Questions:\n1. \"What is the FLOOR indicator for Apple stock at 1-minute intervals?\"\n2. \"Can I get the FLOOR values for EUR/USD for the past week?\"\n3. \"How does the FLOOR indicator look for Bitcoin in JSON format?\"",
  "GetForexPairs": "The `/forex_pairs` endpoint provides a list of available forex pairs from the Twelve Data API, updated daily. This endpoint is useful for retrieving information about different currency pairs, including their classification into groups such as Major, Minor, Exotic, and Exotic-Cross.\n\nKey input parameters include:\n- `symbol`: A specific currency pair symbol to retrieve, like \"EUR/USD\".\n- `currency_base`: Filters the list by the base currency, such as \"EUR\".\n- `currency_quote`: Filters the list by the quote currency, such as \"USD\".\n- `format`: Specifies the response format, either \"JSON\" (default) or \"CSV\".\n- `delimiter`: Defines the separator for CSV format, defaulting to a semicolon.\n\nThe endpoint returns an array of forex pairs, each with details such as the symbol, currency group, base currency, and quote currency.\n\nThis endpoint can answer questions like:\n- \"What forex pairs are available with EUR as the base currency?\"\n- \"Can I get a list of all major forex pairs?\"\n- \"How can I retrieve forex pairs data in CSV format?\"",
  "GetFundHolders": "The `/fund_holders` endpoint provides information about the amount of a company's available stock that is owned by mutual fund holders. To use this endpoint, you must specify the `symbol` parameter, which is the ticker symbol of the financial instrument you are interested in. This is required and can include preferred stocks using a dot delimiter (e.g., `BRK.A` or `BRK.B`). \n\nAdditionally, you can filter the results using other identifiers such as `figi` (Financial Instrument Global Identifier), `isin` (International Securities Identification Number), or `cusip` (Committee on Uniform Securities Identification Procedures). You can also specify the `exchange` where the instrument is traded, the `mic_code` (Market Identifier Code), or the `country` where the instrument is traded.\n\nThe response includes metadata about the financial instrument, such as its symbol, name, currency, and exchange details. It also provides a list of fund holders, detailing the legal name of the institution, the date reported, the number of shares owned, the total value of those shares, and the percentage of shares outstanding that the institution holds.\n\nThis endpoint could be useful for questions like:\n- \"Which mutual funds hold shares of Apple Inc. and how much do they own?\"\n- \"What percentage of Tesla's shares are held by mutual funds?\"\n- \"Can I get a list of mutual fund holders for a specific stock traded on NASDAQ?\"",
  "GetFunds": "The `/funds` endpoint is designed to retrieve a list of funds available through the Twelve Data API. This list is updated daily and provides detailed information about each fund, such as its symbol, name, country, currency, exchange, and type. Users can filter the results using various query parameters, including the fund's ticker symbol, FIGI, ISIN, CUSIP, exchange, and country. Additionally, users can specify the format of the response (either JSON or CSV) and control the pagination and output size of the results.\n\nKey input parameters include:\n- `symbol`: The ticker symbol of the fund.\n- `figi`: The financial instrument global identifier.\n- `isin`: The international securities identification number.\n- `cusip`: The CUSIP number of the fund.\n- `exchange`: The name of the exchange where the fund is traded.\n- `country`: The country name or alpha code.\n- `format`: The desired format of the response, either JSON or CSV.\n- `page` and `outputsize`: For pagination and controlling the number of results returned.\n\nThe endpoint returns a structured response containing the total count of matching funds and a list of fund details, including their symbols, names, countries, currencies, exchanges, and other identifiers.\n\nThis endpoint could answer questions like:\n- \"What are the available funds traded on the NYSE?\"\n- \"Can I get a list of funds with the symbol FXAIX?\"\n- \"How can I find funds available in the United States?\"",
  "GetGrowthEstimates": "The `/growth_estimates` endpoint provides consensus analyst estimates on a company's growth rates over various periods. It calculates averages from multiple analysts' projections, focusing on metrics such as earnings per share and revenue growth. This endpoint is particularly useful for investors and analysts seeking to understand a company's potential future performance.\n\n### Key Input Parameters:\n- **symbol**: This is a required parameter that specifies the stock ticker symbol of the company for which growth estimates are requested (e.g., \"AAPL\" for Apple Inc.).\n- **figi**: An optional parameter representing the Financial Instrument Global Identifier, which uniquely identifies the instrument.\n- **isin**: An optional parameter for the International Securities Identification Number, another unique identifier for securities.\n- **cusip**: An optional parameter for the Committee on Uniform Securities Identification Procedures number, used mainly in the United States.\n- **country**: Filters the data by the country where the instrument is traded.\n- **exchange**: Specifies the exchange where the instrument is traded, such as \"NASDAQ\".\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta information**: Includes details about the instrument, such as its name, currency, exchange, and type.\n- **Growth estimates**: Provides projected growth percentages for the current and next quarters, the current and next years, and the next five years annually. It also includes historical growth data over the past five years.\n- **Status**: Indicates the success of the request.\n\n### Example Questions:\n1. \"What are the projected growth rates for Apple Inc. over the next five years?\"\n2. \"Can I get the growth estimates for a company listed on NASDAQ?\"\n3. \"What is the expected revenue growth for a company with ISIN US0378331005?\"",
  "GetTimeSeriesHeikinashiCandles": "The `/heikinashicandles` endpoint provides Heikin Ashi candle data, which is a type of chart that uses averaged price data to smooth out market noise and highlight trends and potential reversals. This endpoint is useful for traders and analysts looking to analyze market trends using Heikin Ashi charts.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument, such as `AAPL` for Apple Inc. This is necessary to specify which instrument's data you want.\n- **interval** (required): The time interval between data points, such as `1min`, `5min`, `1day`, etc. This determines the granularity of the data.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000. Defaults to 30 if no date parameters are set.\n- **start_date** and **end_date**: Define the date range for the data. If provided, these will override the default output size.\n- **timezone**: Specifies the timezone for the output datetime, which can be `Exchange`, `UTC`, or a specific IANA timezone.\n- **format**: The format of the response data, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with Heikin-Ashi open, high, low, and close values.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is ideal for users who need to analyze financial instruments using Heikin Ashi charts to identify trends and potential reversals. It supports a variety of financial instruments, including stocks, forex, and cryptocurrencies.\n\n### Example Questions:\n1. \"How can I get Heikin Ashi candle data for Apple stock at 1-minute intervals?\"\n2. \"What are the Heikin Ashi values for EUR/USD over the past week?\"\n3. \"Can I retrieve Heikin Ashi data for Bitcoin with a 1-day interval?\"",
  "GetTimeSeriesHlc3": "The `/hlc3` endpoint provides the High, Low, Close Average (HLC3) indicator for a specified financial instrument. This indicator calculates the average of a security's high, low, and close prices, offering a simplified view of price action over time.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for data points, such as `1min`, `1day`, or `1week`.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Specify the date range for the data. If `timezone` is provided, these dates will be adjusted accordingly.\n- **timezone:** Determines the time zone for the output datetime, supporting `Exchange`, `UTC`, or specific IANA time zones.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points with each entry containing the datetime and the calculated HLC3 value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who want to analyze the average price movement of a security over specific intervals, helping them make informed trading decisions.\n\n### Example Questions:\n1. \"What is the average high, low, and close price for Apple stock over the past week?\"\n2. \"Can I get the HLC3 values for EUR/USD on a 15-minute interval?\"\n3. \"How does the HLC3 for Bitcoin compare over the last month?\"",
  "GetTimeSeriesHtDcPeriod": "The HT_DCPERIOD endpoint provides the Hilbert Transform Dominant Cycle Period for a specified financial instrument, helping traders identify the dominant market cycle length. This information can be crucial for adapting trading strategies to current market conditions.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval between data points, such as `1min`, `5min`, `1h`, `1day`, etc.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the date range for the data. These can be specified in formats like `2006-01-02` or `2006-01-02 15:04:05`.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with a `datetime` and `ht_dcperiod` value.\n- **status:** The status of the response, typically \"ok\".\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to understand the dominant cycle period in market data to adjust their trading strategies accordingly.\n\n### Example Questions:\n1. \"What is the dominant cycle period for Apple stock on a 1-minute interval?\"\n2. \"How can I find the market cycle length for EUR/USD over the past week?\"\n3. \"Can I get the dominant cycle period for Bitcoin using daily data?\"",
  "GetTimeSeriesHtDcPhase": "The `/ht_dcphase` endpoint provides the Hilbert Transform Dominant Cycle Phase (HT_DCPHASE) for a specified financial instrument. This technical indicator helps traders identify the current phase of the dominant market cycle, which can be useful for determining potential entry and exit points in trading.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the financial instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval** (required): The time interval between consecutive data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date** and **end_date**: Define the date range for the data retrieval.\n- **series_type**: Specifies the price type used for the calculation, such as `close`, `open`, `high`, `low`, or `volume`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and technical indicator details.\n- **values**: An array of time series data points, each with a datetime and the corresponding HT_DCPHASE value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for traders and analysts who want to incorporate cycle analysis into their trading strategies. It allows them to see how the phase of the market cycle changes over time for a specific instrument.\n\n### Example Questions:\n1. \"What is the current dominant cycle phase for Apple stock on a 1-minute interval?\"\n2. \"How has the HT_DCPHASE for EUR/USD evolved over the past week?\"\n3. \"Can I get the dominant cycle phase for Bitcoin using a daily interval?\"",
  "GetTimeSeriesHtPhasor": "The `/ht_phasor` endpoint provides the Hilbert Transform Phasor Components for a specified financial instrument. This endpoint is useful for analyzing cyclical patterns and trend directions in the price series of stocks, currencies, or other financial instruments.\n\n### Key Input Parameters:\n- **symbol**: This is a required parameter that specifies the ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval**: Another required parameter that defines the time interval between data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize**: Specifies the number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date** and **end_date**: These parameters define the date range for the data. They can be used to specify a precise period for analysis.\n- **timezone**: Determines the timezone for the output datetime, which can be set to `Exchange`, `UTC`, or a specific IANA timezone.\n- **series_type**: Indicates the price type used for the calculation, such as `close`, `open`, `high`, etc.\n\n### Output:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and technical indicator details.\n- **values**: An array of data points, each with a timestamp, in-phase, and quadrature components.\n- **status**: The response status, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for traders and analysts looking to understand market cycles and trends through advanced technical analysis techniques.\n\n### Example Questions:\n1. \"How can I analyze the cyclical patterns of Apple's stock price using the Hilbert Transform?\"\n2. \"What are the in-phase and quadrature components for EUR/USD over the past week?\"\n3. \"Can I get the HT_PHASOR data for Bitcoin on a 5-minute interval?\"",
  "GetTimeSeriesHtSine": "The `/ht_sine` endpoint provides the Hilbert Transform Sine Wave (HT_SINE) indicator for a specified financial instrument. This indicator helps traders identify potential turning points and trend directions by calculating sine and cosine wave components based on the dominant market cycle.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between data points, such as `1min`, `1day`, etc.\n- **outputsize:** The number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date and end_date:** Specify the date range for the data.\n- **timezone:** Determines the timezone for the output datetime, which can be set to `Exchange`, `UTC`, or a specific IANA timezone.\n- **series_type:** The price type on which the indicator is calculated, defaulting to `close`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta information:** Includes details like the symbol, interval, currency, exchange, and the type of asset.\n- **Values:** An array of time series data points, each with a datetime, `ht_sine`, and `ht_leadsine` values.\n- **Status:** Indicates the success of the request.\n\n### Example Use Cases:\n1. \"What are the HT_SINE values for Apple stock over the past week using 1-hour intervals?\"\n2. \"How can I find the sine wave components for EUR/USD on a daily basis?\"\n3. \"Can I get the HT_SINE indicator for Bitcoin with 5-minute intervals for the last 100 data points?\"\n\nThis endpoint is particularly useful for traders and analysts looking to apply technical analysis using the HT_SINE indicator to forecast market trends and turning points.",
  "GetTimeSeriesHtTrendline": "The `/ht_trendline` endpoint provides access to the Hilbert Transform Instantaneous Trendline (HT_TRENDLINE), a technical indicator used to identify trends and potential entry or exit points in financial markets. This endpoint is particularly useful for traders and analysts looking to follow the dominant market cycle with a smoothed moving average.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the financial instrument (e.g., `AAPL`, `EUR/USD`). This is a required parameter.\n- **interval**: The time interval between data points (e.g., `1min`, `1day`). This is also required.\n- **outputsize**: The number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: Define the date range for the data retrieval.\n- **series_type**: Specifies the price type used for calculating the indicator, such as `close`, `open`, `high`, or `low`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a datetime and the corresponding HT_TRENDLINE value.\n- **status**: The response status, indicating success or failure.\n\n### Usage Context:\nThis endpoint is ideal for traders who need to analyze market trends using the HT_TRENDLINE indicator. It supports various financial instruments, including stocks, forex, and cryptocurrencies, and allows for customization through parameters like date range and data interval.\n\n### Example Questions:\n1. How can I get the HT_TRENDLINE for Apple stock on a 1-minute interval?\n2. What is the HT_TRENDLINE value for EUR/USD over the past week?\n3. Can I retrieve the HT_TRENDLINE for Bitcoin with a daily interval?",
  "GetTimeSeriesHtTrendMode": "The `/ht_trendmode` endpoint provides data on the Hilbert Transform Trend vs Cycle Mode (HT_TRENDMODE), a technical indicator used to differentiate between trending and cyclical phases in financial markets. This information is valuable for traders who need to adjust their strategies based on market conditions.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for the data points, options include `1min`, `5min`, `1h`, `1day`, etc.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Specify the date range for the data.\n- **timezone:** Determines the timezone for the datetime output, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n- **format:** The response format, either `JSON` or `CSV`.\n\n### Output:\nThe endpoint returns a JSON object containing:\n- **meta:** Information about the request, such as the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with a `datetime` and `ht_trendmode` value indicating the market phase.\n- **status:** The response status, typically \"ok\" for successful requests.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who want to understand market phases for specific instruments to better tailor their trading strategies. It supports various financial instruments, including stocks, forex, and cryptocurrencies.\n\n### Example Questions:\n1. \"How can I determine if the market for AAPL is trending or cyclical over the past week?\"\n2. \"What is the trend mode for EUR/USD at 5-minute intervals?\"\n3. \"Can I get the HT_TRENDMODE data for Bitcoin in CSV format?\"",
  "GetTimeSeriesIchimoku": "The `/ichimoku` endpoint provides data on the Ichimoku Cloud, a technical analysis tool used to identify trends, support and resistance levels, and potential entry and exit points in trading. This endpoint is particularly useful for traders looking to analyze market trends using this comprehensive indicator.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument you are interested in, such as `AAPL` for Apple or `EUR/USD` for the Euro to US Dollar currency pair.\n- **interval (required):** The time interval for the data points, such as `1min`, `1h`, or `1day`.\n- **outputsize:** Specifies the number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date and end_date:** Define the time range for the data retrieval.\n- **exchange, mic_code, country, type:** Optional filters to specify the exchange, market identifier code, country, and asset class.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** Information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of data points with Ichimoku Cloud components such as Tenkan-sen, Kijun-sen, Senkou Span A, Senkou Span B, and Chikou Span.\n- **status:** The status of the response, typically \"ok\".\n\n### Usage Context:\nThis endpoint is ideal for traders and analysts who want to apply the Ichimoku Cloud indicator to various financial instruments to make informed trading decisions.\n\n### Example Questions:\n1. \"How can I get the Ichimoku Cloud data for Apple stock on a daily basis?\"\n2. \"What are the Ichimoku indicator values for EUR/USD over the past week?\"\n3. \"Can I retrieve the Ichimoku Cloud analysis for Bitcoin with a 1-hour interval?\"",
  "GetIncomeStatement": "The `/income_statement` endpoint provides detailed income statements for a specified company, showing its revenues and expenses over a given period, either annually or quarterly. To use this endpoint, you must provide the company's symbol ticker (e.g., \"AAPL\" for Apple Inc.), which is a required parameter. Additional filters can be applied using identifiers such as FIGI, ISIN, or CUSIP, and you can specify the exchange or country where the instrument is traded. You can also choose the period of the income statement (annual or quarterly) and set a date range with `start_date` and `end_date` parameters. The `outputsize` parameter allows you to limit the number of records returned, with a default of 6.\n\nThe response includes meta information about the company and a detailed breakdown of the income statement, covering aspects like sales, cost of goods, gross profit, operating expenses, net income, and earnings per share, among others.\n\nThis endpoint can answer questions such as:\n- \"What were Apple's quarterly revenues and expenses for the last fiscal year?\"\n- \"Can I get the annual income statement for Tesla for the year 2020?\"\n- \"What is the net income and EPS for Microsoft in the latest quarter?\"",
  "GetIncomeStatementConsolidated": "The \"Income Statement Consolidated\" endpoint provides a consolidated income statement for a specified company, detailing its revenue, expenses, and net income over a given period, either annually or quarterly. This endpoint is useful for financial analysis and understanding a company's financial performance over time.\n\n### Key Input Parameters:\n- **symbol**: The stock ticker symbol of the company, which is required to identify the specific company for which the income statement is requested. For preferred stocks, a dot (.) delimiter is used (e.g., `BRK.A`).\n- **period**: Specifies whether the data should be annual or quarterly.\n- **start_date** and **end_date**: Define the date range for the income statement data, formatted as `YYYY-MM-DD`.\n- **figi**, **isin**, **cusip**: Optional identifiers for filtering by financial instrument global identifier, international securities identification number, or CUSIP, respectively.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **income_statement**: An array of income statement records, each including details like total revenue, gross profit, operating income, net income, and earnings per share.\n- **status**: Indicates the success of the request, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for investors, financial analysts, and researchers who need to analyze a company's financial health over specific periods. It supports various identifiers to ensure flexibility in querying different financial instruments.\n\n### Example Questions:\n1. \"What was Apple's quarterly income statement for the last fiscal year?\"\n2. \"Can I get the annual income statement for Berkshire Hathaway's preferred stock?\"\n3. \"What are the revenue and net income details for a company identified by a specific ISIN?\"",
  "GetInsiderTransactions": "The `/insider_transactions` endpoint provides detailed information about trading activities conducted by insiders of a company. This endpoint is useful for investors or analysts who want to track insider trading to gain insights into the confidence levels of company executives and other insiders.\n\n### Key Input Parameters:\n- **symbol (required)**: The ticker symbol of the company for which you want insider transaction data, such as `AAPL` for Apple Inc.\n- **figi**: The Financial Instrument Global Identifier, which uniquely identifies the financial instrument.\n- **isin**: The International Securities Identification Number, another unique identifier for the instrument.\n- **cusip**: The Committee on Uniform Securities Identification Procedures number, used for identifying securities.\n- **exchange**: The name of the exchange where the instrument is traded, like `NASDAQ`.\n- **mic_code**: The Market Identifier Code, which specifies the exchange under ISO 10383 standards.\n- **country**: The country where the instrument is traded, for example, `United States`.\n\n### Response:\nThe endpoint returns a JSON object containing metadata about the instrument, such as its symbol, company name, currency, and exchange details. It also provides a list of insider transactions, each including details like the insider's full name, position, the date of the transaction, whether the transaction was direct or indirect, the number of shares involved, the transaction value, and a description of the transaction price or range.\n\n### Example Questions:\n1. \"What recent insider transactions have occurred for Apple Inc.?\"\n2. \"Can I see insider trading details for a company listed on NASDAQ?\"\n3. \"How many shares did insiders of Tesla sell last month?\"",
  "GetInstitutionalHolders": "The \"Institutional Holders\" endpoint provides information about the amount of a company's stock that is owned by institutional investors, such as pension funds, insurance companies, and investment firms. To retrieve this data, you must specify the stock using its symbol ticker, which is a required parameter. You can also filter the results using additional identifiers like FIGI, ISIN, or CUSIP, and specify the exchange or country where the stock is traded.\n\nUpon a successful request, the endpoint returns a list of institutional holders for the specified financial instrument. This includes details such as the name of the institution, the date the data was reported, the number of shares owned, the total value of these shares, and the percentage of the company's total shares that the institution holds. Additionally, meta information about the stock, such as its name, currency, and exchange details, is also provided.\n\nThis endpoint can answer questions like:\n- \"Which institutions own shares of Apple Inc. and how much do they own?\"\n- \"What percentage of Tesla's stock is held by institutional investors?\"\n- \"Can you provide a list of institutional holders for Microsoft with their share values?\"",
  "GetInstrumentType": "The `/instrument_type` endpoint provides a list of all instrument types available through the Twelve Data API. It is a simple GET request that does not require any input parameters. When you call this endpoint, it returns a JSON object containing a list of instrument types, such as \"Common Stock,\" \"ETF,\" \"Bond,\" \"Digital Currency,\" and others. Additionally, the response includes a status field indicating the success of the request.\n\nThis endpoint is useful for users who need to understand the variety of financial instruments they can access or analyze using the Twelve Data API. It helps in identifying the categories of instruments available for further data retrieval or analysis.\n\nExample questions this endpoint could answer include:\n- \"What types of financial instruments can I access through Twelve Data?\"\n- \"Does Twelve Data provide information on ETFs and mutual funds?\"\n- \"What categories of stocks and bonds are available in the Twelve Data API?\"",
  "GetIntervals": "The `/intervals` endpoint is designed to provide a list of available time intervals that can be used for data requests. This endpoint does not require any input parameters, making it straightforward to use. When you make a GET request to this endpoint, it returns a JSON response containing two main components: \n\n1. `data`: An array of strings, each representing a time interval that is available for data requests.\n2. `meta`: A string indicating the response status, which can be either \"ok\" or \"error\".\n\nThis endpoint is useful for understanding what time intervals are available for querying data, which can help in planning and executing data retrieval tasks.\n\nHere are a few example questions that this endpoint could answer:\n- \"What time intervals can I use for my data queries?\"\n- \"List all the available time intervals for requesting data.\"\n- \"Which time intervals are supported by the API for data requests?\"",
  "GetIpoCalendar": "The `/ipo_calendar` endpoint provides information about initial public offerings (IPOs) that are past, occurring today, or upcoming. It allows users to filter IPOs based on specific criteria such as the exchange, market identifier code (MIC), country, and date range.\n\nKey input parameters include:\n- **exchange**: The name of the exchange where the IPO is listed.\n- **mic_code**: The Market Identifier Code, which is a standardized code for identifying securities exchanges.\n- **country**: The country where the IPO is taking place.\n- **start_date** and **end_date**: These parameters define the date range for the IPOs you want to retrieve, formatted as `YYYY-MM-DD`.\n\nThe endpoint returns a list of IPOs, each containing details such as the company's ticker symbol, name, exchange, MIC code, price range, offer price, currency, and the number of shares.\n\nThis endpoint is useful for investors, analysts, or anyone interested in tracking IPO activities across different markets and timeframes.\n\nExample questions this endpoint could answer:\n- \"What IPOs are happening on NASDAQ next week?\"\n- \"Can I see the list of IPOs in the UK for the past month?\"\n- \"Which companies are going public today in the US?\"",
  "GetTimeSeriesKama": "The `/kama` endpoint provides the Kaufman Adaptive Moving Average (KAMA) for a specified financial instrument. KAMA is a technical indicator that adjusts its sensitivity based on market volatility, aiming to balance between responsiveness and noise reduction.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval for the data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize:** The number of data points to return, ranging from 1 to 5000. Defaults to 30 if no date parameters are set.\n- **start_date and end_date:** Define the date range for the data. Can be used with a specified timezone.\n- **series_type:** The price type used for the calculation, such as `close`, `open`, etc.\n- **time_period:** The number of periods over which to average, ranging from 1 to 800.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with a datetime and the corresponding KAMA value.\n- **status:** The response status, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to assess market trends and volatility for specific instruments over different time intervals. It can be used to make informed trading decisions based on the adaptive nature of KAMA.\n\n### Example Questions:\n1. \"What is the Kaufman Adaptive Moving Average for Apple stock on a 1-minute interval?\"\n2. \"How has the KAMA for EUR/USD changed over the past week?\"\n3. \"Can I get the KAMA values for Bitcoin using a 15-minute interval?\"",
  "GetTimeSeriesKeltner": "The `/keltner` endpoint provides data on the Keltner Channel, a technical analysis indicator used to assess volatility and potential overbought or oversold conditions of a security. This indicator combines the Exponential Moving Average (EMA) and the Average True Range (ATR) to create a channel around the price of a security, helping traders identify trend directions and possible price breakouts.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval for data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize**: Number of data points to retrieve, ranging from 1 to 5000. Defaults to 30 if no date parameters are set.\n- **start_date** and **end_date**: Define the date range for the data. If specified, they consider the `timezone` parameter.\n- **time_period**: Number of periods for averaging, default is 20.\n- **atr_time_period**: Time period for calculating ATR, default is 10.\n- **multiplier**: Factor to adjust the indicator's sensitivity, default is 2.\n- **series_type**: The price type used for calculation, such as `close`, `open`, etc.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of data points, each containing the datetime, and the upper, middle, and lower lines of the Keltner Channel.\n- **status**: Indicates the success of the request, typically \"ok\".\n\n### Example Questions:\n1. \"How can I analyze the Keltner Channel for Apple's stock on a 5-minute interval?\"\n2. \"What are the Keltner Channel values for EUR/USD over the last week?\"\n3. \"Can I get the Keltner Channel data for Bitcoin using a 1-hour interval?\"",
  "GetKeyExecutives": "The `/key_executives` endpoint is designed to provide information about the key executives of a specified company. To retrieve this data, you must provide the company's symbol ticker as a query parameter. This is a required input, and it should be formatted correctly, especially for preferred stocks (e.g., `BRK.A` or `BRK.B`). Additionally, you can filter the request using other identifiers such as FIGI, ISIN, or CUSIP, although these are optional.\n\nUpon a successful request, the endpoint returns a JSON object containing two main parts: meta information about the company and a list of key executives. The meta information includes details like the company's name, the currency in which the instrument is denominated, and the exchange where it is traded. The key executives section provides a list of executives with details such as their full name, job title, age, year of birth, and total salary if available.\n\nThis endpoint is useful for queries such as:\n- \"Who are the key executives of Apple Inc.?\"\n- \"What is the job title and salary of the CEO of a specific company?\"\n- \"Can I get the list of executives for a company using its ISIN?\"",
  "GetTimeSeriesKst": "The `/kst` endpoint provides the Know Sure Thing (KST) indicator, a momentum oscillator used in technical analysis to identify potential trend reversals and trading opportunities. It combines multiple smoothed rates of change into a single trend-following indicator.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for data points, such as `1min`, `1day`, or `1week`.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000.\n- **start_date and end_date:** Specify the date range for the data.\n- **timezone:** Determines the timezone for the output datetime, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n- **roc_period_1 to roc_period_4:** Time periods for the Rate of Change calculations.\n- **sma_period_1 to sma_period_4:** Time periods for the Simple Moving Average calculations.\n- **signal_period:** Time period for generating the signal line.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of data points, each with a timestamp, KST value, and KST signal value.\n- **status:** The response status, typically \"ok\" if successful.\n\n### Example Questions:\n1. How can I determine if Apple Inc. is overbought or oversold using the KST indicator?\n2. What are the KST values for EUR/USD on a 1-hour interval over the last month?\n3. Can I get the KST signal for Bitcoin against Ethereum with a 15-minute interval?",
  "GetLastChanges": "The `/last_change/{endpoint}` API endpoint provides the latest updates to various types of fundamental data, allowing users to efficiently manage API credits by only requesting new data when it has been updated. This endpoint is particularly useful for applications that need to keep track of changes in financial data without constantly polling for updates.\n\n### Key Input Parameters:\n- **Endpoint (path parameter):** This required parameter specifies the type of data you are interested in, such as \"price_target,\" \"recommendations,\" \"statistics,\" etc.\n- **start_date (query parameter):** Optional; specifies the starting date and time for selecting data, formatted as `YYYY-MM-DD HH:MM:SS`.\n- **symbol (query parameter):** Optional; allows filtering by a specific company's ticker symbol.\n- **exchange (query parameter):** Optional; filters results by exchange name.\n- **mic_code (query parameter):** Optional; filters by Market Identifier Code (MIC) according to the ISO 10383 standard.\n- **country (query parameter):** Optional; filters by country name or alpha code.\n- **page (query parameter):** Optional; specifies the page number for paginated results, defaulting to 1.\n- **outputsize (query parameter):** Optional; determines the number of records returned per page, defaulting to 30.\n\n### Response:\nThe endpoint returns a JSON array of objects, each containing:\n- **symbol:** The ticker of the company.\n- **mic_code:** The Market Identifier Code.\n- **last_change:** The date and time of the last update, in `YYYY-MM-DD HH:MM:SS` format.\n\n### Usage Context:\nThis endpoint is ideal for developers who need to monitor updates to specific financial data types and want to optimize their data requests based on when changes occur.\n\n### Example Questions:\n- \"When was the last update for Apple's price target data?\"\n- \"What are the latest changes in insider transactions for companies listed on NASDAQ?\"\n- \"Can I get the most recent updates to the balance sheet data for a specific country?\"",
  "GetTimeSeriesLinearReg": "The `/linearreg` endpoint provides the Linear Regression (LINEARREG) indicator for a specified financial instrument. This indicator calculates the best-fit straight line through a series of data points, which helps traders identify trends and potential support or resistance levels in the market.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval between data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the time range for the data. If provided, these dates are considered in conjunction with the `timezone` parameter.\n- **series_type:** The price type on which the indicator is calculated, such as `close`, `open`, `high`, `low`, or `volume`.\n- **time_period:** The number of periods over which to average, ranging from 1 to 800, with a default of 9.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and indicator details.\n- **values:** An array of time series data points, each with a datetime and the calculated linear regression value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"How can I get the linear regression trend for Apple stock over the last month?\"\n2. \"What is the linear regression value for EUR/USD on a 5-minute interval?\"\n3. \"Can I retrieve the linear regression indicator for Bitcoin with a daily interval?\"",
  "GetTimeSeriesLinearRegAngle": "The `/linearregangle` endpoint provides the Linear Regression Angle (LINEARREGANGLE) for a specified financial instrument. This angle measures the slope and direction of the linear regression line, which helps in identifying the trend of the instrument's price over time.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval between data points, options include `1min`, `5min`, `1day`, etc.\n- **outputsize**: Number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date** and **end_date**: Define the time range for the data retrieval.\n- **series_type**: The price type (e.g., `close`, `open`) on which the indicator is calculated.\n- **time_period**: Number of periods to average over, with a default of 9.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of data points, each with a timestamp and the calculated linear regression angle.\n- **status**: The status of the response, typically \"ok\".\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to understand the trend direction of a stock, currency pair, or other financial instruments over a specified period. It can be used to make informed trading decisions based on the slope of the price trend.\n\n### Example Questions:\n1. \"What is the trend direction of Apple's stock over the last month?\"\n2. \"How has the linear regression angle for EUR/USD changed over the past week?\"\n3. \"Can I get the slope of the trend for Bitcoin in 15-minute intervals?\"",
  "GetTimeSeriesLinearRegIntercept": "The `/linearregintercept` endpoint provides the Linear Regression Intercept for a specified financial instrument. This intercept represents the point where the linear regression line intersects the vertical axis, which is useful for trend analysis in financial data.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval between data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Specify the date range for the data. If provided, they determine the timeframe for the data points.\n- **series_type:** The price type on which the indicator is calculated, such as `close`, `open`, `high`, etc.\n- **time_period:** The number of periods over which the average is calculated, defaulting to 9.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and other metadata.\n- **values:** An array of data points, each with a timestamp and the corresponding Linear Regression Intercept value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for traders and analysts looking to understand the trend direction of a financial instrument over a specified period. It can be used to assess whether a stock or currency pair is likely to continue its current trend or reverse.\n\n### Example Questions:\n1. \"What is the linear regression intercept for Apple stock over the past week?\"\n2. \"How does the linear regression intercept of EUR/USD change on a 1-hour interval?\"\n3. \"Can I get the linear regression intercept for Bitcoin using daily data?\"",
  "GetTimeSeriesLinearRegSlope": "The `/linearregslope` endpoint provides the Linear Regression Slope for a specified financial instrument, which measures the steepness of the linear regression line and indicates the rate of change of the underlying trend. This endpoint is useful for analyzing the trend direction and strength of a financial instrument over a specified time period.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the financial instrument, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval between data points, such as `1min`, `1day`, or `1month`.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date** and **end_date**: Define the time range for the data. Dates can be specified in formats like `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`.\n- **series_type**: The price type on which the indicator is calculated, such as `close`, `open`, `high`, or `low`.\n- **time_period**: The number of periods over which to calculate the average, with a default of 9.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: Information about the request, including the symbol, interval, and other metadata.\n- **values**: An array of time series data points, each with a datetime and the calculated Linear Regression Slope value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for traders and analysts looking to understand the trend dynamics of a financial instrument. It can help in identifying potential buy or sell signals based on the slope of the trend line.\n\n### Example Questions:\n1. \"What is the trend slope for Apple stock over the last month?\"\n2. \"How steep is the linear regression line for EUR/USD on a 5-minute interval?\"\n3. \"Can I get the rate of change for Bitcoin over the past week using the closing prices?\"",
  "GetTimeSeriesLn": "The `/ln` endpoint is designed to calculate the natural logarithm of a given financial instrument's price data over a specified time series. This is particularly useful for advanced mathematical analysis and financial market calculations.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between data points, options include `1min`, `5min`, `1h`, `1day`, etc.\n- **outputsize:** Specifies the number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the time range for the data retrieval.\n- **series_type:** Determines the price type for the calculation, such as `close`, `open`, `high`, `low`, or `volume`.\n\n### What It Returns:\nThe endpoint returns a JSON object containing:\n- **Meta Information:** Includes details about the request such as the symbol, interval, and exchange information.\n- **Values:** An array of data points, each with a timestamp and the calculated natural logarithm value.\n- **Status:** Indicates the success of the request.\n\n### Example Questions:\n1. \"How can I get the natural logarithm of Apple's stock price every minute for the past day?\"\n2. \"What is the natural logarithm of the closing prices for EUR/USD over the last week?\"\n3. \"Can I retrieve the natural logarithm of Bitcoin's price data at 15-minute intervals?\"",
  "GetTimeSeriesLog10": "The `/log10` endpoint is designed to calculate the base-10 logarithm (LOG10) of financial instrument data, which is useful for advanced mathematical analysis or financial market calculations. This endpoint requires a `symbol` parameter to specify the financial instrument, such as a stock ticker (e.g., `AAPL`), and an `interval` parameter to define the time gap between data points (e.g., `1min`, `1day`). Optional parameters include identifiers like `isin`, `figi`, and `cusip`, as well as filters for exchange, country, and asset class.\n\nThe endpoint returns a JSON response containing metadata about the request, such as the symbol, interval, and exchange information, along with time series data points. Each data point includes a timestamp and the calculated LOG10 value.\n\nExample questions that this endpoint could answer include:\n- \"What is the base-10 logarithm of Apple's stock price over the last week?\"\n- \"Can I see the LOG10 values for the EUR/USD currency pair at 15-minute intervals?\"\n- \"How does the LOG10 of Bitcoin's price change over a day?\"",
  "GetLogo": "The `/logo` endpoint provides the logo of a company, cryptocurrency, or forex pair based on the specified instrument. To use this endpoint, you must provide the `symbol` parameter, which is the ticker symbol of the instrument, such as \"AAPL\" for Apple Inc. Optionally, you can include parameters like `exchange`, `mic_code`, and `country` to further specify the instrument's trading details.\n\nWhen you query this endpoint, it returns a JSON object containing meta information about the instrument, such as its name, the currency in which it is traded, and the exchange details. For stocks, it provides a URL to download the company's logo. For forex and cryptocurrency pairs, it provides URLs for the logos of the base and quote currencies.\n\nThis endpoint is useful for obtaining visual branding assets for financial instruments, which can be used in financial applications or reports.\n\nExample questions this endpoint can answer:\n- \"How can I get the logo for Tesla?\"\n- \"What is the logo URL for the EUR/USD forex pair?\"\n- \"Can I find the logo for a cryptocurrency using its ticker symbol?\"",
  "GetTimeSeriesMa": "The `/ma` endpoint is designed to provide the Moving Average (MA) of a specified financial instrument. This endpoint is useful for traders and analysts looking to smooth out price data to identify trends and potential support or resistance levels.\n\n### Key Input Parameters:\n- **symbol**: This is the ticker symbol of the financial instrument you are interested in, such as `AAPL` for Apple Inc. This parameter is required.\n- **interval**: Specifies the time interval for the data points, such as `1min`, `1day`, or `1month`. This is also a required parameter.\n- **time_period**: Defines the number of periods over which the average is calculated, ranging from 1 to 800.\n- **ma_type**: Specifies the type of moving average to use, such as Simple Moving Average (SMA) or Exponential Moving Average (EMA).\n- **series_type**: Indicates the price type to calculate the MA on, such as `close`, `open`, `high`, `low`, or `volume`.\n\n### Optional Parameters:\n- **outputsize**: Limits the number of data points returned, with a default of 30.\n- **start_date** and **end_date**: Define the date range for the data.\n- **exchange**, **mic_code**, **country**, **type**: Additional filters to specify the exchange, market identifier, country, and asset class.\n- **timezone**: Determines the timezone for the output datetime.\n- **format**: Specifies the response format, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a datetime and the corresponding MA value.\n- **status**: Indicates the success of the request.\n\n### Example Questions:\n1. \"What is the 10-day moving average for Apple stock using the closing prices?\"\n2. \"Can I get the moving average for EUR/USD on a 5-minute interval?\"\n3. \"How does the moving average for Bitcoin change over a month using a 20-period EMA?\"",
  "GetTimeSeriesMacd": "The `/macd` endpoint provides the Moving Average Convergence Divergence (MACD) indicator for a specified financial instrument. MACD is a momentum indicator used to identify potential trend reversals and trading opportunities by measuring the difference between two moving averages and using a signal line.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval between data points (e.g., `1min`, `1day`).\n- **fast_period, slow_period, signal_period:** These define the periods for the fast and slow moving averages and the signal line, respectively.\n- **start_date and end_date:** Specify the date range for the data.\n- **outputsize:** Number of data points to retrieve, with a default of 30.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with:\n  - `datetime`: The timestamp for the data point.\n  - `macd`: The MACD value.\n  - `macd_signal`: The MACD signal line value.\n  - `macd_hist`: The MACD histogram value.\n\n### Example Questions:\n1. \"What is the MACD for Apple stock over the past month?\"\n2. \"Can I get the MACD indicator for EUR/USD on a 5-minute interval?\"\n3. \"How does the MACD for Bitcoin look over the last week?\"",
  "GetTimeSeriesMacdSlope": "The `/macd_slope` endpoint provides the rate of change of the MACD (Moving Average Convergence Divergence) line for a specified financial instrument. This helps traders identify the acceleration or deceleration of momentum in the price of a security.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL` for Apple Inc.).\n- **interval (required):** The time interval between data points, such as `1min`, `5min`, `1h`, etc.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000.\n- **start_date and end_date:** Define the date range for the data. If not specified, the default is the most recent data.\n- **series_type:** The price type used for calculation, defaulting to `close`.\n- **fast_period, slow_period, signal_period:** Define the periods for the MACD calculation, with defaults of 12, 26, and 9, respectively.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, such as the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each including:\n  - `datetime`: The timestamp of the data point.\n  - `macd_slope`: The slope of the MACD line.\n  - `macd_signal_slope`: The slope of the MACD signal line.\n  - `macd_hist_slope`: The slope of the MACD histogram.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who want to assess the momentum changes in a security's price over time. It can be particularly beneficial for identifying potential buy or sell signals based on the MACD slope.\n\n### Example Questions:\n1. \"What is the current MACD slope for Apple stock on a 1-minute interval?\"\n2. \"How has the MACD slope for EUR/USD changed over the past week?\"\n3. \"Can I get the MACD slope for Bitcoin with a 5-minute interval?\"",
  "GetTimeSeriesMacdExt": "The `/macdext` endpoint provides a customizable version of the Moving Average Convergence Divergence (MACD) indicator, known as MACDEXT. This endpoint allows traders to specify different types of moving averages and parameters to tailor the MACD calculation to their needs.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the financial instrument (e.g., `AAPL`, `EUR/USD`). This is a required parameter.\n- **interval**: The time interval for the data points (e.g., `1min`, `1day`). This is also required.\n- **fast_period, slow_period, signal_period**: These parameters define the periods for the fast, slow, and signal moving averages, respectively, allowing for detailed customization.\n- **fast_ma_type, slow_ma_type, signal_ma_type**: Specify the type of moving average (e.g., `SMA`, `EMA`) used for each period.\n- **outputsize**: Determines the number of data points returned, with a default of 30 if no date parameters are set.\n- **start_date, end_date**: Define the date range for the data retrieval.\n- **timezone**: Specifies the timezone for the output datetime.\n- **format**: The format of the response data, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of data points, each with a timestamp and the calculated MACD, MACD signal line, and MACD histogram values.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to apply the MACD indicator with specific configurations to assess market trends and make informed trading decisions.\n\n### Example Questions:\n1. How can I get the MACD values for Apple stock using a 1-hour interval?\n2. What are the MACD histogram values for EUR/USD over the past week?\n3. Can I customize the MACD calculation for Bitcoin using an exponential moving average?",
  "GetTimeSeriesMama": "The `/mama` endpoint provides the MESA Adaptive Moving Average (MAMA) for a specified financial instrument. MAMA is a technical indicator that adjusts to market cycles, balancing responsiveness and noise reduction. This endpoint is useful for traders and analysts who want to incorporate adaptive moving averages into their trading strategies.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple or `EUR/USD` for a currency pair.\n- **interval (required):** The time interval for the data points, such as `1min`, `5min`, `1h`, or `1day`.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30 if no date parameters are set.\n- **start_date and end_date:** Specify the date range for the data. If provided, these dates are considered in conjunction with the `timezone` parameter.\n- **series_type:** The price type used for the calculation, such as `close`, `open`, `high`, `low`, or `volume`.\n- **fast_limit and slow_limit:** Parameters to define the limits for the fast and slow moving averages, respectively.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with a datetime, MAMA value, and FAMA value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"How can I get the MESA Adaptive Moving Average for Apple stock on a 1-minute interval?\"\n2. \"What are the MAMA and FAMA values for the EUR/USD currency pair over the past week?\"\n3. \"Can I retrieve the MAMA indicator for Bitcoin with a daily interval?\"",
  "GetMarketCap": "The `/market_cap` endpoint provides historical market capitalization data for a specific financial instrument. To retrieve this data, you must specify at least one identifier for the instrument, such as the symbol, FIGI, ISIN, or CUSIP. You can further refine your query by specifying the exchange name, MIC code, or country. Additionally, you can set a date range using `start_date` and `end_date` to filter the market capitalization history within a specific period. Pagination is supported through the `page` and `outputsize` parameters, allowing you to control the number of records returned per request.\n\nUpon a successful request, the endpoint returns a JSON object containing metadata about the company, such as its symbol, name, currency, exchange, and MIC code, along with an array of market capitalization values. Each entry in this array includes the date and the corresponding market capitalization value.\n\nThis endpoint can answer questions such as:\n- \"What was the market capitalization of Apple Inc. over the past year?\"\n- \"How has the market cap of a company with CUSIP 594918104 changed over time?\"\n- \"Can I see the market capitalization history for a company listed on NASDAQ?\"",
  "GetMarketMovers": "The \"Market Movers\" endpoint provides a list of the top gaining or losing financial instruments for a specified market category, such as stocks, ETFs, mutual funds, forex, or cryptocurrencies. The endpoint helps users identify which instruments have experienced the most significant price changes since the previous day's close.\n\n### Key Input Parameters:\n- **market (path parameter):** Specifies the type of market to query, such as \"stocks\", \"etf\", \"mutual_funds\", \"forex\", or \"crypto\". This parameter is required.\n- **direction (query parameter):** Determines whether to retrieve the top \"gainers\" or \"losers\". Defaults to \"gainers\".\n- **outputsize (query parameter):** Defines the number of results to return, ranging from 1 to 50, with a default of 30.\n- **country (query parameter):** Applicable to non-currency markets, this specifies the country of interest using either the country name or alpha code. Defaults to \"USA\".\n- **price_greater_than (query parameter):** Filters results to include only those with a price greater than a specified value.\n- **dp (query parameter):** Sets the number of decimal places for floating-point values, ranging from 0 to 11, with a default of 5.\n\n### Response:\nThe endpoint returns a JSON object containing a list of market movers. Each entry in the list includes details such as the symbol, name, exchange, last updated timestamp, latest price, highest and lowest prices of the day, trading volume, and the change in price and percentage since the previous day.\n\n### Usage Context:\nThis endpoint is useful for investors and analysts who want to quickly identify significant market movements within a specific category or region, allowing them to make informed trading decisions.\n\n### Example Questions:\n1. \"What are the top gaining stocks in the USA today?\"\n2. \"Which cryptocurrencies have lost the most value today?\"\n3. \"Can you show me the top 10 ETFs with the highest price increase?\"",
  "GetMarketState": "The `/market_state` endpoint provides information about the current state of stock exchanges. It allows users to check whether specific exchanges are open or closed, and provides details on the time remaining until they open or close. By default, it returns the state of all available exchanges, but users can filter the results by specifying parameters such as the exchange name, the Market Identifier Code (MIC), or the country where the exchange is located.\n\nKey input parameters include:\n- `exchange`: The name of the exchange (e.g., NYSE).\n- `code`: The MIC of the exchange (e.g., XNYS).\n- `country`: The country where the exchange is located, either by name or alpha code (e.g., United States).\n\nThe endpoint returns a list of exchanges with details such as:\n- The full name of the exchange.\n- The MIC code.\n- The country of the exchange.\n- Whether the market is currently open.\n- The time elapsed since the market opened.\n- The time remaining until the market opens or closes.\n\nThis endpoint is useful for users who need to track trading hours and market availability across different exchanges.\n\nExample questions this endpoint could answer:\n- \"Is the NYSE currently open?\"\n- \"How much time is left until the Tokyo Stock Exchange closes?\"\n- \"What are the trading hours for exchanges in the United States?\"",
  "GetTimeSeriesMaVp": "The `/mavp` endpoint provides data for the Moving Average Variable Period (MAVP), a type of moving average that dynamically adjusts its period based on an input data series. This endpoint is useful for analyzing financial instruments with a customizable smoothing function.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval for the data points, such as `1min`, `1day`, etc.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: Define the time range for the data. These can be specified with a timezone.\n- **ma_type**: The type of moving average to use, such as SMA (Simple Moving Average) or EMA (Exponential Moving Average).\n- **min_period** and **max_period**: Define the range of periods for the MAVP calculation.\n\n### Response:\nThe endpoint returns a JSON object containing metadata about the request, such as the symbol, interval, and exchange details, along with an array of data points. Each data point includes a timestamp and the corresponding MAVP value.\n\n### Usage Context:\nThis endpoint is particularly useful for traders and analysts who need to apply a flexible moving average to financial data, allowing them to adjust the smoothing period dynamically based on market conditions or other input data.\n\n### Example Questions:\n1. \"How can I get the variable period moving average for Apple stock on a 1-minute interval?\"\n2. \"What is the MAVP for EUR/USD over the past week using a simple moving average?\"\n3. \"Can I retrieve the MAVP data for a specific date range for Tesla using an exponential moving average?\"",
  "GetTimeSeriesMax": "The `/max` endpoint is designed to calculate the Maximum (MAX) indicator, which identifies the highest value in a data series over a specified period. This is often used to detect potential resistance levels or extreme price movements in financial markets.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval between data points, such as `1min`, `5min`, `1day`, etc.\n- **time_period:** The number of periods over which to calculate the maximum value, ranging from 1 to 800.\n- **series_type:** The price type used for calculation, such as `close`, `open`, `high`, or `low`.\n- **start_date and end_date:** Define the date range for the data retrieval.\n- **outputsize:** Number of data points to retrieve, with a default of 30 if no date is specified.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and indicator details.\n- **values:** An array of data points, each with a datetime and the maximum value for that period.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to identify the highest values in a financial instrument's price series over a specified timeframe, which can help in making informed trading decisions.\n\n### Example Questions:\n1. What was the highest closing price for Apple stock over the last month?\n2. Can you provide the maximum value of EUR/USD in 5-minute intervals for the past week?\n3. What is the highest price recorded for Bitcoin in the last 24 hours?",
  "GetTimeSeriesMaxIndex": "The `/maxindex` endpoint is designed to provide the index of the highest value in a data series for a specified financial instrument over a given period. This can help identify the timing of extreme price movements in the market.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between data points, such as `1min`, `1h`, or `1day`.\n- **outputsize:** The number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date and end_date:** Define the time range for the data. If provided, they should be in the format `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`.\n- **series_type:** The price type on which the technical indicator is calculated, such as `close`, `open`, `high`, `low`, or `volume`.\n- **time_period:** The number of periods over which to calculate the average, ranging from 1 to 800.\n\n### What the Endpoint Returns:\nThe response includes metadata about the request, such as the symbol, interval, and exchange information, and an array of time series data points. Each data point includes:\n- **datetime:** The time when the data point was recorded.\n- **maxidx:** The index of the highest value within the specified period.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to determine when a stock or other financial instrument reached its peak value within a given timeframe. It can be used to analyze market trends and make informed trading decisions.\n\n### Example Questions:\n1. \"When did Apple Inc. (AAPL) reach its highest price in the last month?\"\n2. \"What is the index of the highest value for EUR/USD in the past week with a 1-hour interval?\"\n3. \"Can I find the peak trading time for Bitcoin (BTC) over the last 24 hours?\"",
  "GetTimeSeriesMcGinleyDynamic": "The `/mcginley_dynamic` endpoint provides access to the McGinley Dynamic indicator, a tool designed to smooth out price data and minimize lag in relation to price action. This indicator adjusts its speed based on the volatility of the security, offering a more accurate depiction of price trends and potential support or resistance levels than traditional moving averages.\n\nTo use this endpoint, you must specify the `symbol` parameter, which is the ticker of the instrument you are interested in, such as `AAPL` for Apple or `EUR/USD` for the Euro to US Dollar exchange rate. Additionally, you need to define the `interval` parameter, which determines the time gap between data points, with options ranging from `1min` to `1month`.\n\nThe endpoint can also accept other parameters like `outputsize` to specify the number of data points returned, `start_date` and `end_date` to filter data within a specific time range, and `timezone` to adjust the time zone of the output data. You can also choose the format of the response, either `JSON` or `CSV`.\n\nThe response includes metadata about the request and an array of time series data points, each containing a timestamp and the corresponding McGinley Dynamic value.\n\nHere are some example questions this endpoint could answer:\n- \"What is the McGinley Dynamic value for Apple stock on a 1-minute interval?\"\n- \"How does the McGinley Dynamic indicator for EUR/USD compare over the past week?\"\n- \"Can I get the McGinley Dynamic indicator for Bitcoin with a 15-minute interval?\"",
  "GetTimeSeriesMedPrice": "The `/medprice` endpoint provides the Median Price (MEDPRICE) indicator for a specified financial instrument. This indicator calculates the midpoint between the high and low prices of a security, offering a simplified view of its price action over time.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This is a required parameter to specify which instrument's data you want.\n- **interval**: The time interval between data points (e.g., `1min`, `1day`). This is required to determine the frequency of the data.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000. Defaults to 30 if no date parameters are set.\n- **start_date** and **end_date**: Specify the date range for the data. These parameters consider the specified timezone.\n- **timezone**: Determines the timezone for the output datetime, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n- **format**: The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a `datetime` and `medprice` value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to quickly assess the median price movement of a security over a specified period. It supports various financial instruments, including stocks, forex, and cryptocurrencies.\n\n### Example Questions:\n1. \"What is the median price of Apple stock every minute for the past hour?\"\n2. \"Can I get the median price data for EUR/USD for the last week?\"\n3. \"How does the median price of Bitcoin compare over different intervals?\"",
  "GetTimeSeriesMfi": "The `/mfi` endpoint provides the Money Flow Index (MFI), a technical indicator used by traders to assess buying and selling pressure by comparing positive and negative money flow. This endpoint is particularly useful for identifying overbought or oversold conditions in a financial instrument.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument you are interested in, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between data points, options include `1min`, `5min`, `1day`, etc.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the time range for the data. If not specified, the endpoint defaults to the most recent data.\n- **exchange, mic_code, country, type:** Optional filters to specify the trading location or type of asset.\n- **format:** The response format, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, such as the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with a datetime and the corresponding MFI value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to incorporate the MFI into their trading strategies, particularly for identifying potential reversal points in the market.\n\n### Example Questions:\n1. \"What is the Money Flow Index for Apple stock over the past week at a daily interval?\"\n2. \"Can I get the MFI for EUR/USD for the last month with 1-hour intervals?\"\n3. \"How can I determine if Bitcoin is overbought using the MFI indicator?\"",
  "GetTimeSeriesMidPoint": "The `/midpoint` endpoint provides the midpoint value of a specified financial instrument over a given time period. This is useful for smoothing out data fluctuations and identifying trends in the data series.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the financial instrument (e.g., `AAPL`, `EUR/USD`). This is required to specify which instrument's data you want.\n- **interval**: The time interval between data points (e.g., `1min`, `1day`). This is required to define the granularity of the data.\n- **time_period**: The number of periods over which to calculate the midpoint. It defaults to 9 if not specified.\n- **series_type**: The price type on which the indicator is calculated, such as `close`, `open`, `high`, or `low`.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date** and **end_date**: Define the time range for the data retrieval. These can be used with the `timezone` parameter to specify the exact time zone context.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and technical indicator details.\n- **values**: An array of data points, each with a `datetime` and the calculated `midpoint` value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for traders and analysts who need to analyze the midpoint of price movements over time to make informed trading decisions.\n\n### Example Questions:\n1. \"What is the midpoint value for Apple stock over the last 30 minutes?\"\n2. \"Can I get the midpoint for EUR/USD for the past week?\"\n3. \"How do I calculate the midpoint for Bitcoin using a 15-minute interval?\"",
  "GetTimeSeriesMidPrice": "The `/midprice` endpoint provides the Midprice (MIDPRICE) indicator for a specified financial instrument. This indicator calculates the average of the high and low prices over a given period, offering insights into potential support or resistance levels in the price action.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This is a required parameter.\n- **interval**: Specifies the time interval between data points, such as `1min`, `1day`, or `1month`. This is also required.\n- **time_period**: The number of periods over which the average is calculated, ranging from 1 to 800. Default is 9.\n- **outputsize**: The number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: Define the date range for the data.\n- **format**: The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: Information about the request, such as the symbol, interval, and exchange details.\n- **values**: An array of data points, each with a timestamp and the calculated midprice.\n- **status**: Indicates the success of the request.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to assess price trends and identify potential support or resistance levels in the market. It supports a wide range of financial instruments, including stocks, forex, and cryptocurrencies.\n\n### Example Questions:\n1. \"What is the average midprice for Apple stock over the last 10 days?\"\n2. \"Can I get the midprice data for EUR/USD at 5-minute intervals?\"\n3. \"How does the midprice of Bitcoin compare over the past month?\"",
  "GetTimeSeriesMin": "The `/min` endpoint is designed to calculate the minimum value of a specified data series over a given period. This is often used to identify potential support levels or extreme price movements in financial instruments. To use this endpoint, you must provide a `symbol` representing the instrument (e.g., `AAPL`, `EUR/USD`) and an `interval` to specify the time gap between data points (e.g., `1min`, `1day`). \n\nOptional parameters include identifiers like `isin`, `figi`, and `cusip` for more precise instrument targeting, as well as `start_date` and `end_date` to define the time range for the data. The `outputsize` parameter controls the number of data points returned, and the `series_type` specifies the price type (e.g., `close`, `open`) on which the indicator is calculated. The response includes metadata about the request and an array of time series data points, each with a timestamp and the minimum value for that period.\n\nThis endpoint is useful for questions such as:\n- \"What is the lowest price of Apple stock over the last week?\"\n- \"Can I get the minimum value of EUR/USD for each day in the past month?\"\n- \"What was the lowest trading price of Bitcoin over the last 24 hours?\"",
  "GetTimeSeriesMinIndex": "The `/minindex` endpoint is designed to return the index of the lowest value in a data series for a specified financial instrument over a given period. This is useful for identifying the timing of extreme price movements in the market.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between data points, options include `1min`, `5min`, `1h`, `1day`, etc.\n- **outputsize:** Specifies the number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the time range for the data retrieval.\n- **series_type:** The price type on which the technical indicator is calculated, such as `close`, `open`, `high`, `low`, or `volume`.\n- **time_period:** The number of periods over which to calculate the average, with a default of 9.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of data points, each with a `datetime` and the `minidx`, which is the index of the lowest value over the specified period.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for traders and analysts looking to pinpoint the exact time of minimum price occurrences in a series, which can be critical for making informed trading decisions.\n\n### Example Questions:\n1. \"What was the lowest point for Apple stock in the last week?\"\n2. \"Can you show me the index of the lowest value for EUR/USD over the past month?\"\n3. \"When did the lowest price occur for Bitcoin in the last 24 hours?\"",
  "GetTimeSeriesMinMax": "The `/minmax` endpoint provides the minimum and maximum values of a financial instrument over a specified period, which is useful for identifying potential support and resistance levels or extreme price movements. This endpoint is particularly beneficial for traders and analysts looking to understand the range of price fluctuations for a given asset.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between data points, options include `1min`, `5min`, `1h`, `1day`, etc.\n- **time_period:** The number of periods over which to calculate the min and max values, default is 9.\n- **start_date and end_date:** Specify the date range for the data retrieval.\n- **outputsize:** Number of data points to retrieve, with a default of 30 if no date is specified.\n- **series_type:** The price type for calculation, such as `close`, `open`, etc.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including symbol, interval, and exchange details.\n- **values:** An array of data points, each including the datetime, minimum, and maximum values for the specified period.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"What are the highest and lowest prices for Apple stock over the last week?\"\n2. \"Can I get the min and max values for EUR/USD on a 15-minute interval?\"\n3. \"How do the min and max values of Bitcoin compare over the past month?\"",
  "GetTimeSeriesMinMaxIndex": "The `/minmaxindex` endpoint provides the indices of the lowest and highest values in a data series for a specified financial instrument over a given period. This can help users identify the timing of extreme price movements for a stock, currency pair, or other financial instruments.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval for data points, such as `1min`, `1day`, or `1week`.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date** and **end_date**: Define the date range for the data. If specified, they will be used in conjunction with the `timezone` parameter.\n- **series_type**: The price type on which the technical indicator is calculated, like `close` or `open`.\n- **time_period**: The number of periods over which to calculate the average, ranging from 1 to 800.\n\n### Response:\nThe response includes metadata about the request, such as the symbol, interval, and exchange information. It also provides an array of data points, each containing the datetime, and the indices of the minimum and maximum values over the specified period.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to quickly identify when a financial instrument reached its lowest and highest points within a specific timeframe, aiding in technical analysis and decision-making.\n\n### Example Questions:\n1. \"When did Apple stock hit its lowest and highest prices last week?\"\n2. \"What are the indices of the highest and lowest values for EUR/USD over the past month?\"\n3. \"Can I get the time periods when Bitcoin reached its peak and trough in the last 24 hours?\"",
  "GetTimeSeriesMinusDI": "The `/minus_di` endpoint provides the Minus Directional Indicator (MINUS_DI) for a specified financial instrument. This indicator is part of the Average Directional Index (ADX) and measures the strength of a security's downward price movement. \n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for data points, such as `1min`, `1day`, etc.\n- **time_period:** The number of periods over which the indicator is averaged, defaulting to 9.\n- **start_date and end_date:** Specify the date range for the data.\n- **outputsize:** Number of data points to retrieve, with a default of 30 if no date is specified.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta Information:** Includes details like the symbol, interval, currency, and exchange information.\n- **Values:** An array of time series data points, each with a timestamp and the corresponding MINUS_DI value.\n- **Status:** Indicates the success of the request.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to assess the strength of a downward trend in a security's price over a specified period.\n\n### Example Questions:\n1. \"What is the Minus Directional Indicator for Apple stock over the last week?\"\n2. \"How has the downward price movement of EUR/USD changed in the past 24 hours?\"\n3. \"Can I get the MINUS_DI values for Bitcoin on a 5-minute interval?\"",
  "GetTimeSeriesMinusDM": "The `/minus_dm` endpoint provides the Minus Directional Movement (MINUS_DM) data, which is a component of the Average Directional Index (ADX) indicator. This metric measures the extent of a security's downward price movement over a specified period.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument for which you want the data, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval between data points, options include `1min`, `5min`, `1day`, etc.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: Specify the date range for the data retrieval. If provided, they will be used in conjunction with the `timezone` parameter.\n- **timezone**: Determines the timezone for the output datetime, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n- **format**: The format of the response data, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a datetime and the corresponding MINUS_DM value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who want to analyze the downward movement trends of a security over time. It can be used to inform trading strategies or to complement other technical analysis tools.\n\n### Example Questions:\n1. \"What is the recent downward price movement for Apple stock on a minute-by-minute basis?\"\n2. \"Can I get the Minus Directional Movement for EUR/USD over the past week?\"\n3. \"How has the downward movement of Bitcoin changed over the last month?\"",
  "GetTimeSeriesMom": "The `/mom` endpoint provides the Momentum (MOM) indicator for a specified financial instrument, which measures the rate of change of the instrument's price over a given period. This indicator helps traders identify potential price trends and reversals.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval between data points, options include `1min`, `5min`, `1day`, etc.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date** and **end_date**: Define the time range for the data.\n- **timezone**: Specifies the timezone for the output datetime.\n- **series_type**: The price type used for the calculation, such as `close`, `open`, `high`, or `low`.\n- **time_period**: The number of periods over which to calculate the indicator, ranging from 1 to 800.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of data points, each with a datetime and the corresponding MOM value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to assess the momentum of a security over a specified period, which can be critical for making informed trading decisions.\n\n### Example Questions:\n1. \"What is the momentum indicator for Apple stock over the last 30 minutes?\"\n2. \"Can I get the momentum values for EUR/USD on a daily basis?\"\n3. \"How has the momentum of Bitcoin changed over the past week?\"",
  "GetTimeSeriesMult": "The `/mult` endpoint is designed to perform arithmetic multiplication of two input data series, often used to combine or normalize multiple technical indicators or price data for a given financial instrument. This endpoint is particularly useful for traders or analysts looking to analyze the relationship between different price types (like open and close prices) over time.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument (e.g., `AAPL` for Apple Inc.).\n- **interval (required):** The time interval for the data points, such as `1min`, `5min`, `1day`, etc.\n- **series_type_1 & series_type_2:** Specify the types of price data to multiply, such as `open`, `close`, `high`, `low`, or `volume`.\n- **outputsize:** The number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date & end_date:** Define the date range for the data.\n- **timezone:** Determines the timezone for the output datetime, defaulting to the exchange's local time.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and indicator details.\n- **values:** An array of time series data points, each with a `datetime` and the calculated `mult` value.\n- **status:** Indicates the success of the response, typically \"ok\".\n\n### Example Questions:\n1. How can I calculate the product of the open and close prices for Apple stock over the past week?\n2. What is the multiplication of high and low prices for EUR/USD over a 1-hour interval?\n3. Can I get the multiplied values of volume and close prices for Bitcoin in a CSV format?",
  "GetMutualFundsFamily": "The `/mutual_funds/family` endpoint provides a list of mutual fund families, which are groups of funds managed by the same investment company. You can filter the results by specifying the name of a particular fund family or by the country where the fund is managed. This allows users to narrow down the list to specific investment companies or geographical regions.\n\nWhen you make a request to this endpoint, it returns a JSON object containing a \"result\" field, which is an object mapping country names to arrays of fund family names. Additionally, a \"status\" field indicates the success of the request, typically returning \"ok\" if the operation was successful.\n\nThis endpoint is useful for financial analysts, investors, or anyone interested in exploring or comparing mutual fund families based on geographic location or specific investment companies.\n\nExample questions this endpoint could answer include:\n- \"What mutual fund families are available in the United States?\"\n- \"Which investment companies manage mutual funds in India?\"\n- \"Can you list the mutual fund families managed by a specific company in a given country?\"",
  "GetMutualFundsList": "The `/mutual_funds/list` endpoint provides a list of mutual funds available through Twelve Data, sorted in descending order by total assets value. This list is updated daily. The endpoint allows users to filter the results based on various parameters such as the fund's symbol, FIGI, ISIN, CUSIP, country, fund family, fund type, performance rating, and risk rating. Users can also specify pagination options with `page` and `outputsize` parameters to control the number of results returned.\n\nKey input parameters include:\n- `symbol`: Filters funds by their ticker symbol.\n- `figi`: Filters funds by their Financial Instrument Global Identifier.\n- `isin`: Filters funds by their International Securities Identification Number.\n- `cusip`: Filters funds by their CUSIP number.\n- `country`: Filters funds by the country of incorporation.\n- `fund_family`: Filters funds by the investment company managing them.\n- `fund_type`: Filters funds by their type.\n- `performance_rating`: Filters funds based on their performance rating from 0 to 5.\n- `risk_rating`: Filters funds based on their risk rating from 0 to 5.\n- `page`: Specifies the page number for pagination.\n- `outputsize`: Specifies the number of records to return per page.\n\nThe response includes a list of mutual funds with details such as the fund's symbol, name, country, fund family, type, performance and risk ratings, currency, exchange, and market identifier code (MIC).\n\nExample questions a user might ask that this endpoint could satisfy:\n- \"What are the mutual funds available in the United States managed by Jackson National?\"\n- \"Can you list mutual funds with a performance rating of 4 or higher?\"\n- \"Show me mutual funds of type 'Small Blend' with a low-risk rating.\"",
  "GetMutualFundsType": "The `/mutual_funds/type` endpoint is designed to provide a list of mutual fund types. It allows users to filter the results based on specific criteria such as the type of fund and the country associated with the fund. \n\nKey input parameters include:\n- `fund_type`: A string parameter that lets you filter the list by the type of mutual fund managed by an investment company.\n- `country`: A string parameter that allows filtering by the country name or its alpha code.\n\nWhen you make a request to this endpoint, it returns a JSON object containing a `result` field. This field is an object where each key is a country name, and the value is an array of mutual fund types available in that country. Additionally, the response includes a `status` field indicating the success of the request, typically returning \"ok\".\n\nThis endpoint is useful for users who want to explore different types of mutual funds available in specific countries or managed by specific types of investment companies.\n\nExample questions a user might have that this endpoint could answer:\n- \"What types of mutual funds are available in Singapore?\"\n- \"Can I get a list of mutual fund types managed by companies in the United States?\"\n- \"What are the different mutual fund types offered in a specific country?\"",
  "GetMutualFundsWorld": "This API endpoint provides comprehensive data about a specific mutual fund. By supplying the mutual fund's symbol ticker, you can retrieve detailed information including its summary, performance metrics, risk assessments, ratings, composition, purchase details, and sustainability scores.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the mutual fund you wish to query.\n- **figi**: An optional filter using the Financial Instrument Global Identifier.\n- **isin**: An optional filter using the International Securities Identification Number.\n- **cusip**: An optional filter using the Committee on Uniform Securities Identification Procedures number.\n- **country**: An optional filter to specify the country by name or alpha code.\n- **dp**: Specifies the number of decimal places for floating-point values, with a default of 5.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Summary**: Basic details like the fund's name, type, currency, and inception date.\n- **Performance**: Information on returns, both trailing and annual, and load-adjusted returns.\n- **Risk**: Volatility measures and valuation metrics.\n- **Ratings**: Performance, risk, and return ratings.\n- **Composition**: Breakdown of major market sectors, asset allocation, and top holdings.\n- **Purchase Info**: Details on expenses, minimum investments, pricing, and available brokerages.\n- **Sustainability**: ESG scores and sustainability-related information.\n\n### Example Questions:\n1. \"What is the performance and risk profile of the mutual fund with ticker XYZ?\"\n2. \"Can I get a detailed breakdown of the holdings and sustainability score for a specific mutual fund?\"\n3. \"What are the expense ratios and minimum investment requirements for the mutual fund ABC?\"",
  "GetMutualFundsWorldComposition": "The `/mutual_funds/world/composition` endpoint provides detailed information about the portfolio composition of a specified mutual fund. This includes data on sector allocations, asset allocations, top holdings, and bond breakdowns. To use this endpoint, you must provide the mutual fund's symbol ticker as a required parameter. Additional optional filters include FIGI, ISIN, CUSIP, and country, which can help narrow down the search to specific instruments or regions. You can also specify the number of decimal places for floating-point values, with a default of 5.\n\nUpon a successful request, the endpoint returns a JSON object detailing the mutual fund's composition. This includes major market sectors with their respective weights, asset allocation percentages (such as cash, stocks, bonds), a list of top holdings with their weights, and bond-specific details like average maturity and credit quality.\n\nThis endpoint is useful for investors or analysts looking to understand the distribution and risk profile of a mutual fund's investments.\n\n### Example Questions:\n1. What is the sector breakdown of the mutual fund with the symbol \"XYZ\"?\n2. How is the asset allocation structured for the mutual fund identified by the CUSIP \"594918104\"?\n3. Can you provide the top holdings of a mutual fund based in the United States?",
  "GetMutualFundsWorldPerformance": "The `/mutual_funds/world/performance` endpoint provides detailed performance metrics for a specified mutual fund. This includes trailing, annual, quarterly, and load-adjusted returns. To retrieve this data, you must provide the mutual fund's symbol ticker as a required parameter. Alternatively, you can filter the results using identifiers such as FIGI, ISIN, or CUSIP, or specify a country by name or alpha code. You can also adjust the precision of the returned floating-point values by specifying the number of decimal places, with a default of 5.\n\nUpon a successful request, the endpoint returns a JSON object containing various performance metrics of the mutual fund, such as trailing returns over different periods, annual and quarterly total returns, and load-adjusted returns. Each of these metrics includes detailed information such as the period, share class return, category return, and rank in category.\n\nThis endpoint is useful for investors or analysts looking to evaluate the historical performance of mutual funds across different time frames and categories.\n\nExample questions this endpoint could answer:\n- \"What are the trailing returns for the mutual fund with the symbol XYZ?\"\n- \"How did the mutual fund identified by ISIN ABC123 perform annually?\"\n- \"Can I see the quarterly returns of a mutual fund in the US for the past year?\"",
  "GetMutualFundsWorldPurchaseInfo": "The `/mutual_funds/world/purchase_info` endpoint provides detailed information about purchasing a specific mutual fund. It is designed to help users understand the financial requirements and options available for buying a mutual fund, including minimum investment amounts, pricing details, and the brokerages through which the fund can be purchased.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the mutual fund you want to inquire about. This is mandatory to identify the specific fund.\n- **figi, isin, cusip:** Optional identifiers that can be used to filter the mutual fund by its global or regional identification numbers.\n- **country:** An optional parameter to filter results by a specific country using its name or alpha code.\n- **dp:** Specifies the number of decimal places for floating-point values in the response, with a default of 5.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Purchase Info:** Includes details on expenses (gross and net expense ratios), minimum investment requirements (initial and additional investments, including for IRAs), and pricing information (such as net asset value, 12-month high/low, and last month's price).\n- **Brokerages:** A list of brokerages where the mutual fund can be purchased.\n- **Status:** Indicates the success of the request.\n\n### Usage Context:\nThis endpoint is useful for investors looking to gather comprehensive purchasing information about mutual funds, especially when considering different brokerages or comparing investment requirements.\n\n### Example Questions:\n- \"What are the minimum investment requirements for the mutual fund with symbol XYZ?\"\n- \"Which brokerages offer the mutual fund with CUSIP 594918104?\"\n- \"What is the current net asset value and expense ratio for the mutual fund identified by ISIN?\"",
  "GetMutualFundsWorldRatings": "The `/mutual_funds/world/ratings` endpoint provides ratings for a specified mutual fund. To use this endpoint, you must supply the mutual fund's symbol ticker as a required query parameter. Optionally, you can filter the results by using identifiers such as FIGI, ISIN, or CUSIP, or specify a country using its name or alpha code. Additionally, you can set the number of decimal places for floating values, with a default of 5 and a range from 0 to 11.\n\nThe endpoint returns a JSON object containing the mutual fund's ratings, which include performance, risk, and return ratings, each rated on a scale from 0 to 5. It also provides the status of the response.\n\nThis endpoint can be useful for:\n- Finding out how well a mutual fund is performing in terms of risk and returns.\n- Comparing the ratings of different mutual funds based on their identifiers.\n- Checking the ratings of mutual funds from a specific country.\n\nExample questions this endpoint can answer:\n- \"What are the performance and risk ratings for the mutual fund with symbol XYZ?\"\n- \"How does the mutual fund identified by ISIN ABC123 compare in terms of return rating?\"\n- \"Can I get the risk rating for a mutual fund in the US with CUSIP 123456789?\"",
  "GetMutualFundsWorldRisk": "This API endpoint provides detailed risk metrics for a specified mutual fund. It is designed to help investors assess the risk associated with investing in a particular mutual fund by returning core risk and valuation metrics.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the mutual fund you want to analyze.\n- **figi:** The Financial Instrument Global Identifier for filtering the mutual fund.\n- **isin:** The International Securities Identification Number for filtering the mutual fund.\n- **cusip:** The Committee on Uniform Securities Identification Procedures number for filtering.\n- **country:** The name or alpha code of the country to filter mutual funds by location.\n- **dp:** Specifies the number of decimal places for floating-point values, ranging from 0 to 11, with a default of 5.\n\n### What the Endpoint Returns:\nThe endpoint returns a JSON object containing:\n- **Volatility Measures:** Includes metrics like alpha, beta, mean annual return, R-squared, standard deviation, Sharpe ratio, and Treynor ratio, each compared against the fund's category averages.\n- **Valuation Metrics:** Provides data such as price-to-earnings, price-to-book, price-to-sales, price-to-cashflow, median market capitalization, and three-year earnings growth, along with their category averages.\n- **Status:** Indicates the success of the request with a status message.\n\n### Usage Context:\nThis endpoint is useful for investors or analysts looking to evaluate the risk profile of mutual funds across different markets and compare them with category averages.\n\n### Example Questions:\n- \"What are the risk metrics for the mutual fund with the symbol 'XYZ'?\"\n- \"How does the beta of a mutual fund compare to its category average?\"\n- \"What is the Sharpe ratio of a mutual fund based in the United States?\"",
  "GetMutualFundsWorldSummary": "The `/mutual_funds/world/summary` endpoint provides a brief summary of a specified mutual fund. To retrieve this information, you must provide the mutual fund's symbol ticker as a query parameter. Optionally, you can filter the results using identifiers such as FIGI, ISIN, or CUSIP, or specify a country by name or alpha code. You can also adjust the number of decimal places for floating-point values, with a default of 5.\n\nThe response includes key details about the mutual fund, such as its name, fund family, type, currency, share class inception date, year-to-date return, expense ratio, yield, net asset value (NAV), minimum investment, turnover rate, net assets, and an overview. Additionally, it lists the fund managers and their tenure.\n\nThis endpoint is useful for investors or analysts who need a quick overview of a mutual fund's characteristics and performance metrics.\n\nExample questions this endpoint could answer:\n- \"What is the summary of the mutual fund with the symbol XYZ?\"\n- \"Can you provide details about the JNL Small Cap Index Fund?\"\n- \"What are the key metrics for a mutual fund identified by its ISIN?\"",
  "GetMutualFundsWorldSustainability": "The `/mutual_funds/world/sustainability` endpoint provides information about the sustainability and ESG (Environmental, Social, and Governance) aspects of mutual funds. This endpoint is particularly useful for investors or analysts interested in understanding the sustainability profile of specific mutual funds.\n\n### Key Input Parameters:\n- **symbol**: This is a required parameter that specifies the ticker symbol of the mutual fund you want to inquire about.\n- **figi**: An optional parameter to filter results by the Financial Instrument Global Identifier.\n- **isin**: An optional parameter to filter by the International Securities Identification Number.\n- **cusip**: An optional parameter to filter by the CUSIP number of the financial instrument.\n- **country**: An optional parameter to filter results by the country name or its alpha code.\n- **dp**: An optional parameter that determines the number of decimal places for floating-point values, ranging from 0 to 11, with a default of 5.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **sustainability score**: An asset-weighted average ESG score for the mutual fund's holdings, ranging from 0 to 100.\n- **corporate ESG pillars**: Detailed scores for environmental, social, and governance aspects.\n- **sustainable investment**: A boolean indicating if the fund explicitly employs ESG principles in its investment selection.\n- **corporate AUM**: The percentage of assets under management used to calculate the sustainability score.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n- What is the sustainability score of a specific mutual fund based on its ticker symbol?\n- Does a particular mutual fund employ ESG principles in its investment selection process?\n- Can I get the ESG scores for the environmental, social, and governance aspects of a mutual fund?",
  "GetTimeSeriesNatr": "The `/natr` endpoint provides the Normalized Average True Range (NATR) for a specified financial instrument. NATR is a volatility indicator that represents the average range of price movement over a given period, expressed as a percentage of the security's price. This allows for volatility comparisons across different securities.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval for the data points (e.g., `1min`, `1day`).\n- **time_period:** The number of periods over which to average, defaulting to 14.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000, defaulting to 30.\n- **start_date and end_date:** Define the date range for the data.\n- **format:** Response format, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points with each entry containing a datetime and the corresponding NATR value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to assess the volatility of a security over time. It allows for detailed analysis by specifying different intervals and periods.\n\n### Example Questions:\n1. \"What is the NATR for Apple stock on a daily basis over the last month?\"\n2. \"How does the volatility of EUR/USD compare over 15-minute intervals?\"\n3. \"Can I get the NATR for Bitcoin against Ethereum for the past week?\"",
  "GetTimeSeriesObv": "The `/obv` endpoint provides the On Balance Volume (OBV) indicator for a specified financial instrument. OBV is a technical analysis tool that uses volume flow to predict changes in stock price. This endpoint is useful for traders looking to analyze buying and selling pressure to identify potential price trends and reversals.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval for the data points, with options like `1min`, `5min`, `1day`, etc.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date** and **end_date**: Specify the date range for the data. If provided, they will be used in conjunction with the `timezone` parameter.\n- **timezone**: Determines the timezone for the output datetime, defaulting to the local exchange time.\n- **series_type**: The price type on which the OBV is calculated, defaulting to `close`.\n\n### Response:\nThe response includes metadata about the request, such as the symbol, interval, and exchange details, along with an array of time series data points containing the datetime and corresponding OBV values.\n\n### Example Questions:\n1. \"What is the OBV for Apple stock on a 1-minute interval?\"\n2. \"Can I get the OBV data for EUR/USD for the past week?\"\n3. \"How does the OBV for Ethereum compare over the last month?\"",
  "GetTimeSeriesPercent_B": "The `/percent_b` endpoint provides the Percent B (%B) values, a component of the Bollinger Bands indicator, for a specified financial instrument. This indicator helps traders assess whether a security is overbought or oversold by measuring its price position relative to the Bollinger Bands.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument, such as `AAPL` or `EUR/USD`.\n- **interval** (required): The time interval for data points, options include `1min`, `5min`, `1h`, `1day`, etc.\n- **outputsize**: Number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date** and **end_date**: Define the date range for the data.\n- **series_type**: The price type used for calculation, such as `close` or `open`.\n- **time_period**: The number of periods for averaging, default is 9.\n- **sd**: The standard deviation for calculation, default is 2.\n- **ma_type**: The moving average type, default is `SMA`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and indicator details.\n- **values**: An array of data points, each with a timestamp and the corresponding Percent B value.\n- **status**: The status of the response, typically \"ok\".\n\n### Usage Context:\nThis endpoint is useful for traders and analysts seeking to evaluate market conditions for a specific security over a chosen time frame. It can help in making informed trading decisions based on the Bollinger Bands' analysis.\n\n### Example Questions:\n1. How can I find out if Apple stock is overbought or oversold using Bollinger Bands?\n2. What is the Percent B value for EUR/USD over the last week?\n3. Can I get the Bollinger Bands %B values for Bitcoin on a 15-minute interval?",
  "GetTimeSeriesPivotPointsHL": "The `/pivot_points_hl` endpoint provides calculations of the Pivot Points High Low (PIVOT_POINTS_HL) indicator for a specified financial instrument. This indicator helps identify potential support and resistance levels based on the highest high and lowest low prices over a given period, which traders can use to determine entry and exit points in the market.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for data points, with options ranging from `1min` to `1month`.\n- **outputsize:** Specifies the number of data points to retrieve, defaulting to 30 if no date parameters are set.\n- **start_date and end_date:** Define the date range for the data retrieval. These can be specified in various formats and are timezone-sensitive.\n- **exchange, mic_code, country, type:** Optional filters to specify the trading exchange, market identifier code, country, and asset class of the instrument.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, exchange details, and indicator specifics.\n- **values:** An array of time series data points, each with a timestamp and flags indicating whether the point is a high or low pivot point.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for traders and analysts looking to identify key price levels for trading strategies. It supports a wide range of financial instruments, including stocks, forex, and cryptocurrencies.\n\n### Example Questions:\n1. \"What are the pivot points for Apple stock on a 15-minute interval?\"\n2. \"Can I get the high and low pivot points for EUR/USD over the last week?\"\n3. \"How do I find the support and resistance levels for Bitcoin using daily intervals?\"",
  "GetTimeSeriesPlusDI": "The `/plus_di` endpoint provides the Plus Directional Indicator (PLUS_DI) for a specified financial instrument, which is part of the Average Directional Index (ADX) used to measure the strength of an upward price movement. This endpoint is useful for traders and analysts looking to assess the bullish strength of a security over time.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between data points, options include `1min`, `5min`, `15min`, `1h`, `1day`, etc.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Specify the date range for the data, formatted as `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`.\n- **timezone:** The timezone for the output datetime, defaulting to the exchange's local time.\n- **format:** The response format, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with a datetime and the PLUS_DI value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"What is the current Plus Directional Indicator for Apple stock on a 1-minute interval?\"\n2. \"Can I get the Plus Directional Indicator values for EUR/USD over the past week?\"\n3. \"How has the Plus Directional Indicator for Bitcoin changed over the last month?\"",
  "GetTimeSeriesPlusDM": "The `/plus_dm` endpoint provides data on the Plus Directional Movement (PLUS_DM), a component of the ADX indicator that measures the extent of a security's upward price movement. This endpoint is useful for traders and analysts looking to evaluate the strength of a security's upward trend over a specified period.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval between data points, such as `1min`, `1h`, or `1day`.\n- **outputsize:** Number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date and end_date:** Specify the date range for which data is requested.\n- **timezone:** Determines the timezone for the output datetime, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n- **format:** The format of the response data, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with a datetime and the corresponding PLUS_DM value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for financial analysts and traders who need to assess the upward movement of a security over time. It can be used to support trading strategies that rely on technical analysis.\n\n### Example Questions:\n1. \"What is the Plus Directional Movement for Apple stock over the last month?\"\n2. \"How has the upward price movement of EUR/USD changed over the past week?\"\n3. \"Can I get the PLUS_DM values for Bitcoin in 15-minute intervals?\"",
  "GetTimeSeriesPpo": "The `/ppo` endpoint provides the Percentage Price Oscillator (PPO) data for a specified financial instrument. The PPO is a momentum oscillator that helps traders identify potential trend reversals and trading opportunities by measuring the percentage difference between two moving averages.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This is a required parameter.\n- **interval**: The time interval for data points (e.g., `1min`, `1day`). This is also required.\n- **start_date** and **end_date**: Define the date range for the data. These parameters consider the specified timezone.\n- **outputsize**: Number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **fast_period** and **slow_period**: Define the periods for the fast and slow moving averages, respectively.\n- **ma_type**: The type of moving average used (e.g., `SMA`, `EMA`).\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a datetime and the corresponding PPO value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to perform technical analysis on financial instruments by examining the PPO indicator over various time intervals.\n\n### Example Questions:\n1. \"What is the PPO for Apple stock on a 1-minute interval?\"\n2. \"How does the PPO of EUR/USD change over the last week?\"\n3. \"Can I get the PPO values for Bitcoin using a 15-minute interval?\"",
  "GetPrice": "The `/price` endpoint provides real-time pricing information for a specific financial instrument. This is a lightweight method designed to quickly retrieve the current price of an asset.\n\n### Key Input Parameters:\n- **symbol (required)**: The ticker symbol of the instrument you want to query, such as \"AAPL\" for Apple Inc.\n- **figi**: The Financial Instrument Global Identifier, which uniquely identifies the instrument.\n- **isin**: The International Securities Identification Number, another unique identifier.\n- **cusip**: The Committee on Uniform Securities Identification Procedures number, specific to U.S. and Canadian securities.\n- **exchange**: The exchange where the instrument is traded.\n- **mic_code**: The Market Identifier Code, following the ISO 10383 standard.\n- **country**: The country where the instrument is traded.\n- **type**: The asset class of the instrument, such as \"ETF\" or \"Common Stock\".\n- **format**: The response format, either JSON (default) or CSV.\n- **delimiter**: The delimiter used in the CSV format, defaulting to a semicolon.\n- **prepost**: A boolean indicating if pre-market and post-market data should be included, available only for Pro and above plans.\n- **dp**: Specifies the number of decimal places for the price, ranging from 0 to 11.\n\n### Response:\nThe endpoint returns the real-time or latest available price of the specified instrument in the requested format.\n\n### Usage Context:\nThis endpoint is ideal for applications needing quick access to the latest price of a financial instrument, such as trading platforms, financial analysis tools, or market monitoring systems.\n\n### Example Questions:\n- \"What is the current price of Apple stock?\"\n- \"Can I get the latest price for a bond using its ISIN?\"\n- \"How much is an ETF trading for on the NYSE?\"",
  "GetPriceTarget": "The `/price_target` API endpoint provides analysts' projections for the future price of a specific security. To use this endpoint, you must specify the security you are interested in by providing at least one of the following identifiers: the symbol (e.g., \"AAPL\"), FIGI, ISIN, or CUSIP. You can also refine your query by specifying the country or exchange where the security is traded.\n\nUpon a successful request, the endpoint returns a JSON object containing the following information:\n- **Meta Information**: Details about the security, including its symbol, name, currency, exchange, and type.\n- **Price Target Information**: Analysts' price targets, including the high, median, low, and average projected prices, as well as the current price of the security.\n- **Status**: The status of the response, typically \"ok\" for successful requests.\n\nThis endpoint is particularly useful for investors or analysts looking to understand market expectations for a security's future performance.\n\nExample questions this endpoint can answer:\n1. \"What are the analysts' future price targets for Apple Inc.?\"\n2. \"Can I get the projected price range for a security traded on NASDAQ?\"\n3. \"What is the average price target for a stock identified by a specific ISIN?\"",
  "GetProfile": "The `/profile` endpoint provides general information about a company based on a specified financial instrument. To use this endpoint, you must provide the `symbol` parameter, which is the ticker symbol of the company. This is the primary identifier and is required. You can also filter the request using other identifiers such as `figi` (Financial Instrument Global Identifier), `isin` (International Securities Identification Number), `cusip` (Committee on Uniform Securities Identification Procedures), `exchange` (exchange name), `mic_code` (Market Identifier Code), and `country` (country where the instrument is traded).\n\nUpon a successful request, the endpoint returns a JSON object containing detailed information about the company. This includes the company's name, exchange, sector, industry, number of employees, website, a description of its activities, stock issue type, CEO's name, and contact details such as address, phone number, and more.\n\nThis endpoint is useful for retrieving comprehensive company profiles for financial analysis or investment research.\n\nExample questions a user might ask that this endpoint could satisfy:\n- \"What is the profile of Apple Inc.?\"\n- \"Can you provide details about a company listed under the symbol BRK.A?\"\n- \"What are the key details of a company identified by CUSIP 594918104?\"",
  "GetQuote": "The `/quote` endpoint is designed to retrieve the latest market quote for a specific financial instrument. It provides detailed information about the instrument's current trading status, including prices and volume data.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument you want to get a quote for, such as \"AAPL\" for Apple Inc.\n- **figi, isin, cusip:** Alternative identifiers for the instrument, allowing you to specify it by its FIGI, ISIN, or CUSIP codes.\n- **interval:** The time interval for the quote data, such as `1min`, `5min`, `1day`, etc. The default is `1day`.\n- **exchange, mic_code, country:** Filters to specify the exchange, market identifier code, or country where the instrument is traded.\n- **type:** The asset class of the instrument, like \"ETF\" or \"Common Stock\".\n- **format:** The response format, either `JSON` or `CSV`, with `JSON` as the default.\n- **prepost, eod:** Options to include pre-market/post-market data or end-of-day data.\n- **rolling_period, volume_time_period:** Parameters to specify periods for rolling change calculations and average volume.\n\n### Response:\nThe endpoint returns a comprehensive set of data about the instrument, including:\n- **Prices:** Open, high, low, close, and previous close prices.\n- **Volume:** Trading volume and average volume over a specified period.\n- **Changes:** Price changes and percentage changes from previous close and over rolling periods.\n- **52-week metrics:** High and low prices over the past 52 weeks, along with changes and percentages.\n- **Market status:** Whether the market is currently open.\n- **Extended trading data:** Information about the latest extended price and its changes.\n\n### Example Questions:\n1. \"What is the latest trading quote for Apple Inc. on NASDAQ?\"\n2. \"Can I get the current price and volume for a specific bond using its ISIN?\"\n3. \"How has the price of Bitcoin changed over the last 7 days?\"",
  "GetRecommendations": "The `/recommendations` API endpoint provides an aggregated view of analyst recommendations for a specific financial instrument. It classifies these recommendations into categories such as Strong Buy, Buy, Hold, or Sell, and also provides a numerical recommendation score ranging from 0 to 10. This score helps users understand the overall sentiment of analysts, where a higher score indicates a stronger buy recommendation.\n\n### Key Input Parameters:\n- **symbol**: This is a required parameter that specifies the ticker symbol of the instrument, such as `AAPL` for Apple Inc. It is the primary identifier for the instrument.\n- **figi**: An optional parameter representing the Financial Instrument Global Identifier, which uniquely identifies the instrument.\n- **isin**: An optional parameter for the International Securities Identification Number, another unique identifier for the instrument.\n- **cusip**: An optional parameter for the Committee on Uniform Securities Identification Procedures number, used mainly in the United States.\n- **country**: An optional parameter specifying the country where the instrument is traded.\n- **exchange**: An optional parameter indicating the exchange where the instrument is listed, such as Nasdaq.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: Metadata about the instrument, including its name, currency, exchange, and type.\n- **trends**: A breakdown of analyst recommendations over the current and previous three months, detailing the number of Strong Buy, Buy, Hold, Sell, and Strong Sell recommendations.\n- **rating**: A numerical score from 0 to 10, summarizing the overall analyst sentiment.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"What are the current analyst recommendations for Apple Inc.?\"\n2. \"How do analysts rate Tesla on a scale from 0 to 10?\"\n3. \"Can I get the recommendation trends for Microsoft over the past few months?\"",
  "GetRevenueEstimate": "The `/revenue_estimate` endpoint provides analysts' estimates for a company's future quarterly and annual sales, also known as total revenue. This endpoint is particularly useful for investors and financial analysts who want to understand market expectations for a company's financial performance.\n\n### Key Input Parameters:\n- **symbol**: This is a required parameter that specifies the stock ticker symbol of the company for which you want revenue estimates. For example, \"AAPL\" for Apple Inc.\n- **figi, isin, cusip**: These are optional parameters that allow you to filter by different financial instrument identifiers, such as the Financial Instrument Global Identifier (FIGI), International Securities Identification Number (ISIN), or Committee on Uniform Securities Identification Procedures (CUSIP) number.\n- **country**: An optional filter to specify the country by name or alpha code.\n- **exchange**: An optional filter to specify the stock exchange by name.\n- **dp**: This optional parameter sets the number of decimal places for floating values in the response, ranging from 0 to 11, with a default of 5.\n\n### Response:\nThe response includes:\n- **Meta Information**: Details about the company, such as its name, currency, exchange, and type of instrument.\n- **Revenue Estimate Data**: An array of estimates, each containing:\n  - The date of the estimate.\n  - The period of estimation (e.g., current quarter, next year).\n  - The number of analysts contributing to the estimate.\n  - Average, low, and high revenue estimates.\n  - Year-ago sales figures and estimated sales growth percentage.\n- **Status**: Indicates the success of the response, typically \"ok\".\n\n### Example Questions:\n1. \"What are the revenue estimates for Apple Inc. for the next quarter?\"\n2. \"How many analysts have provided revenue estimates for a company listed on NASDAQ?\"\n3. \"Can I get the estimated sales growth for a company in the United States for the current year?\"",
  "GetTimeSeriesRoc": "The `/roc` endpoint provides the Rate of Change (ROC) indicator for a specified financial instrument, which helps traders identify potential price trends and reversals by measuring the percentage change in the instrument's price over a given period.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This is a required parameter.\n- **interval**: The time interval between data points (e.g., `1min`, `1day`). This is required to specify how frequently the data points are recorded.\n- **outputsize**: The number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: Define the time range for the data retrieval.\n- **series_type**: The price type used for the ROC calculation, such as `close`, `open`, etc.\n- **time_period**: The number of periods over which the ROC is calculated, defaulting to 9.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and other metadata.\n- **values**: An array of data points, each with a datetime and the corresponding ROC value.\n- **status**: The status of the response, typically \"ok\".\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to assess the momentum of a security's price over time. The ROC indicator can be applied to various asset classes, including stocks, forex, and cryptocurrencies.\n\n### Example Questions:\n1. \"What is the rate of change for Apple stock over the last month?\"\n2. \"How has the EUR/USD currency pair's price changed every hour today?\"\n3. \"Can I get the ROC for Bitcoin on a daily basis for the past week?\"",
  "GetTimeSeriesRocp": "The `/rocp` endpoint provides the Rate of Change Percentage (ROCP) for a specified financial instrument, which helps in analyzing the momentum and potential trend reversals of the instrument's price over a given time period. This endpoint requires the `symbol` parameter, which is the ticker of the instrument (e.g., `AAPL`, `EUR/USD`), and the `interval` parameter, which specifies the time gap between data points (e.g., `1min`, `1day`). \n\nOptional parameters include identifiers like `isin`, `figi`, `cusip`, and `exchange` details, as well as filters for `start_date`, `end_date`, and `outputsize` to customize the data range and volume. The `format` parameter allows the response to be in either JSON or CSV format. \n\nThe response includes metadata about the request, such as the symbol, interval, and exchange details, along with an array of time series data points that contain the datetime and the calculated ROCP values.\n\nThis endpoint can answer questions like:\n- \"What is the rate of change percentage for Apple's stock over the past month?\"\n- \"How has the EUR/USD currency pair's momentum changed over the last week?\"\n- \"Can I get the ROCP for Bitcoin against Ethereum for the last 24 hours?\"",
  "GetTimeSeriesRocr": "The `/rocr` endpoint provides the Rate of Change Ratio (ROCR) for a specified financial instrument, which helps traders identify potential price trends and reversals. This endpoint requires the `symbol` of the instrument, such as `AAPL` for Apple Inc., and the `interval` for the time series data, like `1min` or `1day`. Optional parameters include identifiers like `isin`, `figi`, or `cusip`, and filters for `exchange`, `country`, or `type` of asset.\n\nThe endpoint returns a JSON object containing metadata about the request, such as the symbol, interval, and exchange details, along with an array of time series data points. Each data point includes a timestamp and the corresponding ROCR value.\n\nThis endpoint can be used to answer questions like:\n- \"What is the rate of change ratio for Apple stock over the past month?\"\n- \"How has the ROCR for EUR/USD changed over the last week?\"\n- \"Can I get the ROCR for Tesla with a 5-minute interval?\"",
  "GetTimeSeriesRocr100": "The `/rocr100` endpoint provides the Rate of Change Ratio 100 (ROCR100) for a specified financial instrument. This indicator measures the percentage change in the instrument's price over a given period, expressed as a ratio to 100, which helps in analyzing momentum and potential trend reversals.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for the data points, such as `1min`, `1day`, or `1month`.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the time range for the data. These can be specified in various formats, including `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`.\n- **series_type:** The price type used for the calculation, such as `close`, `open`, `high`, `low`, or `volume`.\n- **time_period:** The number of periods over which to calculate the average, ranging from 1 to 800.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of data points, each with a datetime and the corresponding ROCR100 value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to understand the momentum of a security and identify potential trend reversals based on historical price changes.\n\n### Example Questions:\n1. \"What is the ROCR100 for Apple stock over the past month with daily intervals?\"\n2. \"Can I get the ROCR100 values for EUR/USD on a 15-minute interval for the last week?\"\n3. \"How has the ROCR100 for Bitcoin changed over the last 10 days using hourly data?\"",
  "GetTimeSeriesRsi": "This API endpoint provides the Relative Strength Index (RSI) for a specified financial instrument, which is a momentum oscillator used by traders to identify potential overbought or oversold conditions and trend reversals. To use this endpoint, you must specify the `symbol` of the instrument (e.g., `AAPL`, `EUR/USD`, `ETH/BTC`) and the `interval` for the data points (e.g., `1min`, `1day`, `1week`). \n\nOptional parameters include identifiers like `isin`, `figi`, or `cusip` for more precise instrument targeting, and `outputsize` to define the number of data points returned, ranging from 1 to 5000. You can also filter data by `start_date` and `end_date`, and adjust the output format using parameters like `format` (JSON or CSV) and `timezone`.\n\nThe response includes metadata about the request, such as the symbol, interval, and exchange information, along with an array of RSI values over time. Each data point contains a timestamp and the corresponding RSI value.\n\nThis endpoint is useful for questions like:\n- \"What is the RSI for Apple stock over the last week?\"\n- \"How does the RSI for EUR/USD look on a 15-minute interval?\"\n- \"Can I get the RSI data for Bitcoin in CSV format?\"",
  "GetTimeSeriesRvol": "The `/rvol` endpoint provides the Relative Volume (RVOL) data for a specified financial instrument. RVOL is a metric that compares the current trading volume of a security to its average volume over a set period, helping traders identify unusual trading activity and potential market movements.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This is required to specify which security's RVOL data you want.\n- **interval**: The time interval for the data points (e.g., `1min`, `1day`). This is required to define the granularity of the data.\n- **outputsize**: Number of data points to retrieve, ranging from 1 to 5000. Defaults to 30 if no date parameters are set.\n- **start_date** and **end_date**: Optional parameters to specify the date range for the data.\n- **format**: The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a datetime and the corresponding RVOL value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to monitor trading volumes relative to historical averages to detect anomalies or confirm trends. It can be used for stocks, forex, and cryptocurrencies.\n\n### Example Questions:\n1. What is the relative trading volume for Apple stock over the last week?\n2. How does the current trading volume of EUR/USD compare to its average?\n3. Can I get the RVOL data for Bitcoin with a 15-minute interval?",
  "GetSourceSanctionedEntities": "This API endpoint provides a list of sanctioned entities based on a specified sanction source. The primary input parameter is the \"source,\" which must be specified in the URL path. The \"source\" indicates the origin of the sanctions list and can be one of the following: \"ofac,\" \"uk,\" \"eu,\" or \"au.\" \n\nUpon a successful request, the endpoint returns a JSON object containing a list of sanctioned entities. Each entity includes details such as the instrument symbol, name, market identifier code (MIC), and country. Additionally, it provides information about the sanction itself, including the source, program, notes, and the sanction lists with their publication dates. The response also includes the total count of sanctioned entities and a status message.\n\nThis endpoint is useful for users who need to:\n- Find all entities sanctioned by a specific source, such as OFAC or the EU.\n- Retrieve detailed information about sanctioned companies or individuals from different countries.\n- Understand which sanction programs and lists an entity is associated with.\n\nExample questions a user might ask that this endpoint could satisfy:\n- \"What entities are currently sanctioned by the EU?\"\n- \"Can you provide details on the OFAC sanctioned list?\"\n- \"How many entities are sanctioned by the UK?\"",
  "GetTimeSeriesSar": "The `/sar` endpoint provides the Parabolic SAR (Stop and Reverse) indicator for a specified financial instrument. This trend-following indicator helps traders identify potential entry and exit points by calculating support and resistance levels based on the security's price and time.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Specify the date range for the data.\n- **acceleration and maximum:** Parameters for the SAR calculation, with defaults of 0.02 and 0.2, respectively.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta Information:** Includes details like the symbol, interval, currency, exchange, and indicator specifics.\n- **Values:** An array of time series data points, each with a datetime and corresponding SAR value.\n- **Status:** Indicates the success of the request.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to apply the Parabolic SAR indicator to assess market trends and make informed trading decisions.\n\n### Example Questions:\n- How can I get the Parabolic SAR values for Apple stock over the past week?\n- What are the SAR values for EUR/USD at 15-minute intervals?\n- Can I retrieve SAR data for Bitcoin with a specific acceleration factor?",
  "GetTimeSeriesSarExt": "The `/sarext` endpoint provides access to the Parabolic SAR Extended (SAREXT) indicator, which is a technical analysis tool used by traders to identify potential entry and exit points in the market. This endpoint allows users to customize the SAREXT parameters to suit their trading strategies.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the financial instrument, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval for the data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000.\n- **start_date** and **end_date**: Define the date range for the data retrieval.\n- **timezone**: Specifies the timezone for the output datetime, which can be `Exchange`, `UTC`, or a specific IANA timezone.\n- **acceleration parameters**: Customize the acceleration values for long and short positions, such as `acceleration_long`, `acceleration_max_long`, etc.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a datetime and the corresponding SAREXT value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who want to apply the Parabolic SAR Extended indicator to various financial instruments to better time their trades. It supports a wide range of customization options to fine-tune the indicator's sensitivity and behavior.\n\n### Example Questions:\n1. \"How can I get the Parabolic SAR Extended values for Apple stock on a 1-minute interval?\"\n2. \"What are the SAREXT values for EUR/USD over the past week?\"\n3. \"Can I retrieve the SAREXT data for Bitcoin with custom acceleration settings?\"",
  "GetTimeSeriesSin": "The `/sin` endpoint is designed to calculate the sine values of a given financial instrument's data points, which is useful for trigonometric and harmonic pattern analysis in financial markets. This endpoint is particularly relevant for analyzing time series data of stocks, currencies, or other financial instruments.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument (e.g., `AAPL` for Apple Inc.).\n- **interval (required):** The time interval between data points, such as `1min`, `5min`, `1h`, or `1day`.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the time range for the data. If specified, the output size defaults to the maximum.\n- **exchange, mic_code, country, type:** Optional filters to specify the exchange, market code, country, and asset class.\n- **timezone:** Determines the timezone for the output datetime, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** Metadata about the request, including the symbol, interval, currency, exchange, and asset class.\n- **values:** An array of objects, each containing a `datetime` and the calculated `sin` value for that time point.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to perform technical analysis using sine wave patterns on financial data. It can be used to identify cyclical patterns or trends in the market.\n\n### Example Questions:\n1. \"What are the sine values for Apple's stock price over the last week at 1-hour intervals?\"\n2. \"Can I get the sine wave analysis for EUR/USD currency pair for the past month?\"\n3. \"How does the sine indicator look for Bitcoin trading on NASDAQ with a 15-minute interval?\"",
  "GetTimeSeriesSinh": "The `/sinh` endpoint is designed to calculate the hyperbolic sine (SINH) of a given financial instrument's data over a specified time series. This is particularly useful for advanced mathematical analysis or financial market calculations.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between data points, options include `1min`, `5min`, `1day`, etc.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Specify the date range for the data retrieval.\n- **timezone:** Determines the timezone for the output datetime, defaulting to the exchange's local time.\n- **series_type:** Specifies the type of price data to use (e.g., open, high, low, close), defaulting to close.\n\n### What the Endpoint Returns:\nThe response includes metadata about the instrument, such as its symbol, exchange, and asset class, along with the calculated SINH values for each specified time point. The data is returned in either JSON or CSV format, depending on the request.\n\n### Example Questions:\n1. \"How can I calculate the hyperbolic sine of Apple's stock prices over the past week?\"\n2. \"What are the SINH values for EUR/USD at 15-minute intervals for the last 24 hours?\"\n3. \"Can I get the hyperbolic sine calculations for Bitcoin prices with a 1-hour interval?\"",
  "GetTimeSeriesSma": "The `/sma` endpoint provides the Simple Moving Average (SMA) for a specified financial instrument over a given time period. This endpoint is useful for traders and analysts who want to identify trends and potential support or resistance levels in the market.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between data points, options include `1min`, `5min`, `1day`, etc.\n- **time_period:** The number of periods over which the SMA is calculated, ranging from 1 to 800.\n- **outputsize:** The number of data points to retrieve, with a maximum of 5000.\n- **start_date and end_date:** Specify the date range for the data.\n- **series_type:** The price type used for calculation, such as `close`, `open`, `high`, etc.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and type of indicator.\n- **values:** An array of time series data points, each with a datetime and the corresponding SMA value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for financial analysts and traders who need to analyze historical price trends of stocks, forex, or cryptocurrencies to make informed trading decisions.\n\n### Example Questions:\n1. \"What is the 10-day simple moving average for Apple stock?\"\n2. \"Can I get the 1-hour interval SMA for EUR/USD for the past month?\"\n3. \"How does the SMA for Bitcoin change over a 15-minute interval?\"",
  "GetSplits": "The `/splits` endpoint provides historical data on stock splits for a given company over the past decade or more. To retrieve this information, you must specify the company's symbol ticker, such as `AAPL` for Apple Inc. You can also filter results using other identifiers like FIGI, ISIN, or CUSIP, and specify the exchange or country where the stock is traded. Additionally, you can define the time range for the data, either by using predefined periods (e.g., last month, last year) or by specifying exact start and end dates.\n\nThe endpoint returns a JSON object containing metadata about the stock, such as its name, currency, and exchange details. It also provides a list of stock splits, each with details like the split date, description (e.g., \"4-for-1 split\"), and the ratio of the split.\n\nThis endpoint is useful for financial analysts, investors, or anyone interested in understanding how a company's stock has been split over time, which can impact investment decisions and stock valuation.\n\nExample questions this endpoint could answer:\n- \"What are the historical stock splits for Apple Inc. over the last 10 years?\"\n- \"How many times has Tesla's stock split since 2015?\"\n- \"Can you provide details on the most recent stock split for Microsoft?\"",
  "GetSplitsCalendar": "The `/splits_calendar` endpoint provides a calendar view of stock split events within a specified date range. It allows users to retrieve detailed information about stock splits for companies traded on specific exchanges or within certain countries.\n\nKey input parameters include:\n- `exchange`: Specifies the exchange where the instrument is traded.\n- `mic_code`: The Market Identifier Code, which follows the ISO 10383 standard.\n- `country`: The country where the instrument is traded.\n- `start_date` and `end_date`: Define the date range for the calendar, formatted as `YYYY-MM-DD`.\n- `outputsize`: Determines the number of data points to retrieve, ranging from 1 to 500. If no date is specified, the default is 100.\n- `page`: Indicates the page number for paginated results.\n\nThe endpoint returns a list of stock split events, each including details such as the split date, company ticker symbol, exchange name, split description, and the split ratio.\n\nThis endpoint is useful for:\n- Finding out which companies have scheduled stock splits within a specific time frame.\n- Researching historical stock split data for a particular exchange or country.\n- Analyzing the impact of stock splits on a company's share distribution.\n\nExample questions:\n- \"What stock splits are happening on NASDAQ next month?\"\n- \"Can I see the stock splits for companies in the US during the first quarter of this year?\"\n- \"How many stock splits occurred on the London Stock Exchange last year?\"",
  "GetTimeSeriesSqrt": "The `/sqrt` endpoint provides the square root (SQRT) indicator for a specified financial instrument, which is useful for mathematical analysis or financial market calculations. This endpoint requires the `symbol` parameter, which is the ticker of the instrument (e.g., `AAPL`, `EUR/USD`), and the `interval` parameter, which specifies the time gap between data points (e.g., `1min`, `1day`). \n\nOptional parameters include identifiers like `isin`, `figi`, and `cusip` to filter the instrument, as well as `exchange`, `mic_code`, `country`, and `type` to specify trading details. You can also set `start_date` and `end_date` to define the time range for data retrieval, and `outputsize` to limit the number of data points returned. The response can be formatted as JSON or CSV, with additional options for sorting and including pre-market or post-market data.\n\nThe endpoint returns a JSON object containing metadata about the request, such as the symbol, interval, and exchange details, along with an array of time series data points, each containing the datetime and the calculated SQRT value.\n\nThis endpoint could answer questions like:\n- \"What is the square root indicator for Apple's stock over the last month?\"\n- \"How does the square root value for EUR/USD change every minute?\"\n- \"Can I get the square root values for a specific date range for Bitcoin?\"",
  "GetStatistics": "The `/statistics` endpoint provides a comprehensive overview of a company's main statistics, including valuation metrics and financials. This endpoint is particularly useful for retrieving current financial data and stock statistics for a specific company.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the financial instrument. This is necessary to identify the specific company you want statistics for. For preferred stocks, use a dot (.) delimiter, such as `BRK.A` or `BRK.B`.\n- **figi**: An optional parameter to filter the data by the Financial Instrument Global Identifier.\n- **isin**: An optional parameter to filter by the International Securities Identification Number.\n- **cusip**: An optional parameter to filter by the Committee on Uniform Securities Identification Procedures number.\n- **exchange**: An optional parameter to specify the exchange where the instrument is traded.\n- **mic_code**: An optional parameter to specify the Market Identifier Code under the ISO 10383 standard.\n- **country**: An optional parameter to specify the country where the instrument is traded.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta Information**: Includes the symbol, company name, currency, exchange, and market identifier code.\n- **Valuation Metrics**: Such as market capitalization, enterprise value, P/E ratios, and other valuation ratios.\n- **Financials**: Includes fiscal year end, most recent quarter, margins, returns, and detailed income statement, balance sheet, and cash flow information.\n- **Stock Statistics**: Information on shares outstanding, average trading volumes, and short interest.\n- **Stock Price Summary**: Data on 52-week highs and lows, beta, and moving averages.\n- **Dividends and Splits**: Details on dividend rates, yields, payout ratios, and recent split information.\n\n### Example Questions:\n1. \"What are the current financial statistics for Apple Inc.?\"\n2. \"Can I get the market capitalization and P/E ratio for a specific stock using its ticker symbol?\"\n3. \"What is the latest dividend information for a company traded on NASDAQ?\"",
  "GetTimeSeriesStdDev": "The `/stddev` endpoint provides the standard deviation of a financial instrument's price data over a specified time period. This statistical measure is commonly used to assess the volatility of an asset, which can inform trading strategies and risk management.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for data points, such as `1min`, `1day`, or `1week`.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Specify the date range for the data, formatted as `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`.\n- **series_type:** The price type used for calculation, such as `close`, `open`, `high`, `low`, or `volume`.\n- **time_period:** The number of periods over which the standard deviation is calculated, ranging from 1 to 800.\n- **sd:** The standard deviation multiplier used in the calculation, with a default of 2.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of data points, each with a timestamp and the corresponding standard deviation value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"What is the standard deviation of Apple's stock price over the past month?\"\n2. \"How volatile was the EUR/USD currency pair last week?\"\n3. \"Can I get the standard deviation of Bitcoin's price on a 15-minute interval?\"",
  "GetTimeSeriesStoch": "The `/stoch` endpoint provides data on the Stochastic Oscillator, a momentum indicator used in trading to evaluate potential overbought or oversold conditions and identify trend reversals. This endpoint is particularly useful for traders and analysts looking to assess the momentum of a security over a specified period.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval between data points, such as `1min`, `1day`, or `1week`.\n- **fast_k_period, slow_k_period, slow_d_period:** These define the periods for the fast %K, slow %K, and slow %D lines of the Stochastic Oscillator, respectively.\n- **start_date and end_date:** Specify the date range for the data.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta information:** Includes details like the symbol, interval, and exchange.\n- **Values:** An array of time series data points with `datetime`, `slow_k`, and `slow_d` values.\n- **Status:** Indicates the success of the request.\n\n### Example Questions:\n1. \"How can I find the Stochastic Oscillator values for Apple stock over the last week?\"\n2. \"What are the slow %K and slow %D values for EUR/USD on a 15-minute interval?\"\n3. \"Can I get the Stochastic Oscillator data for Bitcoin in CSV format?\"",
  "GetTimeSeriesStochF": "The `/stochf` endpoint provides data on the Stochastic Fast (STOCHF) indicator for a specified financial instrument. This indicator is a variation of the Stochastic Oscillator, which is more responsive to price changes due to its use of fewer periods for calculation. The endpoint is designed to help users analyze market trends and potential price movements.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` or `EUR/USD`.\n- **interval (required):** The time interval between data points, such as `1min`, `5min`, `1day`, etc.\n- **fast_k_period:** Specifies the period for the fast %K line, default is 14.\n- **fast_d_period:** Specifies the period for the fast %D line, default is 3.\n- **fast_dma_type:** The type of moving average used, default is `SMA`.\n- **outputsize:** Number of data points to retrieve, default is 30.\n- **start_date and end_date:** Define the date range for the data.\n\n### Response:\nThe response includes metadata about the request and an array of time series data points. Each data point contains:\n- **datetime:** The date and time of the data point.\n- **fast_k:** The fast %K value.\n- **fast_d:** The fast %D value.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to quickly assess the momentum of a stock or other financial instrument using the Stochastic Fast indicator. It allows for customization of time periods and moving average types to suit different trading strategies.\n\n### Example Questions:\n1. \"What is the Stochastic Fast indicator for Apple stock over the last week?\"\n2. \"How does the STOCHF indicator for EUR/USD look on a 5-minute interval?\"\n3. \"Can I get the Stochastic Fast values for Bitcoin using a 1-hour interval?\"",
  "GetTimeSeriesStochRsi": "The `/stochrsi` endpoint provides data on the Stochastic RSI (STOCHRSI) indicator for a specified financial instrument. This indicator is an oscillator that applies the Stochastic formula to RSI values, offering a more sensitive measure for detecting overbought or oversold conditions and potential trend reversals.\n\n### Key Input Parameters:\n- **symbol** (required): The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval** (required): The time interval between data points, such as `1min`, `1day`, etc.\n- **rsi_length**: The period length for calculating the RSI component, defaulting to 14.\n- **stoch_length**: The period length for the stochastic oscillator of the RSI, defaulting to 14.\n- **k_period**: The smoothing period for the %K line, defaulting to 3.\n- **d_period**: The smoothing period for the %D line, defaulting to 3.\n- **start_date** and **end_date**: Define the date range for the data.\n- **outputsize**: Number of data points to retrieve, with a default of 30 if no date range is specified.\n- **format**: The response format, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of data points, each with a timestamp and the calculated %K and %D values.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to assess market conditions and identify potential entry or exit points based on the STOCHRSI indicator.\n\n### Example Questions:\n1. \"What is the Stochastic RSI for Apple stock over the past week with 1-day intervals?\"\n2. \"How does the STOCHRSI for EUR/USD look over the last 24 hours with 1-hour intervals?\"\n3. \"Can I get the STOCHRSI data for Bitcoin against Ethereum with 5-minute intervals?\"",
  "GetStocks": "The `/stocks` endpoint provides a list of stock symbols available through the Twelve Data API. This list is updated daily and can be filtered using various parameters to refine the search results.\n\nKey input parameters include:\n- **symbol**: Specify a particular stock ticker symbol to retrieve data for a specific instrument.\n- **figi**: Filter results by the Financial Instrument Global Identifier.\n- **isin**: Use the International Securities Identification Number to narrow down the search.\n- **cusip**: Include the CUSIP number for targeted data retrieval.\n- **exchange**: Filter stocks by the name of the exchange where they are traded.\n- **mic_code**: Use the Market Identifier Code to specify a particular market.\n- **country**: Limit results to stocks from a specific country.\n- **type**: Specify the asset class, such as \"Common Stock\" or \"ETF\".\n- **format**: Choose between JSON or CSV for the response format.\n- **include_delisted**: Optionally include delisted stocks in the results.\n\nThe endpoint returns an array of stock details, including the symbol, name, currency, exchange, country, type, and identifiers like FIGI and ISIN. It also provides information about the access level and plan availability for each symbol.\n\nThis endpoint can answer questions such as:\n- \"What stock symbols are available for Apple Inc.?\"\n- \"Can I get a list of common stocks traded on NASDAQ?\"\n- \"How can I find stocks listed in the United States with their FIGI codes?\"",
  "GetTimeSeriesSub": "The `/sub` endpoint performs arithmetic subtraction between two specified data series for a given financial instrument, such as a stock or currency pair. This is useful for combining or normalizing technical indicators or price data. \n\nTo use this endpoint, you must provide the `symbol` of the instrument (e.g., `AAPL` for Apple Inc.) and the `interval` for the time series data (e.g., `1min`, `1day`). You can also specify the types of price data to subtract using `series_type_1` and `series_type_2` (e.g., `open`, `close`). Optional parameters include `start_date` and `end_date` to define the time range, `outputsize` to limit the number of data points, and `timezone` to set the time zone for the output.\n\nThe response includes metadata about the request and an array of time series data points, each with a timestamp and the calculated subtraction value (`sub`). The response format can be JSON or CSV.\n\nThis endpoint can answer questions like:\n- \"What is the difference between the opening and closing prices of Apple stock over the past week?\"\n- \"How does the subtraction of high and low prices for EUR/USD look on a 15-minute interval?\"\n- \"Can I get the subtraction of open and close prices for Bitcoin over the last month?\"",
  "GetTimeSeriesSum": "The `/sum` endpoint is designed to calculate the summation of a data series over a specified period for a given financial instrument. This is often used in data analysis or in conjunction with other indicators. The endpoint requires you to specify the `symbol` of the instrument (e.g., `AAPL`, `EUR/USD`) and the `interval` (e.g., `1min`, `1day`) between data points. Optionally, you can filter the data using identifiers like ISIN, FIGI, or CUSIP, and specify additional parameters such as the `exchange`, `country`, `type` of asset, and `timezone` for the output.\n\nThe endpoint returns a JSON object containing metadata about the request, such as the symbol, interval, and exchange information, along with the calculated sum values for the specified time series. The response includes an array of data points, each with a timestamp and the corresponding sum value.\n\nThis endpoint can answer questions like:\n- \"What is the sum of closing prices for AAPL over the last month?\"\n- \"How can I calculate the sum of a data series for EUR/USD at 5-minute intervals?\"\n- \"What is the total sum of values for a specific stock over a given period?\"",
  "GetTimeSeriesSuperTrend": "The `/supertrend` endpoint provides access to the Supertrend indicator, a tool used to identify potential entry and exit points in trending markets by analyzing price, time, and volatility. This endpoint is particularly useful for traders and analysts looking to apply technical analysis to various financial instruments.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This identifies the specific asset for which the Supertrend data is requested.\n- **interval (required):** The time interval for the data points (e.g., `1min`, `1day`). This determines the frequency of the data points in the time series.\n- **period:** The period used for calculating the Supertrend indicator, with a default value of 10.\n- **multiplier:** A factor that adjusts the sensitivity of the Supertrend indicator, with a default value of 3.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30 if no date parameters are set.\n- **start_date and end_date:** Define the time range for the data retrieval. These can be specified in various formats and time zones.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta Information:** Details about the request, such as the symbol, interval, and exchange information.\n- **Values:** An array of time series data points, each including the datetime and the calculated Supertrend value.\n- **Status:** Indicates the success of the request.\n\n### Usage Context:\nThis endpoint is ideal for users who need to analyze market trends using the Supertrend indicator across different time frames and financial instruments. It supports a wide range of asset classes and can be customized with various parameters to suit specific analytical needs.\n\n### Example Questions:\n1. \"What is the Supertrend indicator for Apple stock on a 1-minute interval?\"\n2. \"How can I get the Supertrend values for EUR/USD over the past week?\"\n3. \"Can I retrieve the Supertrend data for Bitcoin with a 15-minute interval?\"",
  "GetTimeSeriesSuperTrendHeikinAshiCandles": "The `/supertrend_heikinashicandles` endpoint provides a combined analysis of Supertrend and Heikin Ashi Candles indicators, which are used to identify trends and potential entry or exit points in trading. This endpoint is particularly useful for traders looking to analyze trend-following signals alongside smoothed price action.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument you want to analyze, such as `AAPL` or `EUR/USD`.\n- **interval (required):** The time interval for data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30 if no date parameters are set.\n- **start_date and end_date:** Specify the date range for the data. If `timezone` is provided, these dates will be interpreted in the specified timezone.\n- **timezone:** Determines the timezone for the output datetime, defaulting to the exchange's local time.\n- **period and multiplier:** Parameters for adjusting the sensitivity and calculation period of the indicator.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **Meta Information:** Details about the request, such as the symbol, interval, and exchange information.\n- **Values:** An array of time series data points, including Supertrend values and Heikin-Ashi open, high, low, and close values.\n- **Status:** The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"How can I get the Supertrend and Heikin Ashi Candles data for Apple stock on a 1-minute interval?\"\n2. \"What are the Supertrend values for EUR/USD over the past week?\"\n3. \"Can I see the Heikin Ashi candle data for Bitcoin with a 5-minute interval?\"",
  "GetSymbolSearch": "The `/symbol_search` endpoint allows users to search for financial symbols, such as stock tickers, and returns a list of the best matching instruments. The results are ordered by relevance, with the most relevant symbol appearing first.\n\nKey input parameters include:\n- **symbol** (required): The ticker symbol you want to search for.\n- **figi_composite**: An optional filter using the Composite FIGI, which is a unique identifier for a security across all trading venues.\n- **figi_share_class**: An optional filter using the Share Class FIGI, which identifies a specific share class.\n- **isin**: An optional filter using the International Securities Identification Number.\n- **outputsize**: Specifies the number of matches to return, with a default of 30 and a maximum of 120.\n- **show_plan**: A boolean flag that, if set to true, includes information about which subscription plan the symbol is available under.\n\nThe endpoint returns a JSON object containing:\n- A list of symbols matching the search criteria, each with details such as the ticker symbol, instrument name, exchange, market identifier code (MIC), exchange timezone, instrument type, country, currency, and access level.\n- A status indicating the success of the response.\n\nThis endpoint is useful for users who need to find detailed information about financial instruments based on various identifiers or who want to integrate symbol lookup functionality into their applications.\n\nExample questions this endpoint can answer:\n- \"What are the details of the symbol 'AAPL'?\"\n- \"Can I find a stock using its ISIN?\"\n- \"How can I get a list of symbols that match a specific FIGI?\"",
  "GetTimeSeriesT3ma": "The `/t3ma` endpoint provides the Triple Exponential Moving Average (T3MA) for a specified financial instrument. This technical indicator is used to smooth price data and highlight trends by applying three exponential moving averages, which helps reduce lag in trend analysis.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`, `ETH/BTC`).\n- **interval (required):** The time interval for data points (e.g., `1min`, `1day`).\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000. Defaults to 30 if no date parameters are set.\n- **start_date and end_date:** Define the time range for the data. These can be specified in a detailed format or using terms like \"today\" or \"yesterday\".\n- **series_type:** The price type on which the T3MA is calculated (e.g., `close`, `open`).\n- **time_period:** The number of periods over which to average, ranging from 1 to 800.\n- **v_factor:** A factor to adjust the indicator's volatility, ranging from 0 to 1.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with a datetime and the corresponding T3MA value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to understand market trends by applying a sophisticated smoothing technique to price data. It allows for customization in terms of data intervals, time periods, and volatility adjustments.\n\n### Example Questions:\n1. \"What is the T3MA for Apple stock over the last month with daily intervals?\"\n2. \"Can I get the T3MA values for EUR/USD for the past week using a 5-minute interval?\"\n3. \"How does the T3MA of Bitcoin compare when calculated on the closing price versus the opening price?\"",
  "GetTimeSeriesTan": "The `/tan` endpoint is designed to calculate the tangent of a given input value, specifically for use in trigonometric and harmonic pattern analysis within financial markets. This endpoint is particularly useful for traders and analysts who need to perform mathematical transformations on time series data of financial instruments.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between consecutive data points, such as `1min`, `5min`, or `1day`.\n- **outputsize:** The number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date and end_date:** Define the time range for the data, formatted as `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`.\n- **timezone:** Specifies the timezone for the output datetime, defaulting to the exchange's local time.\n- **series_type:** Specifies the price data type to use, such as open, high, low, or close.\n\n### Response:\nThe endpoint returns a JSON object containing metadata about the requested instrument, including the symbol, interval, currency, and exchange details. The main data consists of an array of values, each with a timestamp (`datetime`) and the calculated tangent value (`tan`).\n\n### Example Questions:\n1. \"How can I calculate the tangent of Apple's stock price every minute for the past hour?\"\n2. \"What is the tangent of the EUR/USD exchange rate on a daily basis for the last month?\"\n3. \"Can I get the tangent values for Bitcoin's price in 15-minute intervals for the past week?\"\n\nThis endpoint is ideal for users looking to integrate mathematical analysis into their financial data workflows, particularly in the context of trading and market analysis.",
  "GetTimeSeriesTanh": "The `/tanh` endpoint is designed to calculate the hyperbolic tangent (TANH) of time series data for a specified financial instrument. This mathematical transformation is often used in advanced financial analysis. To use this endpoint, you must provide the `symbol` of the instrument (e.g., `AAPL`, `EUR/USD`) and the `interval` for the time series data (e.g., `1min`, `1day`). \n\nOptional parameters allow you to refine your query by specifying identifiers like `isin`, `figi`, or `cusip`, and you can filter data by `exchange`, `country`, or `type` of asset. You can also set the `outputsize` to limit the number of data points returned, and use `start_date` and `end_date` to define a specific time range. The `format` parameter allows you to choose between JSON and CSV for the response format.\n\nThe endpoint returns a JSON object containing metadata about the request, such as the symbol, interval, and exchange information, along with an array of data points, each including a timestamp and the calculated TANH value.\n\nQuestions this endpoint could answer include:\n- \"What is the hyperbolic tangent of the 1-minute interval data for Apple stock over the past week?\"\n- \"Can I get the TANH values for EUR/USD for the last 30 days in CSV format?\"\n- \"How does the TANH indicator vary for Bitcoin trading on a 5-minute interval?\"",
  "GetTaxInfo": "The `/tax_info` API endpoint is designed to provide tax information for a specific financial instrument. To retrieve this data, you must supply at least one identifier for the instrument, such as a ticker symbol, ISIN, FIGI, or CUSIP. You can also specify the exchange name or its Market Identifier Code (MIC) where the instrument is traded. \n\nThe endpoint returns a JSON object containing the tax indicator for the requested instrument, which could be values like `us_1446f`, `spanish_ftt`, `uk_stamp_duty`, etc. Additionally, it provides metadata about the instrument, including its symbol, name, exchange, MIC, and country. The response also includes a status field indicating whether the request was successful.\n\nThis endpoint can answer questions such as:\n- \"What are the tax implications for trading the instrument with the ticker `SKYQ`?\"\n- \"Can you provide the tax information for an instrument identified by ISIN `US5949181045`?\"\n- \"What is the tax indicator for a stock traded on the Nasdaq exchange with CUSIP `594918104`?\"",
  "GetTechnicalIndicators": "The `/technical_indicators` endpoint provides a list of available technical indicators from the Twelve Data API. This information is useful for developers who want to integrate financial data analysis into their applications. The endpoint returns an array of objects, each representing a technical indicator with details such as its name, description, type, and whether it is recommended for use. Additionally, it includes information about how the indicator should be displayed, its input parameters, output values, and any tinting options for visualization.\n\nKey elements returned include:\n- **Indicator Name and Full Name**: Identifies the indicator and provides its full descriptive name.\n- **Enable Status**: Indicates if the indicator is tested and recommended.\n- **Description**: A brief explanation of the indicator's purpose.\n- **Type**: The category to which the indicator belongs, such as momentum indicators.\n- **Overlay**: Specifies if the indicator should be plotted over price bars.\n- **Output Values**: Details on how the indicator's results should be displayed, including suggested colors and rendering styles.\n- **Input Parameters**: Lists the required inputs for the indicator, including default values and acceptable ranges.\n\nThis endpoint does not require any input parameters, making it straightforward to use for retrieving the full list of indicators.\n\nExample questions this endpoint could answer:\n- \"What technical indicators are available for integration with my financial application?\"\n- \"Can you provide details on the Moving Average Convergence Divergence (MACD) indicator?\"\n- \"Which technical indicators are recommended for use in my trading app?\"",
  "GetTimeSeriesTema": "The `/tema` endpoint provides the Triple Exponential Moving Average (TEMA) for a specified financial instrument. This endpoint is designed to help users analyze trends by applying three exponential moving averages to price data, which reduces lag and offers a more accurate trend representation.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between data points, e.g., `1min`, `1day`.\n- **outputsize:** Number of data points to retrieve, with a range from 1 to 5000. Defaults to 30 if no date parameters are set.\n- **start_date and end_date:** Specify the date range for the data. Can be used with the `timezone` parameter to adjust the time zone.\n- **series_type:** The price type for the calculation, such as `close`, `open`, `high`, `low`, or `volume`. Defaults to `close`.\n- **time_period:** The period used for the TEMA calculation, defaulting to 9.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with a datetime and the corresponding TEMA value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to assess the trend direction of a financial instrument over a specified period. The TEMA is particularly beneficial for reducing the lag associated with traditional moving averages.\n\n### Example Questions:\n- \"What is the TEMA for Apple stock on a 1-minute interval?\"\n- \"Can you provide the TEMA for EUR/USD for the last 30 days?\"\n- \"How does the TEMA for Bitcoin change over a 15-minute interval?\"",
  "GetTimeSeries": "The `/time_series` endpoint provides detailed time series data for a specified financial instrument. It returns both metadata about the instrument and an array of time series data points, which include open, high, low, and close prices. For non-currency instruments, volume information is also included.\n\nKey input parameters include:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This is required.\n- **interval**: The time interval between data points, such as `1min`, `1h`, or `1day`. This is required.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000. Defaults to 30 if no date parameters are set.\n- **start_date** and **end_date**: Specify the date range for the data.\n- **timezone**: Determines the timezone for the datetime output, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n\nThe endpoint can also filter data by identifiers like ISIN, FIGI, or CUSIP, and allows customization of the output format (JSON or CSV), sorting order, and inclusion of pre-market and post-market data for US equities.\n\nThe response includes a metadata object with general information about the instrument and a series of data points with prices and volume.\n\nExample questions this endpoint could answer:\n1. \"What are the historical stock prices for Apple in 1-hour intervals over the past week?\"\n2. \"Can I get the trading volume for EUR/USD in 5-minute intervals?\"\n3. \"What was the opening and closing price of AAPL on September 16, 2021?\"",
  "GetTimeSeriesCross": "The `/time_series/cross` endpoint is designed to provide time series data for cross rates between specified financial instruments, such as stocks, forex, and cryptocurrencies. This endpoint returns a meta object containing general information about the requested symbols and an array of time series data points, which include open, high, low, and close prices ordered by time in descending order.\n\nKey input parameters include:\n\n- **base_symbol**: The symbol for the base currency or instrument (e.g., \"JPY\").\n- **quote_symbol**: The symbol for the quote currency or instrument (e.g., \"BTC\").\n- **interval**: The time interval for data points, such as \"1min\", \"1h\", or \"1day\".\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000.\n- **format**: The format of the response, either \"JSON\" or \"CSV\".\n\nOptional parameters allow for further customization, such as specifying the base and quote instrument types, exchanges, and MIC codes, as well as setting a date range, adjusting data, and selecting a timezone.\n\nThe endpoint is useful for users who need historical price data for currency pairs or other financial instruments, enabling them to analyze market trends or perform technical analysis.\n\nExample questions this endpoint could satisfy:\n1. \"What are the historical exchange rates between JPY and BTC over the last month?\"\n2. \"Can I get the 1-minute interval price data for a specific stock on the NYSE?\"\n3. \"How did the price of Bitcoin change against the Japanese Yen over the past week?\"",
  "GetTimeSeriesTRange": "The `/trange` endpoint provides the True Range (TRANGE) indicator, which measures the range of price movement over a specified period. This is useful for traders looking to assess market volatility and identify potential trading opportunities or manage risks.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval for data points, such as `1min`, `5min`, `1day`, etc.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the time range for the data. If provided, they will be used according to the specified timezone.\n- **timezone:** Determines the timezone for the output datetime, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with a `datetime` and `trange` value indicating the True Range at that time.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"What is the True Range for Apple stock over the last month at daily intervals?\"\n2. \"Can I get the True Range data for EUR/USD for the past week with 1-hour intervals?\"\n3. \"How do I retrieve the True Range for Bitcoin against Ethereum for today in JSON format?\"",
  "GetTimeSeriesTrima": "The `/trima` endpoint provides the Triangular Moving Average (TRIMA) for a specified financial instrument. TRIMA is a technical indicator that smooths price data by averaging it over a defined period, giving more weight to prices in the middle of the range. This endpoint is useful for analyzing the price trends of securities.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This is required.\n- **interval**: The time interval between data points (e.g., `1min`, `1day`). This is required.\n- **time_period**: The number of periods over which to calculate the average, ranging from 1 to 800.\n- **outputsize**: Number of data points to retrieve, with a default of 30.\n- **start_date** and **end_date**: Define the date range for the data.\n- **series_type**: The price type used for calculation (e.g., `close`, `open`).\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and indicator details.\n- **values**: An array of time series data points, each with a datetime and the corresponding TRIMA value.\n- **status**: The status of the response, typically \"ok\".\n\n### Example Questions:\n1. \"What is the triangular moving average for Apple stock over the last month?\"\n2. \"Can I get the TRIMA for EUR/USD on a 5-minute interval?\"\n3. \"How does the TRIMA for Bitcoin look over the past week with a 15-minute interval?\"",
  "GetTimeSeriesTsf": "The `/tsf` endpoint provides a Time Series Forecast (TSF) indicator, which uses linear regression analysis to project future price levels of a financial instrument. This can help traders identify potential support, resistance, and trend directions.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the financial instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between data points, options include `1min`, `5min`, `1h`, `1day`, etc.\n- **outputsize:** Number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Specify the date range for the data. If provided, they will be used according to the specified timezone.\n- **timezone:** Determines the timezone for the output datetime, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n- **series_type:** The price type used for the indicator calculation, such as `close`, `open`, `high`, `low`, or `volume`.\n- **time_period:** The number of periods to average over, ranging from 1 to 800.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of data points, each with a datetime and the corresponding TSF value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"What is the projected price trend for Apple stock over the next few days?\"\n2. \"Can I get a time series forecast for EUR/USD with 15-minute intervals?\"\n3. \"How does the TSF indicator look for Bitcoin in the last week?\"",
  "GetTimeSeriesTypPrice": "The `/typprice` endpoint provides the Typical Price (TYPPRICE) indicator for a specified financial instrument. This indicator calculates the average of a security's high, low, and close prices, offering a simplified view of price action over a given time interval.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`).\n- **interval (required):** The time interval for the data points, such as `1min`, `1h`, `1day`, etc.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the date range for the data retrieval.\n- **timezone:** Specifies the timezone for the datetime output, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, currency, and exchange details.\n- **values:** An array of time series data points, each with a datetime and the calculated typical price.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to understand price trends by examining the typical price of an asset over time. It can be used for various asset classes, including stocks, forex, and cryptocurrencies.\n\n### Example Questions:\n1. \"What is the typical price for Apple stock over the last month?\"\n2. \"Can I get the typical price for EUR/USD on a 15-minute interval?\"\n3. \"How has the typical price of Bitcoin changed over the past week?\"",
  "GetTimeSeriesUltOsc": "The `/ultosc` endpoint provides access to the Ultimate Oscillator (ULTOSC) data for a specified financial instrument. This momentum oscillator is used to identify potential overbought or oversold conditions and trend reversals by combining short, intermediate, and long-term price actions.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for the data points, such as `1min`, `5min`, `1h`, `1day`, etc.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **time_period_1, time_period_2, time_period_3:** These define the time periods used in the oscillator's calculation, with defaults of 7, 14, and 28, respectively.\n- **start_date and end_date:** Specify the date range for the data.\n- **timezone:** Determines the timezone for the output datetime, with options like `Exchange`, `UTC`, or specific IANA timezone names.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and other metadata.\n- **values:** An array of time series data points, each with a datetime and the corresponding Ultimate Oscillator value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to evaluate the momentum of a financial instrument over various time frames to make informed trading decisions.\n\n### Example Questions:\n1. \"What is the Ultimate Oscillator value for Apple Inc. over the last month with daily intervals?\"\n2. \"Can I get the Ultimate Oscillator readings for EUR/USD on a 5-minute interval for the past week?\"\n3. \"How does the Ultimate Oscillator for Bitcoin compare across different time periods?\"",
  "GetTimeSeriesVar": "The `/var` endpoint provides the Variance (VAR) indicator for a specified financial instrument, which is a measure of the dispersion of a data series from its mean. This indicator is commonly used to assess volatility, aiding in identifying potential trading opportunities and managing risk.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval between data points, options include `1min`, `5min`, `1h`, `1day`, etc.\n- **outputsize:** The number of data points to retrieve, ranging from 1 to 5000, with a default of 30.\n- **start_date and end_date:** Define the time range for the data. If specified, these dates are considered in the context of the provided timezone.\n- **series_type:** The price type used for calculating the indicator, such as `close`, `open`, `high`, `low`, or `volume`.\n- **time_period:** The number of periods over which to average, ranging from 1 to 800.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and indicator details.\n- **values:** An array of time series data points, each with a datetime and the corresponding VAR value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts looking to evaluate the volatility of a specific instrument over a given time frame. It supports various financial instruments, including stocks, forex, and cryptocurrencies.\n\n### Example Questions:\n- \"What is the variance of Apple's stock over the past month using daily intervals?\"\n- \"Can I get the volatility data for EUR/USD for the last week with 1-hour intervals?\"\n- \"How does the variance of Bitcoin compare over different time periods using closing prices?\"",
  "GetTimeSeriesVwap": "The `/vwap` endpoint provides the Volume Weighted Average Price (VWAP) for a specified financial instrument. VWAP is a trading indicator that reflects the average price of a security, weighted by volume, over a specified time period. This endpoint is useful for traders and analysts who want to evaluate trading performance or make informed trading decisions.\n\n### Key Input Parameters:\n- **symbol (required):** The ticker symbol of the instrument, such as `AAPL` for Apple Inc.\n- **interval (required):** The time interval for the data points, such as `1min`, `5min`, or `1day`.\n- **outputsize:** The number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date and end_date:** Define the time range for the data retrieval. These can be specified in a detailed format or using terms like `today`.\n- **timezone:** Specifies the timezone for the output datetime, which can be `Exchange`, `UTC`, or a specific IANA timezone.\n- **format:** The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta:** General information about the request, including the symbol, interval, and exchange details.\n- **values:** An array of time series data points, each with a datetime and VWAP value.\n- **status:** The status of the response, typically \"ok\" if successful.\n\n### Usage Context:\nThis endpoint is particularly useful for financial analysts and traders who need to analyze the trading performance of a security over time. It can be used to assess whether a security was traded at a premium or discount relative to its average price.\n\n### Example Questions:\n1. \"What is the VWAP for Apple stock over the last week with 1-hour intervals?\"\n2. \"Can I get the VWAP for EUR/USD for today in UTC timezone?\"\n3. \"How does the VWAP for Bitcoin compare over the past month using daily intervals?\"",
  "GetTimeSeriesWclPrice": "The `/wclprice` endpoint provides the Weighted Close Price (WCLPRICE) indicator for a specified financial instrument. This indicator calculates an average of the high, low, and close prices, giving extra weight to the close price, to offer a balanced view of the price action over a specified time interval.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This is required to identify the specific security.\n- **interval**: The time interval for the data points (e.g., `1min`, `1day`). This is required to determine the frequency of the data.\n- **outputsize**: The number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: Specify the date range for the data. If provided, they determine the period for which the data is fetched.\n- **timezone**: Determines the timezone for the output datetime, which can be set to `Exchange`, `UTC`, or a specific IANA timezone.\n- **format**: The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe response includes metadata about the request, such as the symbol, interval, and exchange information. It also contains an array of time series data points, each with a timestamp and the calculated WCLPRICE value.\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to analyze the price movements of a security with an emphasis on the closing price. It can be used for both historical data analysis and real-time monitoring, depending on the specified interval and date range.\n\n### Example Questions:\n1. What is the weighted close price for Apple stock over the past week?\n2. How does the weighted close price of EUR/USD change every 15 minutes?\n3. Can I get the weighted close price for Bitcoin in CSV format for the last month?",
  "GetTimeSeriesWillR": "The `/willr` endpoint provides the Williams %R (WILLR) indicator, a momentum oscillator that helps traders assess whether a security is overbought or oversold by comparing its closing price to its high-low range over a specified period. This endpoint is useful for identifying potential trend reversals in various financial instruments.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the financial instrument (e.g., `AAPL`, `EUR/USD`). This is required to specify which instrument's data you want.\n- **interval**: The time interval for the data points (e.g., `1min`, `1day`). This is required to define the frequency of the data.\n- **time_period**: The number of periods over which the Williams %R is calculated, with a default of 14.\n- **outputsize**: The number of data points to retrieve, ranging from 1 to 5000, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: Optional parameters to specify the date range for the data.\n- **format**: The format of the response, either `JSON` or `CSV`.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, such as the symbol, interval, and exchange details.\n- **values**: An array of data points, each including the datetime and the calculated Williams %R value.\n- **status**: The status of the response, typically \"ok\" if successful.\n\n### Example Questions:\n1. \"How can I find out if Apple stock is currently overbought or oversold?\"\n2. \"What is the Williams %R value for EUR/USD for the past week?\"\n3. \"Can I get the Williams %R indicator for Bitcoin with 1-hour intervals?\"",
  "GetTimeSeriesWma": "The `/wma` endpoint provides the Weighted Moving Average (WMA) for a specified financial instrument. This technical indicator offers a smoothed view of price action by giving more weight to recent prices, making it more responsive to price changes.\n\n### Key Input Parameters:\n- **symbol**: The ticker symbol of the instrument (e.g., `AAPL`, `EUR/USD`). This is a required parameter.\n- **interval**: The time interval for data points, such as `1min`, `5min`, `1day`, etc. This is also required.\n- **outputsize**: Number of data points to retrieve, with a default of 30 if no date parameters are set.\n- **start_date** and **end_date**: Define the date range for the data, formatted as `YYYY-MM-DD` or `YYYY-MM-DD HH:MM:SS`.\n- **series_type**: The price type used for the WMA calculation, such as `close`, `open`, `high`, `low`, or `volume`.\n- **time_period**: The number of periods over which the average is calculated, ranging from 1 to 800.\n\n### Response:\nThe endpoint returns a JSON object containing:\n- **meta**: General information about the request, including the symbol, interval, and exchange details.\n- **values**: An array of time series data points, each with a timestamp and the corresponding WMA value.\n- **status**: Indicates the success of the request, typically \"ok\".\n\n### Usage Context:\nThis endpoint is useful for traders and analysts who need to assess the trend of a security by analyzing its weighted moving average over a specific time frame. It supports various financial instruments, including stocks, forex, and cryptocurrencies.\n\n### Example Questions:\n1. \"What is the 15-minute weighted moving average for Apple stock?\"\n2. \"Can I get the WMA for EUR/USD over the last month?\"\n3. \"How does the weighted moving average of Bitcoin compare over different time intervals?\""
}